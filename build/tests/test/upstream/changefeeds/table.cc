// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/table.yaml
#include "testlib.h"
void test_upstream_changefeeds_table() {
    enter_section("test_upstream_changefeeds_table: Test changefeeds on a table");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto all = (tbl.changes().run(*conn)));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 1), R::object("id", 2))), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 2}})));
    TEST_EQ(maybe_run(fetch(all, 2), *conn), (bag(R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 1}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 2}}}}})));
    TEST_EQ(maybe_run(tbl.get(1).update(R::object("version", 1)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(fetch(all, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}}}, {"new_val", R::Object{{"id", 1}, {"version", 1}}}}}));
    TEST_EQ(maybe_run(tbl.get(1).delete_(), *conn), (partial(R::Object{{"errors", 0}, {"deleted", 1}})));
    TEST_EQ(maybe_run(fetch(all, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}, {"version", 1}}}, {"new_val", R::Nil()}}}));
    TEST_DO(auto pluck = (tbl.changes().pluck(R::object("new_val", R::array("version"))).run(*conn)));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 5, "version", 5))), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 1}})));
    TEST_EQ(maybe_run(fetch(pluck, 1), *conn), (R::Array{R::Object{{"new_val", R::Object{{"version", 5}}}}}));
    TEST_EQ(maybe_run(tbl.changes().order_by("id"), *conn), (err("ReqlQueryLogicError", "Cannot call a terminal (`reduce`, `count`, etc.) on an infinite stream (such as a changefeed).")));
    TEST_DO(auto overflow = (tbl.changes().run(*conn, R::optargs("changefeed_queue_size", 100))));
    TEST_DO(maybe_run(tbl.insert(R::range(200).map([=](R::Var x){ return R::object(); })), *conn));
    TEST_EQ(maybe_run(fetch(overflow, 90), *conn), (partial(R::Array{R::Object{{"error", regex("Changefeed cache over array size limit, skipped \\d+ elements.")}}})));
    TEST_DO(auto vtbl = (R::db("rethinkdb").table("_debug_scratch")));
    TEST_DO(auto allVirtual = (vtbl.changes().run(*conn)));
    TEST_EQ(maybe_run(vtbl.insert(R::array(R::object("id", 1), R::object("id", 2))), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 2}})));
    TEST_EQ(maybe_run(fetch(allVirtual, 2), *conn), (bag(R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 1}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 2}}}}})));
    TEST_EQ(maybe_run(vtbl.get(1).update(R::object("version", 1)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(fetch(allVirtual, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}}}, {"new_val", R::Object{{"id", 1}, {"version", 1}}}}}));
    TEST_EQ(maybe_run(vtbl.get(1).delete_(), *conn), (partial(R::Object{{"errors", 0}, {"deleted", 1}})));
    TEST_EQ(maybe_run(fetch(allVirtual, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}, {"version", 1}}}, {"new_val", R::Nil()}}}));
    TEST_DO(auto vpluck = (vtbl.changes().pluck(R::object("new_val", R::array("version"))).run(*conn)));
    TEST_EQ(maybe_run(vtbl.insert(R::array(R::object("id", 5, "version", 5))), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 1}})));
    TEST_EQ(maybe_run(fetch(vpluck, 1), *conn), (R::Array{R::Object{{"new_val", R::Object{{"version", 5}}}}}));
    exit_section();
}
