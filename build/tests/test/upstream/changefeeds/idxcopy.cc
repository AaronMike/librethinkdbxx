// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/idxcopy.yaml
#include "testlib.h"
void test_upstream_changefeeds_idxcopy() {
    enter_section("test_upstream_changefeeds_idxcopy: Test duplicate indexes with squashing");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(maybe_run(tbl.index_create("a"), *conn), (partial(R::Object{{"created", 1}})));
    TEST_DO(maybe_run(tbl.index_wait("a"), *conn));
    TEST_DO(auto feed = (tbl.order_by(R::OptArgs{{"index", R::expr("a")}}).limit(10).changes(R::OptArgs{{"squash", R::expr(2)}}).run(*conn, R::optargs("max_batch_rows", 1))));
    TEST_EQ(maybe_run(tbl.insert(R::range(0, 12).map(R::object("id", R::row, "a", 5))), *conn), (partial(R::Object{{"inserted", 12}, {"errors", 0}})));
    TEST_EQ(maybe_run(tbl.get_all(1, 8, 9, R::OptArgs{{"index", R::expr("id")}}).delete_(), *conn), (partial(R::Object{{"deleted", 3}, {"errors", 0}})));
    TEST_DO(maybe_run(wait(2), *conn));
    TEST_EQ(maybe_run(fetch(feed), *conn), (bag(R::Array{R::Object{{"new_val", R::Object{{"a", 5}, {"id", 0}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 2}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 3}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 4}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 5}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 6}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 7}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 10}}}, {"old_val", nil}}, R::Object{{"new_val", R::Object{{"a", 5}, {"id", 11}}}, {"old_val", nil}}})));
    exit_section();
}
