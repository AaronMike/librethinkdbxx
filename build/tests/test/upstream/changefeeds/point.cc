// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/point.yaml
#include "testlib.h"
void test_upstream_changefeeds_point() {
    enter_section("test_upstream_changefeeds_point: Test point changebasics");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto basic = (tbl.get(1).changes(R::OptArgs{{"include_initial", R::expr(true)}}).run(*conn)));
    TEST_EQ(maybe_run(fetch(basic, 1), *conn), (R::Array{R::Object{{"new_val", R::Nil()}}}));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 1)), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 1}})));
    TEST_EQ(maybe_run(fetch(basic, 1), *conn), (R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 1}}}}}));
    TEST_EQ(maybe_run(tbl.get(1).update(R::object("update", 1)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(fetch(basic, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}}}, {"new_val", R::Object{{"id", 1}, {"update", 1}}}}}));
    TEST_EQ(maybe_run(tbl.get(1).delete_(), *conn), (partial(R::Object{{"errors", 0}, {"deleted", 1}})));
    TEST_EQ(maybe_run(fetch(basic, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}, {"update", 1}}}, {"new_val", R::Nil()}}}));
    TEST_DO(auto filter = (tbl.get(1).changes(R::OptArgs{{"squash", R::expr(false)}, {"include_initial", R::expr(true)}}).filter(R::row["new_val"]["update"].gt(2))["new_val"]["update"].run(*conn)));
    TEST_DO(maybe_run(tbl.insert(R::object("id", 1, "update", 1)), *conn));
    TEST_DO(maybe_run(tbl.get(1).update(R::object("update", 4)), *conn));
    TEST_DO(maybe_run(tbl.get(1).update(R::object("update", 1)), *conn));
    TEST_DO(maybe_run(tbl.get(1).update(R::object("update", 7)), *conn));
    TEST_EQ(maybe_run(fetch(filter, 2), *conn), (R::Array{4, 7}));
    TEST_DO(auto pluck = (tbl.get(3).changes(R::OptArgs{{"squash", R::expr(false)}, {"include_initial", R::expr(true)}}).pluck(R::object("new_val", R::array("red", "blue")))["new_val"].run(*conn)));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 3, "red", 1, "green", 1)), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 1}})));
    TEST_EQ(maybe_run(tbl.get(3).update(R::object("blue", 2, "green", 3)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(tbl.get(3).update(R::object("green", 4)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(tbl.get(3).update(R::object("blue", 4)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(fetch(pluck, 4), *conn), (R::Array{R::Object{{"red", 1}}, R::Object{{"blue", 2}, {"red", 1}}, R::Object{{"blue", 2}, {"red", 1}}, R::Object{{"blue", 4}, {"red", 1}}}));
    TEST_DO(auto dtbl = (R::db("rethinkdb").table("_debug_scratch")));
    TEST_DO(auto debug = (dtbl.get(1).changes(R::OptArgs{{"include_initial", R::expr(true)}}).run(*conn)));
    TEST_EQ(maybe_run(fetch(debug, 1), *conn), (R::Array{R::Object{{"new_val", R::Nil()}}}));
    TEST_EQ(maybe_run(dtbl.insert(R::object("id", 1)), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 1}})));
    TEST_EQ(maybe_run(fetch(debug, 1), *conn), (R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 1}}}}}));
    TEST_EQ(maybe_run(dtbl.get(1).update(R::object("update", 1)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(fetch(debug, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}}}, {"new_val", R::Object{{"id", 1}, {"update", 1}}}}}));
    TEST_EQ(maybe_run(dtbl.get(1).delete_(), *conn), (partial(R::Object{{"errors", 0}, {"deleted", 1}})));
    TEST_EQ(maybe_run(fetch(debug, 1), *conn), (R::Array{R::Object{{"old_val", R::Object{{"id", 1}, {"update", 1}}}, {"new_val", R::Nil()}}}));
    TEST_EQ(maybe_run(dtbl.insert(R::object("id", 5, "red", 1, "green", 1)), *conn), (R::Object{{"skipped", 0}, {"deleted", 0}, {"unchanged", 0}, {"errors", 0}, {"replaced", 0}, {"inserted", 1}}));
    TEST_DO(auto dtblPluck = (dtbl.get(5).changes(R::OptArgs{{"include_initial", R::expr(true)}}).pluck(R::object("new_val", R::array("red", "blue")))["new_val"].run(*conn)));
    TEST_EQ(maybe_run(fetch(dtblPluck, 1), *conn), (R::Array{R::Object{{"red", 1}}}));
    TEST_EQ(maybe_run(dtbl.get(5).update(R::object("blue", 2, "green", 3)), *conn), (partial(R::Object{{"errors", 0}, {"replaced", 1}})));
    TEST_EQ(maybe_run(fetch(dtblPluck, 1), *conn), (R::Array{R::Object{{"blue", 2}, {"red", 1}}}));
    TEST_DO(auto tableId = (tbl.info()["id"].run(*conn)));
    TEST_DO(auto rtblPluck = (R::db("rethinkdb").table("table_status").get(tableId).changes(R::OptArgs{{"include_initial", R::expr(true)}}).run(*conn)));
    TEST_EQ(maybe_run(fetch(rtblPluck, 1), *conn), (partial(R::Array{R::Object{{"new_val", partial(R::Object{{"db", "test"}})}}})));
    TEST_DO(maybe_run(tbl.reconfigure(R::OptArgs{{"shards", R::expr(3)}, {"replicas", R::expr(1)}}), *conn));
    TEST_EQ(maybe_run(fetch(rtblPluck, 1, 2), *conn), (partial(R::Array{R::Object{{"old_val", partial(R::Object{{"db", "test"}})}, {"new_val", partial(R::Object{{"db", "test"}})}}})));
    exit_section();
}
