// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/point.yaml
#include "testlib.h"
void test_upstream_changefeeds_point() {
    enter_section("test_upstream_changefeeds_point: Test point changebasics");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto basic = (tbl.get(1).changes().run_cursor(*conn)));
    TEST_EQ(fetch(basic, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Nil()}}}));
    TEST_EQ(tbl.insert(R::object("id", 1)).run(*conn), (partial(R::Object{{"errors",0}, {"inserted",1}})));
    TEST_EQ(fetch(basic, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"id",1}}}, {"old_val",R::Nil()}}}));
    TEST_EQ(tbl.get(1).update(R::object("update", 1)).run(*conn), (partial(R::Object{{"errors",0}, {"replaced",1}})));
    TEST_EQ(fetch(basic, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"id",1}, {"update",1}}}, {"old_val",R::Object{{"id",1}}}}}));
    TEST_EQ(tbl.get(1).delete_().run(*conn), (partial(R::Object{{"errors",0}, {"deleted",1}})));
    TEST_EQ(fetch(basic, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Nil()}, {"old_val",R::Object{{"id",1}, {"update",1}}}}}));
    TEST_DO(auto filter = (tbl.get(1).changes(R::OptArgs{{"squash", R::expr(false)}}).filter(R::row["new_val"]["update"].gt(2))["new_val"]["update"].run_cursor(*conn)));
    tbl.insert(R::object("id", 1, "update", 1)).run(*conn);
    tbl.get(1).update(R::object("update", 4)).run(*conn);
    tbl.get(1).update(R::object("update", 1)).run(*conn);
    tbl.get(1).update(R::object("update", 7)).run(*conn);
    TEST_EQ(fetch(filter, 2).run(*conn), (R::Array{4, 7}));
    TEST_DO(auto pluck = (tbl.get(3).changes(R::OptArgs{{"squash", R::expr(false)}}).pluck(R::object("new_val", R::array("red", "blue")))["new_val"].run_cursor(*conn)));
    TEST_EQ(tbl.insert(R::object("id", 3, "red", 1, "green", 1)).run(*conn), (partial(R::Object{{"errors",0}, {"inserted",1}})));
    TEST_EQ(tbl.get(3).update(R::object("blue", 2, "green", 3)).run(*conn), (partial(R::Object{{"errors",0}, {"replaced",1}})));
    TEST_EQ(tbl.get(3).update(R::object("green", 4)).run(*conn), (partial(R::Object{{"errors",0}, {"replaced",1}})));
    TEST_EQ(tbl.get(3).update(R::object("blue", 4)).run(*conn), (partial(R::Object{{"errors",0}, {"replaced",1}})));
    TEST_EQ(fetch(pluck, 4).run(*conn), (R::Array{R::Object{{"red",1}}, R::Object{{"red",1}, {"blue",2}}, R::Object{{"red",1}, {"blue",2}}, R::Object{{"red",1}, {"blue",4}}}));
    TEST_DO(auto dtbl = (R::db("rethinkdb").table("_debug_scratch")));
    TEST_DO(auto debug = (dtbl.get(1).changes().run_cursor(*conn)));
    TEST_EQ(fetch(debug, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Nil()}}}));
    TEST_EQ(dtbl.insert(R::object("id", 1)).run(*conn), (partial(R::Object{{"errors",0}, {"inserted",1}})));
    TEST_EQ(fetch(debug, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"id",1}}}, {"old_val",R::Nil()}}}));
    TEST_EQ(dtbl.get(1).update(R::object("update", 1)).run(*conn), (partial(R::Object{{"errors",0}, {"replaced",1}})));
    TEST_EQ(fetch(debug, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"id",1}, {"update",1}}}, {"old_val",R::Object{{"id",1}}}}}));
    TEST_EQ(dtbl.get(1).delete_().run(*conn), (partial(R::Object{{"errors",0}, {"deleted",1}})));
    TEST_EQ(fetch(debug, 1).run(*conn), (R::Array{R::Object{{"new_val",R::Nil()}, {"old_val",R::Object{{"id",1}, {"update",1}}}}}));
    TEST_EQ(dtbl.insert(R::object("id", 5, "red", 1, "green", 1)).run(*conn), (R::Object{{"deleted",0}, {"skipped",0}, {"replaced",0}, {"inserted",1}, {"unchanged",0}, {"errors",0}}));
    TEST_DO(auto dtblPluck = (dtbl.get(5).changes().pluck(R::object("new_val", R::array("red", "blue")))["new_val"].run_cursor(*conn)));
    TEST_EQ(fetch(dtblPluck, 1).run(*conn), (R::Array{R::Object{{"red",1}}}));
    TEST_EQ(dtbl.get(5).update(R::object("blue", 2, "green", 3)).run(*conn), (partial(R::Object{{"errors",0}, {"replaced",1}})));
    TEST_EQ(fetch(dtblPluck, 1).run(*conn), (R::Array{R::Object{{"red",1}, {"blue",2}}}));
    TEST_DO(auto tableId = (tbl.info()["id"].run_cursor(*conn)));
    TEST_DO(auto rtblPluck = (R::db("rethinkdb").table("table_status").get(tableId).changes().run_cursor(*conn)));
    TEST_EQ(fetch(rtblPluck, 1).run(*conn), (partial(R::Array{R::Object{{"new_val",partial(R::Object{{"db","test"}})}}})));
    tbl.reconfigure(R::OptArgs{{"shards", R::expr(3)}, {"replicas", R::expr(1)}}).run(*conn);
    TEST_EQ(fetch(rtblPluck, 1).run(*conn), (partial(R::Array{R::Object{{"old_val",partial(R::Object{{"db","test"}})}, {"new_val",partial(R::Object{{"db","test"}})}}})));
    exit_section();
}
