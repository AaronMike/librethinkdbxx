// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/squash.yaml
#include "testlib.h"
void test_upstream_changefeeds_squash() {
    enter_section("test_upstream_changefeeds_squash: Test changefeed squashing");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(tbl.changes(R::OptArgs{{"squash", R::expr(true)}}).type_of().run(*conn), ("STREAM"));
    auto normal_changes = tbl.changes().limit(2).run_cursor(*conn);
    auto false_squash_changes = tbl.changes(R::OptArgs{{"squash", R::expr(false)}}).limit(2).run_cursor(*conn);
    auto long_squash_changes = tbl.changes(R::OptArgs{{"squash", R::expr(0.5)}}).limit(1).run_cursor(*conn);
    auto squash_changes = tbl.changes(R::OptArgs{{"squash", R::expr(true)}}).limit(1).run_cursor(*conn);
    TEST_EQ(tbl.insert(R::object("id", 100))["inserted"].run(*conn), (1));
    TEST_EQ(tbl.get(100).update(R::object("a", 1))["replaced"].run(*conn), (1));
    TEST_EQ(normal_changes.run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"id",100}}}, {"old_val",R::Nil()}}, R::Object{{"new_val",R::Object{{"a",1}, {"id",100}}}, {"old_val",R::Object{{"id",100}}}}}));
    TEST_EQ(false_squash_changes.run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"id",100}}}, {"old_val",R::Nil()}}, R::Object{{"new_val",R::Object{{"a",1}, {"id",100}}}, {"old_val",R::Object{{"id",100}}}}}));
    TEST_EQ(long_squash_changes.run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"a",1}, {"id",100}}}, {"old_val",R::Nil()}}}));
    TEST_EQ(squash_changes.run(*conn), (R::Array{R::Object{{"new_val",R::Object{{"a",1}, {"id",100}}}, {"old_val",R::Nil()}}}));
    TEST_EQ(tbl.changes(R::OptArgs{{"squash", R::expr(R::Nil())}}).run(*conn), (err("RqlRuntimeError", "Expected BOOL or NUMBER but found NULL.")));
    TEST_EQ(tbl.changes(R::OptArgs{{"squash", R::expr(-10)}}).run(*conn), (err("RqlRuntimeError", "Expected BOOL or a positive NUMBER but found a negative NUMBER.")));
}
