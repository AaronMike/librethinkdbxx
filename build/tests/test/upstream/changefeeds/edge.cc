// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/edge.yaml
#include "testlib.h"
void test_upstream_changefeeds_edge() {
    enter_section("test_upstream_changefeeds_edge: Test edge cases of changefeed operations");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto common_prefix = (R::expr(R::array(0, 1, 2, 3, 4, 5, 6, 7, 8))));
    TEST_EQ(maybe_run(tbl.index_create("sindex", [=](R::Var row){ return common_prefix.append((*row)["value"]); }), *conn), (R::Object{{"created", 1}}));
    TEST_DO(maybe_run(tbl.index_wait("sindex"), *conn));
    TEST_DO(auto pre = (R::range(7).coerce_to("array").add(R::range(10, 70).coerce_to("array")).append(100).map(R::row.coerce_to("string")).run(*conn)));
    TEST_DO(auto mid = (R::range(2, 9).coerce_to("array").add(R::range(20, 90).coerce_to("array")).map(R::row.coerce_to("string")).run(*conn)));
    TEST_DO(auto post = (R::range(3, 10).coerce_to("array").add(R::range(30, 100).coerce_to("array")).map(R::row.coerce_to("string")).run(*conn)));
    TEST_DO(auto erroredres = (R::range(2).coerce_to("array").add(R::range(10, 20).coerce_to("array")).append(100).map(R::row.coerce_to("string")).run(*conn)));
    TEST_DO(auto pre_changes = (tbl.between(R::minval, common_prefix.append("7"), R::OptArgs{{"index", R::expr("sindex")}}).changes(R::OptArgs{{"squash", R::expr(false)}}).limit(len(pre))["new_val"]["value"].run(*conn)));
    TEST_DO(auto mid_changes = (tbl.between(common_prefix.append("2"), common_prefix.append("9"), R::OptArgs{{"index", R::expr("sindex")}}).changes(R::OptArgs{{"squash", R::expr(false)}}).limit(len(post))["new_val"]["value"].run(*conn)));
    TEST_DO(auto post_changes = (tbl.between(common_prefix.append("3"), R::maxval, R::OptArgs{{"index", R::expr("sindex")}}).changes(R::OptArgs{{"squash", R::expr(false)}}).limit(len(mid))["new_val"]["value"].run(*conn)));
    TEST_DO(auto premap_changes1 = (tbl.map(R::branch(R::row["value"].lt("2"), R::row, R::row["dummy"])).changes(R::OptArgs{{"squash", R::expr(false)}}).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto postmap_changes1 = (tbl.changes(R::OptArgs{{"squash", R::expr(false)}}).map(R::branch(R::row["new_val"]["value"].lt("2"), R::row, R::row["dummy"])).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto prefilter_changes1 = (tbl.filter(R::branch(R::row["value"].lt("2"), true, R::row["dummy"])).changes(R::OptArgs{{"squash", R::expr(false)}}).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto postfilter_changes1 = (tbl.changes(R::OptArgs{{"squash", R::expr(false)}}).filter(R::branch(R::row["new_val"]["value"].lt("2"), true, R::row["dummy"])).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto premap_changes2 = (tbl.map(R::branch(R::row["value"].lt("2"), R::row, R::expr(R::array())[1])).changes(R::OptArgs{{"squash", R::expr(false)}}).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto postmap_changes2 = (tbl.changes(R::OptArgs{{"squash", R::expr(false)}}).map(R::branch(R::row["new_val"]["value"].lt("2"), R::row, R::expr(R::array())[1])).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto prefilter_changes2 = (tbl.filter(R::branch(R::row["value"].lt("2"), true, R::expr(R::array())[1])).changes(R::OptArgs{{"squash", R::expr(false)}}).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto postfilter_changes2 = (tbl.changes(R::OptArgs{{"squash", R::expr(false)}}).filter(R::branch(R::row["new_val"]["value"].lt("2"), true, R::expr(R::array())[1])).limit(len(erroredres))["new_val"]["value"].run(*conn)));
    TEST_DO(auto nondetermmap = (R::branch(R::random().gt(0.5), R::row, R::error("dummy"))));
    TEST_DO(auto nondetermfilter = ([=](R::Var row){ return R::random().gt(0.5); }));
    TEST_EQ(maybe_run(tbl.map(nondetermmap).changes(R::OptArgs{{"squash", R::expr(false)}}), *conn), (err("ReqlQueryLogicError", "Cannot call `changes` after a non-deterministic function.")));
    TEST_DO(auto postmap_changes3 = (tbl.changes(R::OptArgs{{"squash", R::expr(false)}}).map(nondetermmap).limit(100).run(*conn)));
    TEST_EQ(maybe_run(tbl.filter(nondetermfilter).changes(R::OptArgs{{"squash", R::expr(false)}}), *conn), (err("ReqlQueryLogicError", "Cannot call `changes` after a non-deterministic function.")));
    TEST_DO(auto postfilter_changes3 = (tbl.changes(R::OptArgs{{"squash", R::expr(false)}}).filter(nondetermfilter).limit(4).run(*conn)));
    TEST_EQ(maybe_run(tbl.insert(R::range(101).map(R::object("id", R::uuid().coerce_to("binary").slice(0, R::random(4, 24)).coerce_to("string"), "value", R::row.coerce_to("string")))), *conn), (R::Object{{"skipped", 0}, {"deleted", 0}, {"unchanged", 0}, {"errors", 0}, {"replaced", 0}, {"inserted", 101}}));
    TEST_EQ(maybe_run(pre_changes, *conn), (bag(pre)));
    TEST_EQ(maybe_run(mid_changes, *conn), (bag(mid)));
    TEST_EQ(maybe_run(post_changes, *conn), (bag(post)));
    TEST_EQ(maybe_run(premap_changes1, *conn), (bag(erroredres)));
    TEST_EQ(maybe_run(premap_changes2, *conn), (bag(erroredres)));
    TEST_EQ(maybe_run(postmap_changes1, *conn), (err("ReqlNonExistenceError", "No attribute `dummy` in object:")));
    TEST_EQ(maybe_run(postmap_changes2, *conn), (err("ReqlNonExistenceError", "Index out of bounds: 1")));
    TEST_EQ(maybe_run(postmap_changes3, *conn), (err("ReqlUserError", "dummy")));
    TEST_EQ(maybe_run(prefilter_changes1, *conn), (bag(erroredres)));
    TEST_EQ(maybe_run(prefilter_changes2, *conn), (bag(erroredres)));
    TEST_EQ(maybe_run(postfilter_changes1, *conn), (bag(erroredres)));
    TEST_EQ(maybe_run(postfilter_changes2, *conn), (bag(erroredres)));
    exit_section();
}
