// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/include_states.yaml
#include "testlib.h"
void test_upstream_changefeeds_include_states() {
    enter_section("test_upstream_changefeeds_include_states: Test `include_states`");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(tbl.changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}}).limit(1).run(*conn), (R::Array{R::Object{{"state","ready"}}}));
    TEST_EQ(tbl.get(0).changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}}).limit(3).run(*conn), (R::Array{R::Object{{"state","initializing"}}, R::Object{{"new_val",R::Nil()}}, R::Object{{"state","ready"}}}));
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).limit(10).changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}}).limit(2).run(*conn), (R::Array{R::Object{{"state","initializing"}}, R::Object{{"state","ready"}}}));
    tbl.insert(R::object("id", 1)).run(*conn);
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).limit(10).changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}}).limit(3).run(*conn), (R::Array{R::Object{{"state","initializing"}}, R::Object{{"new_val",R::Object{{"id",1}}}}, R::Object{{"state","ready"}}}));
    TEST_DO(auto tblchanges = (tbl.changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}}).run_cursor(*conn)));
    tbl.insert(R::object("id", 2)).run(*conn);
    TEST_EQ(fetch(tblchanges, 2).run(*conn), (R::Array{R::Object{{"state","ready"}}, R::Object{{"old_val",R::Nil()}, {"new_val",R::Object{{"id",2}}}}}));
    TEST_DO(auto getchanges = (tbl.get(2).changes(R::OptArgs{{"include_states", R::expr(true)}}).run_cursor(*conn)));
    tbl.get(2).update(R::object("a", 1)).run(*conn);
    TEST_EQ(fetch(getchanges, 4).run(*conn), (R::Array{R::Object{{"state","initializing"}}, R::Object{{"new_val",R::Object{{"id",2}}}}, R::Object{{"state","ready"}}, R::Object{{"old_val",R::Object{{"id",2}}}, {"new_val",R::Object{{"a",1}, {"id",2}}}}}));
    TEST_DO(auto limitchanges = (tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).limit(10).changes(R::OptArgs{{"include_states", R::expr(true)}}).run_cursor(*conn)));
    tbl.insert(R::object("id", 3)).run(*conn);
    TEST_EQ(fetch(limitchanges, 5).run(*conn), (R::Array{R::Object{{"state","initializing"}}, R::Object{{"new_val",R::Object{{"a",1}, {"id",2}}}}, R::Object{{"new_val",R::Object{{"id",1}}}}, R::Object{{"state","ready"}}, R::Object{{"old_val",R::Nil()}, {"new_val",R::Object{{"id",3}}}}}));
    exit_section();
}
