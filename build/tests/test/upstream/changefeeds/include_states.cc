// auto-generated by yaml_to_cxx.py from test/upstream/changefeeds/include_states.yaml
#include "testlib.h"
void test_upstream_changefeeds_include_states() {
    enter_section("test_upstream_changefeeds_include_states: Test `include_states`");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(maybe_run(tbl.changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}}).limit(1), *conn), (R::Array{R::Object{{"state", "ready"}}}));
    TEST_EQ(maybe_run(tbl.get(0).changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}, {"include_initial", R::expr(true)}}).limit(3), *conn), (R::Array{R::Object{{"state", "initializing"}}, R::Object{{"new_val", R::Nil()}}, R::Object{{"state", "ready"}}}));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).limit(10).changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}, {"include_initial", R::expr(true)}}).limit(2), *conn), (R::Array{R::Object{{"state", "initializing"}}, R::Object{{"state", "ready"}}}));
    TEST_DO(maybe_run(tbl.insert(R::object("id", 1)), *conn));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).limit(10).changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}, {"include_initial", R::expr(true)}}).limit(3), *conn), (R::Array{R::Object{{"state", "initializing"}}, R::Object{{"new_val", R::Object{{"id", 1}}}}, R::Object{{"state", "ready"}}}));
    TEST_DO(auto tblchanges = (tbl.changes(R::OptArgs{{"squash", R::expr(true)}, {"include_states", R::expr(true)}}).run(*conn)));
    TEST_DO(maybe_run(tbl.insert(R::object("id", 2)), *conn));
    TEST_EQ(maybe_run(fetch(tblchanges, 2), *conn), (R::Array{R::Object{{"state", "ready"}}, R::Object{{"new_val", R::Object{{"id", 2}}}, {"old_val", R::Nil()}}}));
    TEST_DO(auto getchanges = (tbl.get(2).changes(R::OptArgs{{"include_states", R::expr(true)}, {"include_initial", R::expr(true)}}).run(*conn)));
    TEST_DO(maybe_run(tbl.get(2).update(R::object("a", 1)), *conn));
    TEST_EQ(maybe_run(fetch(getchanges, 4), *conn), (R::Array{R::Object{{"state", "initializing"}}, R::Object{{"new_val", R::Object{{"id", 2}}}}, R::Object{{"state", "ready"}}, R::Object{{"old_val", R::Object{{"id", 2}}}, {"new_val", R::Object{{"id", 2}, {"a", 1}}}}}));
    TEST_DO(auto limitchanges = (tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).limit(10).changes(R::OptArgs{{"include_states", R::expr(true)}, {"include_initial", R::expr(true)}}).run(*conn)));
    TEST_DO(auto limitchangesdesc = (tbl.order_by(R::OptArgs{{"index", R::expr(R::desc("id"))}}).limit(10).changes(R::OptArgs{{"include_states", R::expr(true)}, {"include_initial", R::expr(true)}}).run(*conn)));
    TEST_DO(maybe_run(tbl.insert(R::object("id", 3)), *conn));
    TEST_EQ(maybe_run(fetch(limitchanges, 5), *conn), (R::Array{R::Object{{"state", "initializing"}}, R::Object{{"new_val", R::Object{{"id", 1}}}}, R::Object{{"new_val", R::Object{{"a", 1}, {"id", 2}}}}, R::Object{{"state", "ready"}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 3}}}}}));
    TEST_EQ(maybe_run(fetch(limitchangesdesc, 5), *conn), (R::Array{R::Object{{"state", "initializing"}}, R::Object{{"new_val", R::Object{{"a", 1}, {"id", 2}}}}, R::Object{{"new_val", R::Object{{"id", 1}}}}, R::Object{{"state", "ready"}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 3}}}}}));
    exit_section();
}
