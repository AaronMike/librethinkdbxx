// auto-generated by yaml_to_cxx.py from test/upstream/random.yaml
#include "testlib.h"
void test_upstream_random() {
    enter_section("test_upstream_random: Tests randomization functions");
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).sample(3).distinct().count(), *conn), (3));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).sample(3).count(), *conn), (3));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4, 5, 6)).sample(3).distinct().count(), *conn), (3));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).sample(4).distinct().count(), *conn), (3));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).sample(-1), *conn), (err("ReqlQueryLogicError", "Number of items to sample must be non-negative, got `-1`.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(1).sample(1), *conn), (err("ReqlQueryLogicError", "Cannot convert NUMBER to SEQUENCE", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::object()).sample(1), *conn), (err("ReqlQueryLogicError", "Cannot convert OBJECT to SEQUENCE", R::Array{0})));
    TEST_EQ(maybe_run(R::random().do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(1)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(1, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(1)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(0, 1, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(1)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(1, 0, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(1), (*x).gt(0)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(R::expr(0), 1, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(1)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(1, R::expr(0), R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(1), (*x).gt(0)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(R::expr(1), R::expr(0), R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(1), (*x).gt(0)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(0.495, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(0.495)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-0.495, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(0), (*x).gt(-0.495)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(1823756.24, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(1823756.24)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-1823756.24, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(0), (*x).gt(-1823756.24)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(10.5, 20.153, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(10.5), (*x).lt(20.153)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(20.153, 10.5, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(20.153), (*x).gt(10.5)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(31415926.1, 31415926, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(31415926.1), (*x).gt(31415926)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-10.5, 20.153, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(-10.5), (*x).lt(20.153)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-20.153, -10.5, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(-20.153), (*x).lt(-10.5)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-31415926, -31415926.1, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(-31415926), (*x).gt(-31415926.1)); }), *conn), (true));
    TEST_EQ(maybe_run(R::expr(R::array(R::random(), R::random())).distinct().count(), *conn), (2));
    TEST_EQ(maybe_run(R::expr(R::array(R::random(1, R::OptArgs{{"float", R::expr(true)}}), R::random(1, R::OptArgs{{"float", R::expr(true)}}))).distinct().count(), *conn), (2));
    TEST_EQ(maybe_run(R::expr(R::array(R::random(0, 1, R::OptArgs{{"float", R::expr(true)}}), R::random(0, 1, R::OptArgs{{"float", R::expr(true)}}))).distinct().count(), *conn), (2));
    TEST_EQ(maybe_run(R::random(0, R::OptArgs{{"float", R::expr(true)}}).eq(0), *conn), (true));
    TEST_EQ(maybe_run(R::random(5, 5, R::OptArgs{{"float", R::expr(true)}}).eq(5), *conn), (true));
    TEST_EQ(maybe_run(R::random(-499384756758, -499384756758, R::OptArgs{{"float", R::expr(true)}}).eq(-499384756758), *conn), (true));
    TEST_EQ(maybe_run(R::random(-93.94757, -93.94757, R::OptArgs{{"float", R::expr(true)}}).eq(-93.94757), *conn), (true));
    TEST_EQ(maybe_run(R::random(294.69148, 294.69148, R::OptArgs{{"float", R::expr(true)}}).eq(294.69148), *conn), (true));
    auto float_max = 1.7976931348623157e+308;
    auto float_min = 2.2250738585072014e-308;
    TEST_EQ(maybe_run(R::random(-float_max, float_max, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(-float_max), (*x).lt(float_max)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(float_max, -float_max, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(float_max), (*x).gt(-float_max)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(float_min, float_max, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(float_min), (*x).lt(float_max)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(float_min, -float_max, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(float_min), (*x).gt(-float_max)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-float_min, float_max, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).ge(-float_min), (*x).lt(float_max)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-float_min, -float_max, R::OptArgs{{"float", R::expr(true)}}).do_([=](R::Var x){ return R::and_((*x).le(-float_min), (*x).gt(-float_max)); }), *conn), (true));
    TEST_DO(auto upper_limit = (pow(2, 53) - 1));
    TEST_DO(auto lower_limit = (1 - pow(2, 53)));
    TEST_EQ(maybe_run(R::random(256).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(256)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(0, 256).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(256)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(R::expr(256)).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(256)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(R::expr(0), 256).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(256)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(0, R::expr(256)).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(256)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(R::expr(0), R::expr(256)).do_([=](R::Var x){ return R::and_((*x).ge(0), (*x).lt(256)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(10, 20).do_([=](R::Var x){ return R::and_((*x).ge(10), (*x).lt(20)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(9347849, 120937493).do_([=](R::Var x){ return R::and_((*x).ge(9347849), (*x).lt(120937493)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-10, 20).do_([=](R::Var x){ return R::and_((*x).ge(-10), (*x).lt(20)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-20, -10).do_([=](R::Var x){ return R::and_((*x).ge(-20), (*x).lt(-10)); }), *conn), (true));
    TEST_EQ(maybe_run(R::random(-120937493, -9347849).do_([=](R::Var x){ return R::and_((*x).ge(-120937493), (*x).lt(-9347849)); }), *conn), (true));
    TEST_EQ(maybe_run(R::expr(R::array(R::random(upper_limit), R::random(upper_limit))).distinct().count(), *conn), (2));
    TEST_EQ(maybe_run(R::expr(R::array(upper_limit, upper_limit)).map([=](R::Var x){ return R::random(*x); }).distinct().count(), *conn), (2));
    TEST_EQ(maybe_run(R::random(-0.5), *conn), (err("ReqlQueryLogicError", "Upper bound (-0.5) could not be safely converted to an integer.", R::Array{})));
    TEST_EQ(maybe_run(R::random(0.25), *conn), (err("ReqlQueryLogicError", "Upper bound (0.25) could not be safely converted to an integer.", R::Array{})));
    TEST_EQ(maybe_run(R::random(-10, 0.75), *conn), (err("ReqlQueryLogicError", "Upper bound (0.75) could not be safely converted to an integer.", R::Array{})));
    TEST_EQ(maybe_run(R::random(-120549.25, 39458), *conn), (err("ReqlQueryLogicError", "Lower bound (-120549.25) could not be safely converted to an integer.", R::Array{})));
    TEST_EQ(maybe_run(R::random(-6.5, 8.125), *conn), (err("ReqlQueryLogicError", "Lower bound (-6.5) could not be safely converted to an integer.", R::Array{})));
    TEST_EQ(maybe_run(R::random(R::OptArgs{{"float", R::expr(false)}}), *conn), (err("ReqlQueryLogicError", "Generating a random integer requires one or two bounds.", R::Array{})));
    TEST_EQ(maybe_run(R::random(0), *conn), (err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", R::Array{})));
    TEST_EQ(maybe_run(R::random(0, 0), *conn), (err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (0).", R::Array{})));
    TEST_EQ(maybe_run(R::random(515, 515), *conn), (err("ReqlQueryLogicError", "Lower bound (515) is not less than upper bound (515).", R::Array{})));
    TEST_EQ(maybe_run(R::random(-956, -956), *conn), (err("ReqlQueryLogicError", "Lower bound (-956) is not less than upper bound (-956).", R::Array{})));
    TEST_EQ(maybe_run(R::random(-10), *conn), (err("ReqlQueryLogicError", "Lower bound (0) is not less than upper bound (-10).", R::Array{})));
    TEST_EQ(maybe_run(R::random(20, 2), *conn), (err("ReqlQueryLogicError", "Lower bound (20) is not less than upper bound (2).", R::Array{})));
    TEST_EQ(maybe_run(R::random(2, -20), *conn), (err("ReqlQueryLogicError", "Lower bound (2) is not less than upper bound (-20).", R::Array{})));
    TEST_EQ(maybe_run(R::random(1456, 0), *conn), (err("ReqlQueryLogicError", "Lower bound (1456) is not less than upper bound (0).", R::Array{})));
    exit_section();
}
