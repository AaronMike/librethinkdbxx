// auto-generated by yaml_to_cxx.py from test/upstream/arity.yaml
#include "testlib.h"
void test_upstream_arity() {
    enter_section("test_upstream_arity: Test the arity of every function");
    auto db = R::db("test");
    auto obj = R::expr(R::object("a", 1));
    auto array = R::expr(R::array(1));
    auto tbl = db.table("test1");
    TEST_EQ(R::error().run(*conn), (err("RqlRuntimeError", "Empty ERROR term outside a default block.", R::Array{})));
    TEST_EQ(R::expr().run(*conn), (err_regex("TypeError", ".*takes at least 1 argument \\(0 given\\)", R::Array{})));
    TEST_EQ(db.table_drop().run(*conn), (err("RqlRuntimeError", "Expected type DATUM but found DATABASE.", R::Array{})));
    TEST_EQ(db.table_create().run(*conn), (err("RqlRuntimeError", "Expected type DATUM but found DATABASE.", R::Array{})));
    TEST_EQ(tbl.insert(range(10).map([=](R::Var i){ return R::object("id", *i); })).get_field("inserted").run(*conn), (10));
    TEST_EQ(tbl.get_all(0, 1, 2).get_field("id").run(*conn), (bag(R::Array{0, 1, 2})));
    TEST_EQ(tbl.get_all(R::args(R::array()), 0, 1, 2).get_field("id").run(*conn), (bag(R::Array{0, 1, 2})));
    TEST_EQ(tbl.get_all(R::args(R::array(0)), 1, 2).get_field("id").run(*conn), (bag(R::Array{0, 1, 2})));
    TEST_EQ(tbl.get_all(R::args(R::array(0, 1)), 2).get_field("id").run(*conn), (bag(R::Array{0, 1, 2})));
    TEST_EQ(tbl.get_all(R::args(R::array(0, 1, 2))).get_field("id").run(*conn), (bag(R::Array{0, 1, 2})));
    TEST_EQ(tbl.get_all(R::args(R::array(0)), 1, R::args(R::array(2))).get_field("id").run(*conn), (bag(R::Array{0, 1, 2})));
    TEST_EQ(R::branch(true, 1, R::error("a")).run(*conn), (1));
    TEST_EQ(R::branch(R::args(R::array(true, 1)), R::error("a")).run(*conn), (1));
    TEST_EQ(R::branch(R::args(R::array(true, 1, R::error("a")))).run(*conn), (err("RqlRuntimeError", "a", R::Array{})));
    TEST_EQ(tbl.group([=](R::Var row){ return (*row)["id"].mod(2); }).count(R::object("id", 0)).ungroup().run(*conn), (R::Array{R::Object{{"group",0}, {"reduction",1}}}));
    TEST_EQ(tbl.group([=](R::Var row){ return (*row)["id"].mod(2); }).count(R::args(R::array(R::object("id", 0)))).ungroup().run(*conn), (R::Array{R::Object{{"group",0}, {"reduction",1}}}));
    TEST_EQ(R::expr(R::object("a", R::object("b", 1))).merge(R::args(R::array(R::object("a", R::literal(R::object("c", 1)))))).run(*conn), (R::Object{{"a",R::Object{{"c",1}}}}));
    TEST_EQ(R::http("httpbin.org/get", "bad_param").run(*conn), (err_regex("TypeError", ".*takes exactly 1 argument \\(2 given\\)", R::Array{})));
    TEST_EQ(R::binary("1", "2").run(*conn), (err_regex("TypeError", ".*takes exactly 1 argument \\(2 given\\)", R::Array{})));
    TEST_EQ(R::binary().run(*conn), (err_regex("TypeError", ".*takes exactly 1 argument \\(0 given\\)", R::Array{})));
    TEST_EQ(db.table_drop("test1").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
}
