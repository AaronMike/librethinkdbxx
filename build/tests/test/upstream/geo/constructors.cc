// auto-generated by yaml_to_cxx.py from test/upstream/geo/constructors.yaml
#include "testlib.h"
void test_upstream_geo_constructors() {
    enter_section("test_upstream_geo_constructors: Test geo constructors");
    TEST_EQ(R::point(0, 0).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{0, 0}}, {"type","Point"}}));
    TEST_EQ(R::point(0, -90).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{0, -90}}, {"type","Point"}}));
    TEST_EQ(R::point(0, 90).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{0, 90}}, {"type","Point"}}));
    TEST_EQ(R::point(-180, 0).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{-180, 0}}, {"type","Point"}}));
    TEST_EQ(R::point(180, 0).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{180, 0}}, {"type","Point"}}));
    TEST_EQ(R::point(0, -91).run(*conn), (err("RqlRuntimeError", "Latitude must be between -90 and 90.  Got -91.", R::Array{0})));
    TEST_EQ(R::point(0, 91).run(*conn), (err("RqlRuntimeError", "Latitude must be between -90 and 90.  Got 91.", R::Array{0})));
    TEST_EQ(R::point(-181, 0).run(*conn), (err("RqlRuntimeError", "Longitude must be between -180 and 180.  Got -181.", R::Array{0})));
    TEST_EQ(R::point(181, 0).run(*conn), (err("RqlRuntimeError", "Longitude must be between -180 and 180.  Got 181.", R::Array{0})));
    TEST_EQ(R::line(R::array(0, 0), R::array(0, 0)).run(*conn), (err("RqlRuntimeError", "Invalid LineString.  Are there antipodal or duplicate vertices?", R::Array{0})));
    TEST_EQ(R::line(R::array(0, 0), R::array(0, 1)).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{R::Array{0, 0}, R::Array{0, 1}}}, {"type","LineString"}}));
    TEST_EQ(R::line(R::array(0, 0), R::array(1)).run(*conn), (err("RqlRuntimeError", "Expected point coordinate pair.  Got 1 element array instead of a 2 element one.", R::Array{0})));
    TEST_EQ(R::line(R::array(0, 0), R::array(1, 0, 0)).run(*conn), (err("RqlRuntimeError", "Expected point coordinate pair.  Got 3 element array instead of a 2 element one.", R::Array{0})));
    TEST_EQ(R::line(R::array(0, 0), R::array(0, 1), R::array(0, 0)).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{R::Array{0, 0}, R::Array{0, 1}, R::Array{0, 0}}}, {"type","LineString"}}));
    TEST_EQ(R::line(R::point(0, 0), R::point(0, 1), R::point(0, 0)).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{R::Array{0, 0}, R::Array{0, 1}, R::Array{0, 0}}}, {"type","LineString"}}));
    TEST_EQ(R::line(R::point(0, 0), R::point(1, 0), R::line(R::array(0, 0), R::array(1, 0))).run(*conn), (err("RqlRuntimeError", "Expected geometry of type `Point` but found `LineString`.", R::Array{0})));
    TEST_EQ(R::polygon(R::array(0, 0), R::array(0, 0), R::array(0, 0), R::array(0, 0)).run(*conn), (err("RqlRuntimeError", "Invalid LinearRing.  Are there antipodal or duplicate vertices? Is it self-intersecting?", R::Array{0})));
    TEST_EQ(R::polygon(R::array(0, 0), R::array(0, 1), R::array(1, 0)).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{R::Array{R::Array{0, 0}, R::Array{0, 1}, R::Array{1, 0}, R::Array{0, 0}}}}, {"type","Polygon"}}));
    TEST_EQ(R::polygon(R::array(0, 0), R::array(0, 1), R::array(1, 0), R::array(0, 0)).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{R::Array{R::Array{0, 0}, R::Array{0, 1}, R::Array{1, 0}, R::Array{0, 0}}}}, {"type","Polygon"}}));
    TEST_EQ(R::polygon(R::array(0, 0), R::array(0, 1), R::array(1, 0), R::array(-1, 0.5)).run(*conn), (err("RqlRuntimeError", "Invalid LinearRing.  Are there antipodal or duplicate vertices? Is it self-intersecting?", R::Array{0})));
    TEST_EQ(R::polygon(R::array(0, 0), R::array(0, 1), R::array(0)).run(*conn), (err("RqlRuntimeError", "Expected point coordinate pair.  Got 1 element array instead of a 2 element one.", R::Array{0})));
    TEST_EQ(R::polygon(R::array(0, 0), R::array(0, 1), R::array(0, 1, 0)).run(*conn), (err("RqlRuntimeError", "Expected point coordinate pair.  Got 3 element array instead of a 2 element one.", R::Array{0})));
    TEST_EQ(R::polygon(R::point(0, 0), R::point(0, 1), R::line(R::array(0, 0), R::array(0, 1))).run(*conn), (err("RqlRuntimeError", "Expected geometry of type `Point` but found `LineString`.", R::Array{0})));
}
