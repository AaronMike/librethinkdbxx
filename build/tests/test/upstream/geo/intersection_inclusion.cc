// auto-generated by yaml_to_cxx.py from test/upstream/geo/intersection_inclusion.yaml
#include "testlib.h"
void test_upstream_geo_intersection_inclusion() {
    enter_section("test_upstream_geo_intersection_inclusion: Test intersects and includes semantics");
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::point(1.5, 1.5)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::point(2.5, 2.5)).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).intersects(R::point(1.5, 1.5)).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).intersects(R::point(1.05, 1.05)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::point(2, 2)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::point(2, 1.5)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::line(R::array(1.5, 1.5), R::array(2, 2))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::line(R::array(1.5, 1.5), R::array(2, 1.5))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).intersects(R::point(1.1, 1.1)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).intersects(R::point(1.5, 1.1)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::line(R::array(2, 2), R::array(3, 3))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::line(R::array(2, 1.5), R::array(3, 3))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::line(R::array(1.5, 1.5), R::array(3, 3))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::polygon(R::array(1.2, 1.2), R::array(1.8, 1.2), R::array(1.8, 1.8), R::array(1.2, 1.8))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::polygon(R::array(1.5, 1.5), R::array(2.5, 1.5), R::array(2.5, 2.5), R::array(1.5, 2.5))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).intersects(R::polygon(R::array(1.2, 1.2), R::array(1.8, 1.2), R::array(1.8, 1.8), R::array(1.2, 1.8))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).intersects(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::polygon(R::array(2, 1.1), R::array(3, 1.1), R::array(3, 1.9), R::array(2, 1.9))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).intersects(R::polygon(R::array(2, 2), R::array(3, 2), R::array(3, 3), R::array(2, 3))).run(*conn), (false));
    TEST_EQ(R::point(1, 1).intersects(R::point(1.5, 1.5)).run(*conn), (false));
    TEST_EQ(R::point(1, 1).intersects(R::point(1, 1)).run(*conn), (true));
    TEST_EQ(R::line(R::array(1, 1), R::array(2, 1)).intersects(R::point(1, 1)).run(*conn), (true));
    TEST_EQ(R::line(R::array(1, 1), R::array(1, 2)).intersects(R::point(1, 1.8)).run(*conn), (true));
    TEST_EQ(R::line(R::array(1, 0), R::array(2, 0)).intersects(R::point(1.8, 0)).run(*conn), (true));
    TEST_EQ(R::line(R::array(1, 1), R::array(2, 1)).intersects(R::point(1.5, 1.5)).run(*conn), (false));
    TEST_EQ(R::line(R::array(1, 1), R::array(2, 1)).intersects(R::line(R::array(2, 1), R::array(3, 1))).run(*conn), (true));
    TEST_EQ(R::expr(R::array(R::point(1, 0), R::point(3, 0), R::point(2, 0))).intersects(R::line(R::array(0, 0), R::array(2, 0))).count().run(*conn), (2));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::point(1.5, 1.5)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::point(2.5, 2.5)).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).includes(R::point(1.5, 1.5)).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).includes(R::point(1.05, 1.05)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::point(2, 2)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::point(2, 1.5)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::line(R::array(1.5, 1.5), R::array(2, 2))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::line(R::array(1.5, 1.5), R::array(2, 1.5))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).includes(R::point(1.1, 1.1)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).includes(R::point(1.5, 1.1)).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::line(R::array(2, 2), R::array(3, 3))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::line(R::array(2, 1.5), R::array(2, 2))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::line(R::array(2, 1), R::array(2, 2))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::line(R::array(1.5, 1.5), R::array(3, 3))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::polygon(R::array(1.2, 1.2), R::array(1.8, 1.2), R::array(1.8, 1.8), R::array(1.2, 1.8))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::polygon(R::array(1.5, 1.5), R::array(2, 1.5), R::array(2, 2), R::array(1.5, 2))).run(*conn), (true));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::polygon(R::array(1.5, 1.5), R::array(2.5, 1.5), R::array(2.5, 2.5), R::array(1.5, 2.5))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).includes(R::polygon(R::array(1.2, 1.2), R::array(1.8, 1.2), R::array(1.8, 1.8), R::array(1.2, 1.8))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).polygon_sub(R::polygon(R::array(1.1, 1.1), R::array(1.9, 1.1), R::array(1.9, 1.9), R::array(1.1, 1.9))).includes(R::polygon(R::array(1.1, 1.1), R::array(2, 1.1), R::array(2, 2), R::array(1.1, 2))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::polygon(R::array(2, 1.1), R::array(3, 1.1), R::array(3, 1.9), R::array(2, 1.9))).run(*conn), (false));
    TEST_EQ(R::polygon(R::array(1, 1), R::array(2, 1), R::array(2, 2), R::array(1, 2)).includes(R::polygon(R::array(2, 2), R::array(3, 2), R::array(3, 3), R::array(2, 3))).run(*conn), (false));
    TEST_EQ(R::expr(R::array(R::polygon(R::array(0, 0), R::array(1, 1), R::array(1, 0)), R::polygon(R::array(0, 1), R::array(1, 2), R::array(1, 1)))).includes(R::point(0, 0)).count().run(*conn), (1));
    TEST_EQ(R::point(0, 0).includes(R::point(0, 0)).run(*conn), (err("RqlRuntimeError", "Expected geometry of type `Polygon` but found `Point`.")));
    TEST_EQ(R::line(R::array(0, 0), R::array(0, 1)).includes(R::point(0, 0)).run(*conn), (err("RqlRuntimeError", "Expected geometry of type `Polygon` but found `LineString`.")));
}
