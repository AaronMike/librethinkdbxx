// auto-generated by yaml_to_cxx.py from test/upstream/geo/geojson.yaml
#include "testlib.h"
void test_upstream_geo_geojson() {
    enter_section("test_upstream_geo_geojson: Test geoJSON conversion");
    TEST_EQ(R::geojson(R::object("coordinates", R::array(0, 0), "type", "Point")).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{0, 0}}, {"type","Point"}}));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(R::array(0, 0), R::array(0, 1)), "type", "LineString")).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{R::Array{0, 0}, R::Array{0, 1}}}, {"type","LineString"}}));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(R::array(R::array(0, 0), R::array(0, 1), R::array(1, 0), R::array(0, 0))), "type", "Polygon")).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{R::Array{R::Array{0, 0}, R::Array{0, 1}, R::Array{1, 0}, R::Array{0, 0}}}}, {"type","Polygon"}}));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(R::array(), 0), "type", "Point")).run(*conn), (err("RqlRuntimeError", "Expected type NUMBER but found ARRAY.", R::Array{0})));
    TEST_EQ(R::geojson(R::object("coordinates", true, "type", "Point")).run(*conn), (err("RqlRuntimeError", "Expected type ARRAY but found BOOL.", R::Array{0})));
    TEST_EQ(R::geojson(R::object("type", "Point")).run(*conn), (err("RqlRuntimeError", "No attribute `coordinates` in object.", R::Array{0})));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(0, 0))).run(*conn), (err("RqlRuntimeError", "No attribute `type` in object.", R::Array{0})));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(0, 0), "type", "foo")).run(*conn), (err("RqlRuntimeError", "Unrecognized GeoJSON type `foo`.", R::Array{0})));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(0, 0), "type", "Point", "foo", "wrong")).run(*conn), (err("RqlRuntimeError", "Unrecognized field `foo` found in geometry object.", R::Array{0})));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(0, 0), "type", "Point", "crs", R::Nil())).run(*conn), (R::Object{{"$reql_type$","GEOMETRY"}, {"coordinates",R::Array{0, 0}}, {"type","Point"}, {"crs",R::Nil()}}));
    TEST_EQ(R::geojson(R::object("coordinates", R::array(0, 0), "type", "MultiPoint")).run(*conn), (err("RqlRuntimeError", "GeoJSON type `MultiPoint` is not supported.", R::Array{0})));
}
