// auto-generated by yaml_to_cxx.py from test/upstream/regression/2774.yaml
#include "testlib.h"
void test_upstream_regression_2774() {
    enter_section("test_upstream_regression_2774: Tests key sorting of all usable types in secondary indexes");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto binary_a = (R::Binary("")));
    TEST_DO(auto binary_trunc1 = (R::Binary("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")));
    TEST_DO(auto binary_trunc2 = (R::Binary("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891")));
    TEST_DO(auto binary_b = (R::Binary("5aurhbviunr")));
    TEST_DO(auto str_trunc1 = (std::string("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", 120)));
    TEST_DO(auto str_trunc2 = (std::string("123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891", 120)));
    TEST_DO(auto trows = (R::array(R::object("id", 0, "idx", R::array(0)), R::object("id", 1, "idx", R::array(1, 2, 3, 4, 5, 6, 7, 0)), R::object("id", 2, "idx", R::array(1, 2, 3, 4, 5, 6, 7, 4)), R::object("id", 3, "idx", R::array(1, 2, 3, 4, 5, 6, 7, 4, 5)), R::object("id", 4, "idx", R::array(1, 2, 3, 4, 5, 6, 7, 8, 1)), R::object("id", 5, "idx", R::array(1, 3, binary_trunc1)), R::object("id", 6, "idx", R::array(1, 3, binary_trunc2)), R::object("id", 7, "idx", R::array(1, 3, R::epoch_time(0), R::epoch_time(0), R::epoch_time(0))), R::object("id", 8, "idx", R::array(1, 3, R::epoch_time(0), R::epoch_time(0), R::epoch_time(0), R::epoch_time(0))), R::object("id", 9, "idx", R::array(1, 3, R::epoch_time(0), R::epoch_time(0), R::epoch_time(0), R::epoch_time(1))), R::object("id", 10, "idx", R::array(1, 3, str_trunc1, str_trunc1)), R::object("id", 11, "idx", R::array(1, 3, str_trunc1, str_trunc2)), R::object("id", 12, "idx", R::array(1, 4, 3, 4, 5, 6, 7, 8, 2)), R::object("id", 13, "idx", R::array(binary_trunc1)), R::object("id", 14, "idx", R::array(binary_trunc2)), R::object("id", 15, "idx", false), R::object("id", 16, "idx", true), R::object("id", 17, "idx", -500), R::object("id", 18, "idx", 500), R::object("id", 19, "idx", binary_a), R::object("id", 20, "idx", binary_trunc1), R::object("id", 21, "idx", binary_trunc2), R::object("id", 22, "idx", binary_b), R::object("id", 23, "idx", R::epoch_time(0)), R::object("id", 24, "idx", ""), R::object("id", 25, "idx", " str"), R::object("id", 26, "idx", str_trunc1), R::object("id", 27, "idx", str_trunc2)).run(*conn)));
    TEST_DO(auto expected = (R::range(tbl.count()).coerce_to("array")));
    TEST_EQ(maybe_run(tbl.insert(trows)["inserted"], *conn), (28));
    TEST_EQ(maybe_run(tbl.index_create("idx"), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl.index_wait("idx").pluck("index", "ready"), *conn), (R::Array{R::Object{{"index", "idx"}, {"ready", true}}}));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("idx")}}).map(R::row["id"]).coerce_to("array").eq(expected), *conn), (true));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("idx")}}).between(R::minval, R::maxval).map(R::row["id"]).coerce_to("array").eq(expected), *conn), (true));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("idx")}}).between(R::array(1, 2, 3, 4, 5, 6, 7, 4), R::array(1, 2, 3, 4, 5, 6, 8)).map(R::row["id"]).coerce_to("array"), *conn), (R::Array{2, 3, 4}));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("idx")}}).between(R::array(1, 2, 3, 4, 5, 6, 7, 4, R::minval), R::array(1, 2, 3, 4, 5, 6, 7, 4, R::maxval)).map(R::row["id"]).coerce_to("array"), *conn), (R::Array{3}));
    exit_section();
}
