// auto-generated by yaml_to_cxx.py from test/upstream/regression/469.yaml
#include "testlib.h"
void test_upstream_regression_469() {
    enter_section("test_upstream_regression_469: Issue");
    TEST_EQ(R::db_create("d469").run(*conn), (partial(R::Object{{"dbs_created",1}})));
    TEST_EQ(R::db("d469").table_create("t469").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(R::db("d469").table("t469").index_create("x").run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(R::db("d469").table("t469").index_wait("x").pluck("index", "ready").run(*conn), (R::Array{R::Object{{"ready",true}, {"index","x"}}}));
    TEST_EQ(R::expr(R::Nil()).info().run(*conn), (R::Object{{"type","NULL"}, {"value","null"}}));
    TEST_EQ(R::expr(true).info().run(*conn), (R::Object{{"type","BOOL"}, {"value","true"}}));
    TEST_EQ(R::expr(1).info().run(*conn), (R::Object{{"type","NUMBER"}, {"value","1"}}));
    TEST_EQ(R::expr("1").info().run(*conn), (R::Object{{"type","STRING"}, {"value","\"1\""}}));
    TEST_EQ(R::expr(R::array(1)).info().run(*conn), (R::Object{{"type","ARRAY"}, {"value","[1]"}}));
    TEST_EQ(R::expr(R::object("a", 1)).info().run(*conn), (R::Object{{"type","OBJECT"}, {"value","{\n	\"a\":	1\n}"}}));
    TEST_EQ(R::db("d469").info().run(*conn), (partial(R::Object{{"type","DB"}, {"name","d469"}})));
    TEST_EQ(R::db("d469").table("t469").info().run(*conn), (R::Object{{"type","TABLE"}, {"name","t469"}, {"id",uuid()}, {"db",R::Object{{"type","DB"}, {"name","d469"}, {"id",uuid()}}}, {"primary_key","id"}, {"indexes",R::Array{"x"}}, {"doc_count_estimates",R::Array{0}}}));
    TEST_EQ(R::db("d469").table("t469").filter([=](R::Var x){ return R::expr(true); }).info().run(*conn), (R::Object{{"type","SELECTION<STREAM>"}, {"table",R::Object{{"type","TABLE"}, {"name","t469"}, {"id",uuid()}, {"db",R::Object{{"type","DB"}, {"name","d469"}, {"id",uuid()}}}, {"primary_key","id"}, {"indexes",R::Array{"x"}}, {"doc_count_estimates",R::Array{0}}}}}));
    TEST_EQ(R::db("d469").table("t469").map([=](R::Var x){ return R::expr(1); }).info().run(*conn), (R::Object{{"type","STREAM"}}));
    TEST_EQ(R::db_drop("d469").run(*conn), (partial(R::Object{{"dbs_dropped",1}})));
    exit_section();
}
