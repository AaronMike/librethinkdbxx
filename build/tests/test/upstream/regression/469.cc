// auto-generated by yaml_to_cxx.py from test/upstream/regression/469.yaml
#include "testlib.h"
void test_upstream_regression_469() {
    enter_section("test_upstream_regression_469: Issue #469: add pkey term");
    TEST_EQ(maybe_run(R::db_create("d469"), *conn), (partial(R::Object{{"dbs_created", 1}})));
    TEST_EQ(maybe_run(R::db("d469").table_create("t469"), *conn), (partial(R::Object{{"tables_created", 1}})));
    TEST_EQ(maybe_run(R::db("d469").table("t469").index_create("x"), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").index_wait("x").pluck("index", "ready"), *conn), (R::Array{R::Object{{"ready", true}, {"index", "x"}}}));
    TEST_EQ(maybe_run(R::minval.info(), *conn), (R::Object{{"type", "MINVAL"}}));
    TEST_EQ(maybe_run(R::maxval.info(), *conn), (R::Object{{"type", "MAXVAL"}}));
    TEST_EQ(maybe_run(R::expr(R::Nil()).info(), *conn), (R::Object{{"type", "NULL"}}));
    TEST_EQ(maybe_run(R::expr(true).info(), *conn), (R::Object{{"type", "BOOL"}, {"value", "true"}}));
    TEST_EQ(maybe_run(R::expr(1).info(), *conn), (R::Object{{"type", "NUMBER"}, {"value", "1"}}));
    TEST_EQ(maybe_run(R::expr("1").info(), *conn), (R::Object{{"type", "STRING"}, {"value", "\"1\""}}));
    TEST_EQ(maybe_run(R::expr(R::array(1)).info(), *conn), (R::Object{{"type", "ARRAY"}, {"value", "[\x0a\x09\x31\x0a]"}}));
    TEST_EQ(maybe_run(R::expr(R::object("a", 1)).info(), *conn), (R::Object{{"type", "OBJECT"}, {"value", "{\x0a\x09\"a\":\x09\x31\x0a}"}}));
    TEST_EQ(maybe_run(R::db("d469").info(), *conn), (partial(R::Object{{"type", "DB"}, {"name", "d469"}})));
    TEST_EQ(maybe_run(R::db("d469").table("t469").info(), *conn), (R::Object{{"type", "TABLE"}, {"name", "t469"}, {"id", uuid()}, {"db", R::Object{{"type", "DB"}, {"name", "d469"}, {"id", uuid()}}}, {"primary_key", "id"}, {"indexes", R::Array{"x"}}, {"doc_count_estimates", R::Array{0}}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").filter([=](R::Var x){ return R::expr(true); }).info(), *conn), (R::Object{{"type", "SELECTION<STREAM>"}, {"table", R::Object{{"type", "TABLE"}, {"name", "t469"}, {"id", uuid()}, {"db", R::Object{{"type", "DB"}, {"name", "d469"}, {"id", uuid()}}}, {"primary_key", "id"}, {"indexes", R::Array{"x"}}, {"doc_count_estimates", R::Array{0}}}}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").map([=](R::Var x){ return R::expr(1); }).info(), *conn), (R::Object{{"type", "STREAM"}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").between(0, 1).info(), *conn), (R::Object{{"index", "id"}, {"left_bound", 0}, {"left_bound_type", "closed"}, {"right_bound", 1}, {"right_bound_type", "open"}, {"sorting", "UNORDERED"}, {"table", R::Object{{"db", R::Object{{"id", uuid()}, {"name", "d469"}, {"type", "DB"}}}, {"doc_count_estimates", R::Array{0}}, {"id", uuid()}, {"indexes", R::Array{"x"}}, {"name", "t469"}, {"primary_key", "id"}, {"type", "TABLE"}}}, {"type", "TABLE_SLICE"}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").between(0, 1, R::OptArgs{{"index", R::expr("a")}}).info(), *conn), (R::Object{{"index", "a"}, {"left_bound", 0}, {"left_bound_type", "closed"}, {"right_bound", 1}, {"right_bound_type", "open"}, {"sorting", "UNORDERED"}, {"table", R::Object{{"db", R::Object{{"id", uuid()}, {"name", "d469"}, {"type", "DB"}}}, {"doc_count_estimates", R::Array{0}}, {"id", uuid()}, {"indexes", R::Array{"x"}}, {"name", "t469"}, {"primary_key", "id"}, {"type", "TABLE"}}}, {"type", "TABLE_SLICE"}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").order_by(R::OptArgs{{"index", R::expr("a")}}).between(0, 1, R::OptArgs{{"index", R::expr("a")}}).info(), *conn), (R::Object{{"index", "a"}, {"left_bound", 0}, {"left_bound_type", "closed"}, {"right_bound", 1}, {"right_bound_type", "open"}, {"sorting", "ASCENDING"}, {"table", R::Object{{"db", R::Object{{"id", uuid()}, {"name", "d469"}, {"type", "DB"}}}, {"doc_count_estimates", R::Array{0}}, {"id", uuid()}, {"indexes", R::Array{"x"}}, {"name", "t469"}, {"primary_key", "id"}, {"type", "TABLE"}}}, {"type", "TABLE_SLICE"}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").between(R::minval, R::maxval).info(), *conn), (R::Object{{"index", "id"}, {"left_bound_type", "unbounded"}, {"right_bound_type", "unbounded"}, {"sorting", "UNORDERED"}, {"table", R::Object{{"db", R::Object{{"id", uuid()}, {"name", "d469"}, {"type", "DB"}}}, {"doc_count_estimates", R::Array{0}}, {"id", uuid()}, {"indexes", R::Array{"x"}}, {"name", "t469"}, {"primary_key", "id"}, {"type", "TABLE"}}}, {"type", "TABLE_SLICE"}}));
    TEST_EQ(maybe_run(R::db("d469").table("t469").between(R::maxval, R::minval).info(), *conn), (R::Object{{"index", "id"}, {"left_bound_type", "unachievable"}, {"right_bound_type", "unachievable"}, {"sorting", "UNORDERED"}, {"table", R::Object{{"db", R::Object{{"id", uuid()}, {"name", "d469"}, {"type", "DB"}}}, {"doc_count_estimates", R::Array{0}}, {"id", uuid()}, {"indexes", R::Array{"x"}}, {"name", "t469"}, {"primary_key", "id"}, {"type", "TABLE"}}}, {"type", "TABLE_SLICE"}}));
    TEST_EQ(maybe_run(R::db_drop("d469"), *conn), (partial(R::Object{{"dbs_dropped", 1}})));
    exit_section();
}
