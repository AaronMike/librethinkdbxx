// auto-generated by yaml_to_cxx.py from test/upstream/regression/1023.yaml
#include "testlib.h"
void test_upstream_regression_1023() {
    enter_section("test_upstream_regression_1023: Tests key sorting of all usable types in primary indexes");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto binary_a = (R::Binary("")));
    TEST_DO(auto binary_b = (R::Binary("5aurhbviunr")));
    TEST_DO(auto trows = (R::array(R::object("num", 0, "id", R::array(0)), R::object("num", 1, "id", R::array(1, 2, 3, 4, 0)), R::object("num", 2, "id", R::array(1, 2, 3, 4, 4)), R::object("num", 3, "id", R::array(1, 2, 3, 4, 4, 5)), R::object("num", 4, "id", R::array(1, 2, 3, 4, 8, 1)), R::object("num", 5, "id", R::array(1, 3, R::epoch_time(0))), R::object("num", 6, "id", R::array(1, 3, R::epoch_time(0), R::epoch_time(0))), R::object("num", 7, "id", R::array(1, 3, R::epoch_time(0), R::epoch_time(1))), R::object("num", 8, "id", R::array(1, 4, 3, 4, 8, 2)), R::object("num", 9, "id", false), R::object("num", 10, "id", true), R::object("num", 11, "id", -500), R::object("num", 12, "id", 500), R::object("num", 13, "id", binary_a), R::object("num", 14, "id", binary_b), R::object("num", 15, "id", R::epoch_time(0)), R::object("num", 16, "id", ""), R::object("num", 17, "id", " str")).run(*conn)));
    TEST_DO(auto expected = (R::range(tbl.count()).coerce_to("array")));
    TEST_EQ(maybe_run(tbl.insert(trows)["inserted"], *conn), (18));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).map(R::row["num"]).coerce_to("array").eq(expected), *conn), (true));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).between(R::minval, R::maxval).map(R::row["num"]).coerce_to("array").eq(expected), *conn), (true));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).between(R::array(1, 2, 3, 4, 4), R::array(1, 2, 3, 5)).map(R::row["num"]).coerce_to("array"), *conn), (R::Array{2, 3, 4}));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).between(R::array(1, 2, 3, 4, 4, R::minval), R::array(1, 2, 3, 4, 4, R::maxval)).map(R::row["num"]).coerce_to("array"), *conn), (R::Array{3}));
    exit_section();
}
