// auto-generated by yaml_to_cxx.py from test/upstream/regression/1023.yaml
#include "testlib.h"
void test_upstream_regression_1023() {
    enter_section("test_upstream_regression_1023: Tests key sorting of all usable types in primary indexes");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    auto binary_a = R::binary("");
    auto binary_b = R::binary("5aurhbviunr");
    auto trows = R::Array{R::Object{{"num",0}, {"id",R::Array{0}}}, R::Object{{"num",1}, {"id",R::Array{1, 2, 3, 4, 0}}}, R::Object{{"num",2}, {"id",R::Array{1, 2, 3, 4, 4}}}, R::Object{{"num",3}, {"id",R::Array{1, 2, 3, 4, 4, 5}}}, R::Object{{"num",4}, {"id",R::Array{1, 2, 3, 4, 8, 1}}}, R::Object{{"num",5}, {"id",R::Array{1, 3, R::epoch_time(0)}}}, R::Object{{"num",6}, {"id",R::Array{1, 3, R::epoch_time(0), R::epoch_time(0)}}}, R::Object{{"num",7}, {"id",R::Array{1, 3, R::epoch_time(0), R::epoch_time(1)}}}, R::Object{{"num",8}, {"id",R::Array{1, 4, 3, 4, 8, 2}}}, R::Object{{"num",9}, {"id",false}}, R::Object{{"num",10}, {"id",true}}, R::Object{{"num",11}, {"id",-500}}, R::Object{{"num",12}, {"id",500}}, R::Object{{"num",13}, {"id",binary_a}}, R::Object{{"num",14}, {"id",binary_b}}, R::Object{{"num",15}, {"id",R::epoch_time(0)}}, R::Object{{"num",16}, {"id",""}}, R::Object{{"num",17}, {"id"," str"}}};
    auto expected = R::range(tbl.count()).coerce_to("array");
    TEST_EQ(tbl.insert(trows)["inserted"].run(*conn), (18));
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).map(R::row["num"]).coerce_to("array").eq(expected).run(*conn), (true));
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).between(R::minval, R::maxval).map(R::row["num"]).coerce_to("array").eq(expected).run(*conn), (true));
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).between(R::array(1, 2, 3, 4, 4), R::array(1, 2, 3, 5)).map(R::row["num"]).coerce_to("array").run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).between(R::array(1, 2, 3, 4, 4, R::minval), R::array(1, 2, 3, 4, 4, R::maxval)).map(R::row["num"]).coerce_to("array").run(*conn), (R::Array{3}));
}
