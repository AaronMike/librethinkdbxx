// auto-generated by yaml_to_cxx.py from test/upstream/regression/5222.py.yaml
#include "testlib.h"
void test_upstream_regression_5222() {
    enter_section("test_upstream_regression_5222: Can't store r.minval or r.maxval in a secondary index, even when they're in an array.");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(maybe_run(tbl.index_create("min", [=](R::Var x){ return R::minval; }), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl.index_create("max", [=](R::Var x){ return R::maxval; }), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl.index_create("min_arr", [=](R::Var x){ return R::array(R::minval); }), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl.index_create("max_arr", [=](R::Var x){ return R::array(R::maxval); }), *conn), (R::Object{{"created", 1}}));
    TEST_DO(maybe_run(tbl.index_wait("min", "max", "min_arr", "max_arr"), *conn));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 1)), *conn), (partial(R::Object{{"inserted", 1}})));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("min")}}).count(), *conn), (0));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("max")}}).count(), *conn), (0));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("min_arr")}}).count(), *conn), (0));
    TEST_EQ(maybe_run(tbl.order_by(R::OptArgs{{"index", R::expr("max_arr")}}).count(), *conn), (0));
    exit_section();
}
