// auto-generated by yaml_to_cxx.py from test/upstream/mutation/update.yaml
#include "testlib.h"
void test_upstream_mutation_update() {
    enter_section("test_upstream_mutation_update: Tests updates of selections");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(R::db("test").table_create("test2").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_DO(auto tbl2 = (R::db("test").table("test2")));
    TEST_EQ(tbl.insert(R::range(100).map([=](R::Var i){ return R::object("id", *i); })).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",100}}));
    TEST_EQ(tbl.count().run(*conn), (100));
    TEST_EQ(tbl2.insert(R::range(100).map([=](R::Var i){ return R::object("id", *i, "foo", R::object("bar", *i)); })).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",100}}));
    TEST_EQ(tbl2.count().run(*conn), (100));
    TEST_EQ(tbl.get(12).update([=](R::Var row){ return *row; }).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",1}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(12).update([=](R::Var row){ return R::object("a", (*row)["id"] + 1); }, R::OptArgs{{"durability", R::expr("soft")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(12).run(*conn), (R::Object{{"id",12}, {"a",13}}));
    TEST_EQ(tbl.get(12).update([=](R::Var row){ return R::object("a", (*row)["id"] + 2); }, R::OptArgs{{"durability", R::expr("hard")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(12).run(*conn), (R::Object{{"id",12}, {"a",14}}));
    TEST_EQ(tbl.get(12).update([=](R::Var row){ return R::object("a", (*row)["id"] + 3); }, R::OptArgs{{"durability", R::expr("wrong")}}).run(*conn), (err("RqlRuntimeError", "Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").", R::Array{0})));
    TEST_EQ(tbl.get(12).run(*conn), (R::Object{{"id",12}, {"a",14}}));
    TEST_EQ(tbl.get(12).update([=](R::Var row){ return R::object("a", (*row)["id"]); }).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(12).run(*conn), (R::Object{{"id",12}, {"a",12}}));
    TEST_EQ(tbl.get(12).update(R::object("a", R::literal())).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.between(10, 20).update([=](R::Var row){ return R::object("a", (*row)["id"]); }).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",10}, {"unchanged",0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.filter([=](R::Var row){ return (*row)["id"]>=10 && (*row)["id"]<20; }).update([=](R::Var row){ return R::object("a", (*row)["id"]); }).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",10}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.filter([=](R::Var row){ return (*row)["id"]>=10 && (*row)["id"]<20; }).update([=](R::Var row){ return R::object("b", (*row)["id"]); }).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",10}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.between(10, 20).update(R::object("a", R::literal())).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",10}, {"unchanged",0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(1).update(R::object("id", 2, "d", 1)).run(*conn), (R::Object{{"first_error","Primary key `id` cannot be changed (`{\n	\"id\":	1\n}` -> `{\n	\"d\":	1,\n	\"id\":	2\n}`)."}, {"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",1}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(1).update(R::object("id", R::row["id"], "d", "b")).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(1).update(R::row.merge(R::object("d", "b"))).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",1}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(1).update(R::object("d", R::js("5"))).run(*conn), (err("RqlRuntimeError", "Could not prove function deterministic.  Maybe you want to use the non_atomic flag?", R::Array{0})));
    TEST_EQ(tbl.get(1).update(R::object("d", tbl.nth(0))).run(*conn), (err("RqlRuntimeError", "Could not prove function deterministic.  Maybe you want to use the non_atomic flag?", R::Array{0})));
    TEST_EQ(tbl.get(1).update(R::object("d", R::js("5")), R::OptArgs{{"non_atomic", R::expr(true)}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.update([=](R::Var row){ return R::object("a", (*row)["id"]); }).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",100}, {"unchanged",0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.update(R::object("a", R::literal())).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",100}, {"unchanged",0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl2.update(R::object("foo", R::object("bar", 2))).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",99}, {"unchanged",1}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl2.update(R::object("foo", R::literal(R::object("bar", 2)))).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0}, {"unchanged",100}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl2.order_by("id").nth(0).run(*conn), (R::Object{{"id",0}, {"foo",R::Object{{"bar",2}}}}));
    TEST_EQ(tbl2.update(R::object("foo", R::object("buzz", 2))).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",100}, {"unchanged",0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl2.order_by("id").nth(0).run(*conn), (R::Object{{"id",0}, {"foo",R::Object{{"bar",2}, {"buzz",2}}}}));
    TEST_EQ(tbl2.update(R::object("foo", R::literal(1))).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",100}, {"unchanged",0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl2.order_by("id").nth(0).run(*conn), (R::Object{{"id",0}, {"foo",1}}));
    TEST_EQ(R::db("test").table_drop("test2").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    exit_section();
}
