// auto-generated by yaml_to_cxx.py from test/upstream/mutation/insert.yaml
#include "testlib.h"
void test_upstream_mutation_insert() {
    enter_section("test_upstream_mutation_insert: Tests insertion into tables");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(R::db("test").table_create("test2").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_DO(auto tbl2 = (R::db("test").table("test2")));
    TEST_EQ(tbl.insert(R::object("id", 0, "a", 0)).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl.count().run(*conn), (1));
    TEST_EQ(tbl.insert(R::object("id", 1, "a", 1), R::OptArgs{{"durability", R::expr("hard")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl.count().run(*conn), (2));
    TEST_EQ(tbl.insert(R::object("id", 2, "a", 2), R::OptArgs{{"durability", R::expr("soft")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl.count().run(*conn), (3));
    TEST_EQ(tbl.insert(R::object("id", 3, "a", 3), R::OptArgs{{"durability", R::expr("wrong")}}).run(*conn), (err("RqlRuntimeError", "Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").", R::Array{0})));
    TEST_EQ(tbl.count().run(*conn), (3));
    TEST_EQ(tbl.get(2).delete_().run(*conn), (R::Object{{"deleted",1}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.insert(R::array(R::object("id", 2, "a", 2), R::object("id", 3, "a", 3))).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",2}}));
    TEST_EQ(tbl2.insert(tbl).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",4}}));
    TEST_EQ(tbl.insert(R::object("id", 2, "b", 20)).run(*conn), (R::Object{{"first_error","Duplicate primary key `id`:\n{\n	\"a\":	2,\n	\"id\":	2\n}\n{\n	\"b\":	20,\n	\"id\":	2\n}"}, {"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",1}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.insert(R::object("id", 2, "b", 20), R::OptArgs{{"conflict", R::expr("error")}}).run(*conn), (R::Object{{"first_error","Duplicate primary key `id`:\n{\n	\"a\":	2,\n	\"id\":	2\n}\n{\n	\"b\":	20,\n	\"id\":	2\n}"}, {"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",1}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.insert(R::object("id", 15, "b", 20), R::OptArgs{{"conflict", R::expr("error")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl.get(15).run(*conn), (R::Object{{"id",15}, {"b",20}}));
    TEST_EQ(tbl.insert(R::object("id", 2, "b", 20), R::OptArgs{{"conflict", R::expr("replace")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(2).run(*conn), (R::Object{{"id",2}, {"b",20}}));
    TEST_EQ(tbl.insert(R::object("id", 20, "b", 20), R::OptArgs{{"conflict", R::expr("replace")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl.get(20).run(*conn), (R::Object{{"id",20}, {"b",20}}));
    TEST_EQ(tbl.insert(R::object("id", 2, "c", 30), R::OptArgs{{"conflict", R::expr("update")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",1}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.get(2).run(*conn), (R::Object{{"id",2}, {"b",20}, {"c",30}}));
    TEST_EQ(tbl.insert(R::object("id", 30, "b", 20), R::OptArgs{{"conflict", R::expr("update")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl.get(30).run(*conn), (R::Object{{"id",30}, {"b",20}}));
    TEST_EQ(tbl.insert(R::object("id", 3, "a", 3), R::OptArgs{{"conflict", R::expr("wrong")}}).run(*conn), (err("RqlRuntimeError", "Conflict option `wrong` unrecognized (options are \"error\", \"replace\" and \"update\").", R::Array{0})));
    TEST_DO(auto tblpkey = (R::db("test").table("testpkey")));
    TEST_EQ(tblpkey.insert(R::object()).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"generated_keys",arrlen(1, uuid())}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tblpkey.run(*conn), (R::Array{R::Object{{"foo",uuid()}}}));
    TEST_EQ(tblpkey.insert(R::object("b", 20), R::OptArgs{{"conflict", R::expr("replace")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"generated_keys",arrlen(1, uuid())}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tblpkey.insert(R::object("b", 20), R::OptArgs{{"conflict", R::expr("update")}}).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"generated_keys",arrlen(1, uuid())}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(R::db("test").table_drop("testpkey").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(tbl.for_each([=](R::Var row){ return tbl2.insert((*row).merge(R::object("id", (*row)["id"] + 100))); }).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",7}}));
    TEST_EQ(tbl.insert(R::object("value", R::minval)).run(*conn), (partial(R::Object{{"errors",1}, {"first_error","`r.minval` and `r.maxval` cannot be written to disk."}})));
    TEST_EQ(tbl.insert(R::object("value", R::maxval)).run(*conn), (partial(R::Object{{"errors",1}, {"first_error","`r.minval` and `r.maxval` cannot be written to disk."}})));
    TEST_EQ(R::minval.run(*conn), (err("RqlRuntimeError", "Cannot convert `r.minval` to JSON.")));
    TEST_EQ(R::maxval.run(*conn), (err("RqlRuntimeError", "Cannot convert `r.maxval` to JSON.")));
    TEST_EQ(R::db("test").table_drop("test2").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    exit_section();
}
