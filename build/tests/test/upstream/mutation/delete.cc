// auto-generated by yaml_to_cxx.py from test/upstream/mutation/delete.yaml
#include "testlib.h"
void test_upstream_mutation_delete() {
    enter_section("test_upstream_mutation_delete: Tests deletes of selections");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(maybe_run(tbl.insert(R::range(100).map([=](R::Var i){ return R::object("id", *i); })), *conn), (R::Object{{"deleted", 0}, {"replaced", 0}, {"unchanged", 0}, {"errors", 0}, {"skipped", 0}, {"inserted", 100}}));
    TEST_EQ(maybe_run(tbl.count(), *conn), (100));
    TEST_EQ(maybe_run(tbl.get(12).delete_(), *conn), (R::Object{{"deleted", 1}, {"replaced", 0}, {"unchanged", 0}, {"errors", 0}, {"skipped", 0}, {"inserted", 0}}));
    TEST_EQ(maybe_run(tbl.skip(50).delete_(R::OptArgs{{"durability", R::expr("wrong")}}), *conn), (err("ReqlQueryLogicError", "Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").", R::Array{0})));
    TEST_EQ(maybe_run(tbl.skip(50).delete_(R::OptArgs{{"durability", R::expr("soft")}}), *conn), (R::Object{{"deleted", 49}, {"replaced", 0}, {"unchanged", 0}, {"errors", 0}, {"skipped", 0}, {"inserted", 0}}));
    TEST_EQ(maybe_run(tbl.delete_(R::OptArgs{{"durability", R::expr("hard")}}), *conn), (R::Object{{"deleted", 50}, {"replaced", 0}, {"unchanged", 0}, {"errors", 0}, {"skipped", 0}, {"inserted", 0}}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).delete_(), *conn), (err("ReqlQueryLogicError", "Expected type SELECTION but found DATUM:", R::Array{0})));
    exit_section();
}
