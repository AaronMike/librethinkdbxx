// auto-generated by yaml_to_cxx.py from test/upstream/mutation/delete.yaml
#include "testlib.h"
void test_upstream_mutation_delete() {
    enter_section("test_upstream_mutation_delete: Tests deletes of selections");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(tbl.insert(R::range(100).map([=](R::Var i){ return R::object("id", *i); })).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",100}}));
    TEST_EQ(tbl.count().run(*conn), (100));
    TEST_EQ(tbl.get(12).delete_().run(*conn), (R::Object{{"deleted",1}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.skip(50).delete_(R::OptArgs{{"durability", R::expr("wrong")}}).run(*conn), (err("RqlRuntimeError", "Durability option `wrong` unrecognized (options are \"hard\" and \"soft\").", R::Array{0})));
    TEST_EQ(tbl.skip(50).delete_(R::OptArgs{{"durability", R::expr("soft")}}).run(*conn), (R::Object{{"deleted",49}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(tbl.delete_(R::OptArgs{{"durability", R::expr("hard")}}).run(*conn), (R::Object{{"deleted",50}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",0.0}}));
    TEST_EQ(R::expr(R::array(1, 2)).delete_().run(*conn), (err("RqlRuntimeError", "Expected type SELECTION but found DATUM.", R::Array{0})));
    exit_section();
}
