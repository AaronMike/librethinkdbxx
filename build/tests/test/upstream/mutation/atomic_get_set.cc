// auto-generated by yaml_to_cxx.py from test/upstream/mutation/atomic_get_set.yaml
#include "testlib.h"
void test_upstream_mutation_atomic_get_set() {
    enter_section("test_upstream_mutation_atomic_get_set: Tests replacement of selections");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 0), R::OptArgs{{"return_vals", R::expr(true)}}).pluck("changes", "first_error"), *conn), (err("ReqlQueryLogicError", "Error: encountered obsolete optarg `return_vals`.  Use `return_changes` instead.", R::Array{0})));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 0), R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 0}}}}}}}));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 0), R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{}}, {"first_error", "Duplicate primary key `id`:\x0a{\x0a\x09\"id\":\x09\x30\x0a}\x0a{\x0a\x09\"id\":\x09\x30\x0a}"}}));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 0), R::OptArgs{{"return_changes", R::expr("always")}}).pluck("changes", "first_error"), *conn), (R::Object{{"first_error", "Duplicate primary key `id`:\x0a{\x0a\x09\"id\":\x09\x30\x0a}\x0a{\x0a\x09\"id\":\x09\x30\x0a}"}, {"changes", R::Array{R::Object{{"old_val", R::Object{{"id", 0}}}, {"new_val", R::Object{{"id", 0}}}, {"error", "Duplicate primary key `id`:\x0a{\x0a\x09\"id\":\x09\x30\x0a}\x0a{\x0a\x09\"id\":\x09\x30\x0a}"}}}}}));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 1)), R::OptArgs{{"return_changes", R::expr(true)}}), *conn), (R::Object{{"changes", R::Array{R::Object{{"new_val", R::Object{{"id", 1}}}, {"old_val", R::Nil()}}}}, {"errors", 0}, {"deleted", 0}, {"unchanged", 0}, {"skipped", 0}, {"replaced", 0}, {"inserted", 1}}));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 0)), R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{}}, {"first_error", "Duplicate primary key `id`:\x0a{\x0a\x09\"id\":\x09\x30\x0a}\x0a{\x0a\x09\"id\":\x09\x30\x0a}"}}));
    TEST_EQ(maybe_run(tbl.get(0).update(R::object("x", 1), R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{R::Object{{"old_val", R::Object{{"id", 0}}}, {"new_val", R::Object{{"id", 0}, {"x", 1}}}}}}}));
    TEST_EQ(maybe_run(tbl.get(0).update(R::object("x", R::error("a")), R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{}}, {"first_error", "a"}}));
    TEST_EQ(maybe_run(tbl.update(R::object("x", 3), R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error").do_([=](R::Var d){ return (*d).merge(R::object("changes", (*d)["changes"].order_by([=](R::Var a){ return (*a)["old_val"]["id"]; }))); }), *conn), (R::Object{{"changes", R::Array{R::Object{{"old_val", R::Object{{"id", 0}, {"x", 1}}}, {"new_val", R::Object{{"id", 0}, {"x", 3}}}}, R::Object{{"old_val", R::Object{{"id", 1}}}, {"new_val", R::Object{{"id", 1}, {"x", 3}}}}}}}));
    TEST_EQ(maybe_run(tbl.get(0).replace(R::object("id", 0, "x", 2), R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{R::Object{{"old_val", R::Object{{"id", 0}, {"x", 3}}}, {"new_val", R::Object{{"id", 0}, {"x", 2}}}}}}}));
    TEST_EQ(maybe_run(tbl.get(0).replace([=](R::Var y){ return R::object("x", R::error("a")); }, R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{}}, {"first_error", "a"}}));
    TEST_EQ(maybe_run(tbl.get(0).replace([=](R::Var y){ return R::object("x", R::error("a")); }, R::OptArgs{{"return_changes", R::expr("always")}}).pluck("changes", "first_error"), *conn), (R::Object{{"first_error", "a"}, {"changes", R::Array{R::Object{{"old_val", R::Object{{"id", 0}, {"x", 2}}}, {"new_val", R::Object{{"id", 0}, {"x", 2}}}, {"error", "a"}}}}}));
    TEST_EQ(maybe_run(tbl.replace([=](R::Var y){ return (*y).without("x"); }, R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error").do_([=](R::Var d){ return (*d).merge(R::object("changes", (*d)["changes"].order_by([=](R::Var a){ return (*a)["old_val"]["id"]; }))); }), *conn), (R::Object{{"changes", R::Array{R::Object{{"new_val", R::Object{{"id", 0}}}, {"old_val", R::Object{{"id", 0}, {"x", 2}}}}, R::Object{{"new_val", R::Object{{"id", 1}}}, {"old_val", R::Object{{"id", 1}, {"x", 3}}}}}}}));
    TEST_EQ(maybe_run(tbl.replace(R::object("x", 1), R::OptArgs{{"return_changes", R::expr("always")}}).pluck("changes", "first_error").do_([=](R::Var d){ return (*d).merge(R::object("changes", (*d)["changes"].order_by([=](R::Var a){ return (*a)["old_val"]["id"]; }))); }), *conn), (R::Object{{"first_error", "Inserted object must have primary key `id`:\x0a{\x0a\x09\"x\":\x09\x31\x0a}"}, {"changes", R::Array{R::Object{{"new_val", R::Object{{"id", 0}}}, {"old_val", R::Object{{"id", 0}}}, {"error", "Inserted object must have primary key `id`:\x0a{\x0a\x09\"x\":\x09\x31\x0a}"}}, R::Object{{"new_val", R::Object{{"id", 1}}}, {"old_val", R::Object{{"id", 1}}}, {"error", "Inserted object must have primary key `id`:\x0a{\x0a\x09\"x\":\x09\x31\x0a}"}}}}}));
    TEST_EQ(maybe_run(tbl.get(0).delete_(R::OptArgs{{"return_changes", R::expr(true)}}).pluck("changes", "first_error"), *conn), (R::Object{{"changes", R::Array{R::Object{{"old_val", R::Object{{"id", 0}}}, {"new_val", R::Nil()}}}}}));
    TEST_EQ(maybe_run(tbl.delete_(R::OptArgs{{"return_changes", R::expr(true)}}), *conn), (R::Object{{"deleted", 1}, {"errors", 0}, {"inserted", 0}, {"replaced", 0}, {"skipped", 0}, {"unchanged", 0}, {"changes", R::Array{R::Object{{"new_val", R::Nil()}, {"old_val", R::Object{{"id", 1}}}}}}}));
    exit_section();
}
