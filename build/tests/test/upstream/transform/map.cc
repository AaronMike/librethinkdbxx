// auto-generated by yaml_to_cxx.py from test/upstream/transform/map.yaml
#include "testlib.h"
void test_upstream_transform_map() {
    enter_section("test_upstream_transform_map: Tests the RQL `map` function");
    TEST_EQ(R::range().map(R::range(), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).type_of().run(*conn), ("STREAM"));
    TEST_EQ(R::range().map(R::expr(R::array()), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).type_of().run(*conn), ("STREAM"));
    TEST_EQ(R::expr(R::array()).map(R::expr(R::array()), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).type_of().run(*conn), ("ARRAY"));
    TEST_EQ(R::range(3).map([=](){ return R::expr(0); }).run(*conn), (R::Array{0, 0, 0}));
    TEST_EQ(R::range(3).map(R::range(4), [=](){ return R::expr(0); }).run(*conn), (R::Array{0, 0, 0}));
    TEST_EQ(R::expr(R::array(1)).map([=](R::Var x){ return R::array(*x); }).run(*conn), (R::Array{R::Array{1}}));
    TEST_EQ(R::expr(R::array(1)).map(R::expr(R::array(1)), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (R::Array{R::Array{1, 1}}));
    TEST_EQ(R::expr(R::array(1)).map(R::expr(R::array(1)), R::expr(R::array(1)), [=](R::Var x, R::Var y, R::Var z){ return R::array(*x, *y, *z); }).run(*conn), (R::Array{R::Array{1, 1, 1}}));
    TEST_EQ(R::expr(R::array(1)).map([=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (err("RqlRuntimeError", "The function passed to `map` expects 2 arguments, but 1 sequence was found.", R::Array{})));
    TEST_EQ(R::expr(R::array(1)).map(R::expr(R::array(1)), [=](R::Var x){ return R::array(*x); }).run(*conn), (err("RqlRuntimeError", "The function passed to `map` expects 1 argument, but 2 sequences were found.", R::Array{})));
    TEST_EQ(R::range().map(R::expr(R::array()), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (R::Array{}));
    TEST_EQ(R::expr(R::array(1, 2)).map(R::expr(R::array(1, 2, 3, 4)), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (R::Array{R::Array{1, 1}, R::Array{2, 2}}));
    TEST_EQ(R::range(2).map(R::range(4), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (R::Array{R::Array{0, 0}, R::Array{1, 1}}));
    TEST_EQ(R::range().map(R::expr(R::array(1, 2, 3, 4)), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (R::Array{R::Array{0, 1}, R::Array{1, 2}, R::Array{2, 3}, R::Array{3, 4}}));
    TEST_EQ(R::range(3).map(R::range(5), R::js("(function(x, y){return [x, y];})")).run(*conn), (R::Array{R::Array{0, 0}, R::Array{1, 1}, R::Array{2, 2}}));
    TEST_EQ(R::range().map(R::expr(1), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (err("RqlRuntimeError", "Cannot convert NUMBER to SEQUENCE", R::Array{})));
    TEST_EQ(R::range().map(R::range(), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).count().run(*conn), (err("RqlRuntimeError", "Cannot use an infinite stream with an aggregation function (`reduce`, `count`, etc.) or coerce it to an array.", R::Array{})));
    TEST_EQ(R::map(R::range(3), [=](R::Var x){ return R::array(*x); }).run(*conn), (R::Array{R::Array{0}, R::Array{1}, R::Array{2}}));
    TEST_EQ(R::map(R::range(3), R::row + 1).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(R::map(R::range(3), R::range(5), [=](R::Var x, R::Var y){ return R::array(*x, *y); }).run(*conn), (R::Array{R::Array{0, 0}, R::Array{1, 1}, R::Array{2, 2}}));
    exit_section();
}
