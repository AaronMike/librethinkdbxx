// auto-generated by yaml_to_cxx.py from test/upstream/transform/unordered_map.yaml
#include "testlib.h"
void test_upstream_transform_unordered_map() {
    enter_section("test_upstream_transform_unordered_map: Tests for ordered_union");
    temp_table even_table;
    R::Query even = even_table.table();
    temp_table odd_table;
    R::Query odd = odd_table.table();
    temp_table odd2_table;
    R::Query odd2 = odd2_table.table();
    TEST_DO(maybe_run(odd.insert(R::array(R::object("id", 1, "num", 1), R::object("id", 3, "num", 3), R::object("id", 5, "num", 5))), *conn));
    TEST_DO(maybe_run(even.insert(R::array(R::object("id", 2, "num", 2), R::object("id", 4, "num", 4), R::object("id", 6, "num", 6))), *conn));
    TEST_DO(maybe_run(odd2.insert(R::array(R::object("id", 7, "num", 1), R::object("id", 8, "num", 3), R::object("id", 9, "num", 2))), *conn));
    TEST_EQ(maybe_run(odd.order_by("num").union_(even.order_by("num"), R::OptArgs{{"interleave", R::expr(false)}}), *conn), (R::Array{R::Object{{"id", 1}, {"num", 1}}, R::Object{{"id", 3}, {"num", 3}}, R::Object{{"id", 5}, {"num", 5}}, R::Object{{"id", 2}, {"num", 2}}, R::Object{{"id", 4}, {"num", 4}}, R::Object{{"id", 6}, {"num", 6}}}));
    TEST_EQ(maybe_run(even.order_by("num").union_(odd.order_by("num"), R::OptArgs{{"interleave", R::expr(false)}}), *conn), (R::Array{R::Object{{"id", 2}, {"num", 2}}, R::Object{{"id", 4}, {"num", 4}}, R::Object{{"id", 6}, {"num", 6}}, R::Object{{"id", 1}, {"num", 1}}, R::Object{{"id", 3}, {"num", 3}}, R::Object{{"id", 5}, {"num", 5}}}));
    TEST_EQ(maybe_run(odd.order_by("num").union_(even.order_by("num"), R::OptArgs{{"interleave", R::expr("num")}}), *conn), (R::Array{R::Object{{"id", 1}, {"num", 1}}, R::Object{{"id", 2}, {"num", 2}}, R::Object{{"id", 3}, {"num", 3}}, R::Object{{"id", 4}, {"num", 4}}, R::Object{{"id", 5}, {"num", 5}}, R::Object{{"id", 6}, {"num", 6}}}));
    TEST_EQ(maybe_run(odd.order_by("num").union_(even.order_by("num"), R::OptArgs{{"interleave", R::expr(R::desc("num"))}}), *conn), (err("ReqlQueryLogicError", "The streams given as arguments are not ordered by given ordering.")));
    TEST_EQ(maybe_run(odd.order_by("num").union_(even.order_by("num"), R::OptArgs{{"interleave", R::expr([=](R::Var x){ return (*x)["num"]; })}}), *conn), (R::Array{R::Object{{"id", 1}, {"num", 1}}, R::Object{{"id", 2}, {"num", 2}}, R::Object{{"id", 3}, {"num", 3}}, R::Object{{"id", 4}, {"num", 4}}, R::Object{{"id", 5}, {"num", 5}}, R::Object{{"id", 6}, {"num", 6}}}));
    TEST_EQ(maybe_run(odd2.order_by("num", R::desc("id")).union_(even.order_by("num", R::desc("id")), R::OptArgs{{"interleave", R::expr(R::array([=](R::Var x){ return (*x)["num"]; }, [=](R::Var x){ return (*x)["id"]; }))}}), *conn), (R::Array{R::Object{{"id", 7}, {"num", 1}}, R::Object{{"id", 2}, {"num", 2}}, R::Object{{"id", 9}, {"num", 2}}, R::Object{{"id", 8}, {"num", 3}}, R::Object{{"id", 4}, {"num", 4}}, R::Object{{"id", 6}, {"num", 6}}}));
    TEST_EQ(maybe_run(odd.order_by("num").union_(even.order_by("num"), R::OptArgs{{"interleave", R::expr([=](R::Var x){ return R::desc((*x)["num"]); })}}), *conn), (err("ReqlServerCompileError", "DESC may only be used as an argument to ORDER_BY or UNION.")));
    TEST_EQ(maybe_run(odd.order_by(R::desc("num")).union_(even.order_by(R::desc("num")), R::OptArgs{{"interleave", R::expr(R::array(R::desc([=](R::Var x){ return (*x)["num"]; })))}}), *conn), (R::Array{R::Object{{"id", 6}, {"num", 6}}, R::Object{{"id", 5}, {"num", 5}}, R::Object{{"id", 4}, {"num", 4}}, R::Object{{"id", 3}, {"num", 3}}, R::Object{{"id", 2}, {"num", 2}}, R::Object{{"id", 1}, {"num", 1}}}));
    TEST_EQ(maybe_run(odd.order_by("num", "id").union_(even.order_by("num", "id"), odd2.order_by("num", "id"), R::OptArgs{{"interleave", R::expr(R::array("num", "id"))}}), *conn), (R::Array{R::Object{{"id", 1}, {"num", 1}}, R::Object{{"id", 7}, {"num", 1}}, R::Object{{"id", 2}, {"num", 2}}, R::Object{{"id", 9}, {"num", 2}}, R::Object{{"id", 3}, {"num", 3}}, R::Object{{"id", 8}, {"num", 3}}, R::Object{{"id", 4}, {"num", 4}}, R::Object{{"id", 5}, {"num", 5}}, R::Object{{"id", 6}, {"num", 6}}}));
    TEST_EQ(maybe_run(odd.order_by("num", "id").union_(even.order_by("num", "id"), odd2.order_by(R::desc("num"), "id"), R::OptArgs{{"interleave", R::expr(R::array("num", "id"))}}), *conn), (err("ReqlQueryLogicError", "The streams given as arguments are not ordered by given ordering.")));
    TEST_EQ(maybe_run(R::range().limit(10000).union_(R::array(1, 2, 3), R::OptArgs{{"interleave", R::expr(false)}}), *conn), (R::range(0, 10000).map([=](R::Var x){ return *x; }) + R::Array{1, 2, 3}));
    exit_section();
}
