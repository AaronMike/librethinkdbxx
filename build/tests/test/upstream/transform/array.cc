// auto-generated by yaml_to_cxx.py from test/upstream/transform/array.yaml
#include "testlib.h"
void test_upstream_transform_array() {
    enter_section("test_upstream_transform_array: Tests manipulation operations on arrays");
    TEST_DO(auto arr = (R::expr(R::array(1, 2, 3))));
    TEST_DO(auto dupe_arr = (R::expr(R::array(1, 1, 2, 3))));
    TEST_DO(auto objArr = (R::expr(R::array(R::object("a", 1, "b", "a"), R::object("a", 2, "b", "b"), R::object("a", 3, "b", "c")))));
    TEST_DO(auto nestedObjArr = (R::expr(R::array(R::object("a", 1, "b", R::object("c", 1)), R::object("a", 2, "b", R::object("c", 2)), R::object("a", 3, "b", R::object("c", 3))))));
    TEST_EQ(arr.append(4).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(arr.append("a").run(*conn), (R::Array{1, 2, 3, "a"}));
    TEST_EQ(arr.prepend(0).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(arr.prepend("a").run(*conn), (R::Array{"a", 1, 2, 3}));
    TEST_EQ(arr.difference(R::array(1, 2, 2)).run(*conn), (R::Array{3}));
    TEST_EQ(arr.difference(R::array()).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(arr.difference(R::array("foo", "bar")).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(dupe_arr.set_insert(1).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(dupe_arr.set_insert(4).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(dupe_arr.set_union(R::array(3, 4, 5, 5)).run(*conn), (R::Array{1, 2, 3, 4, 5}));
    TEST_EQ(dupe_arr.set_union(R::array(5, 6)).run(*conn), (R::Array{1, 2, 3, 5, 6}));
    TEST_EQ(dupe_arr.set_intersection(R::array(1, 1, 1, 2, 2)).run(*conn), (R::Array{1, 2}));
    TEST_EQ(dupe_arr.set_intersection(R::array("foo")).run(*conn), (R::Array{}));
    TEST_EQ(dupe_arr.set_difference(R::array(1, 1, 1, 10)).run(*conn), (R::Array{2, 3}));
    TEST_EQ(dupe_arr.set_difference(R::array(2)).run(*conn), (R::Array{1, 3}));
    TEST_EQ(arr.slice(1, 3).run(*conn), (R::Array{2, 3}));
    TEST_EQ(arr.slice(1, 3).run(*conn), (R::Array{2, 3}));
    TEST_EQ(arr.slice(1, 2, R::OptArgs{{"right_bound", R::expr("closed")}}).run(*conn), (R::Array{2, 3}));
    TEST_EQ(arr.limit(2).run(*conn), (R::Array{1, 2}));
    TEST_EQ(arr.slice(0, 2).run(*conn), (R::Array{1, 2}));
    TEST_EQ(arr.slice(1).run(*conn), (R::Array{2, 3}));
    TEST_EQ(arr.slice(1).run(*conn), (R::Array{2, 3}));
    TEST_EQ(arr.slice(-2, -1).run(*conn), (R::Array{2}));
    TEST_EQ(arr.skip(1).run(*conn), (R::Array{2, 3}));
    TEST_EQ(arr.skip(2).run(*conn), (R::Array{3}));
    TEST_EQ(arr.skip(12).run(*conn), (R::Array{}));
    TEST_EQ(arr.limit(2).run(*conn), (R::Array{1, 2}));
    TEST_EQ(arr.limit(0).run(*conn), (R::Array{}));
    TEST_EQ(arr.limit(12).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(objArr.pluck("a", "b").run(*conn), (R::Array{R::Object{{"b","a"}, {"a",1}}, R::Object{{"b","b"}, {"a",2}}, R::Object{{"b","c"}, {"a",3}}}));
    TEST_EQ(objArr.pluck("a").run(*conn), (R::Array{R::Object{{"a",1}}, R::Object{{"a",2}}, R::Object{{"a",3}}}));
    TEST_EQ(objArr.pluck().run(*conn), (R::Array{R::Object{}, R::Object{}, R::Object{}}));
    TEST_DO(auto wftst = (objArr.union_(objArr.pluck("a")).union_(objArr.pluck("b")).union_(R::Array{R::Object{{"a",R::Nil()}}})));
    TEST_EQ(wftst.with_fields("a").run(*conn), (R::Array{R::Object{{"a",1}}, R::Object{{"a",2}}, R::Object{{"a",3}}, R::Object{{"a",1}}, R::Object{{"a",2}}, R::Object{{"a",3}}}));
    TEST_EQ(wftst.with_fields("b").run(*conn), (R::Array{R::Object{{"b","a"}}, R::Object{{"b","b"}}, R::Object{{"b","c"}}, R::Object{{"b","a"}}, R::Object{{"b","b"}}, R::Object{{"b","c"}}}));
    TEST_EQ(wftst.with_fields("a", "b").run(*conn), (R::Array{R::Object{{"a",1}, {"b","a"}}, R::Object{{"a",2}, {"b","b"}}, R::Object{{"a",3}, {"b","c"}}}));
    TEST_EQ(wftst.with_fields().run(*conn), (R::Array{R::Object{}, R::Object{}, R::Object{}, R::Object{}, R::Object{}, R::Object{}, R::Object{}, R::Object{}, R::Object{}, R::Object{}}));
    TEST_DO(auto wftst2 = (nestedObjArr.union_(objArr.pluck(R::Object{{"b","missing"}})).union_(nestedObjArr.pluck(R::Object{{"b","c"}}))));
    TEST_EQ(wftst2.with_fields(R::object("b", "c")).run(*conn), (R::Array{R::Object{{"b",R::Object{{"c",1}}}}, R::Object{{"b",R::Object{{"c",2}}}}, R::Object{{"b",R::Object{{"c",3}}}}, R::Object{{"b",R::Object{{"c",1}}}}, R::Object{{"b",R::Object{{"c",2}}}}, R::Object{{"b",R::Object{{"c",3}}}}}));
    TEST_EQ(wftst.with_fields(1).run(*conn), (err("RqlRuntimeError", "Invalid path argument `1`.", R::Array{})));
    TEST_EQ(R::expr(1).with_fields().run(*conn), (err("RqlRuntimeError", "Cannot perform has_fields on a non-object non-sequence `1`.", R::Array{})));
    TEST_EQ(objArr.without("a", "b").run(*conn), (R::Array{R::Object{}, R::Object{}, R::Object{}}));
    TEST_EQ(objArr.without("a").run(*conn), (R::Array{R::Object{{"b","a"}}, R::Object{{"b","b"}}, R::Object{{"b","c"}}}));
    TEST_EQ(objArr.without().run(*conn), (R::Array{R::Object{{"b","a"}, {"a",1}}, R::Object{{"b","b"}, {"a",2}}, R::Object{{"b","c"}, {"a",3}}}));
    TEST_EQ(arr.map([=](R::Var v){ return *v + 1; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(arr.reduce([=](R::Var a, R::Var b){ return *a + *b; }).run(*conn), (6));
    TEST_EQ(arr.reduce([=](R::Var a, R::Var b){ return *a + *b; }).run(*conn), (6));
    TEST_EQ(arr.union_(arr).reduce([=](R::Var a, R::Var b){ return *a + *b; }).run(*conn), (12));
    TEST_EQ(arr.union_(arr).reduce([=](R::Var a, R::Var b){ return *a + *b; }).run(*conn), (12));
    TEST_EQ(objArr.filter([=](R::Var row){ return (*row)["b"]=="b"; }).run(*conn), (R::Array{R::Object{{"b","b"}, {"a",2}}}));
    TEST_EQ(arr.concat_map([=](R::Var v){ return R::array(1, 2); }).run(*conn), (R::Array{1, 2, 1, 2, 1, 2}));
    TEST_EQ(arr.concat_map([=](R::Var v){ return R::array(R::object("v", *v), R::object("v2", *v + 1)); }).run(*conn), (R::Array{R::Object{{"v",1}}, R::Object{{"v2",2}}, R::Object{{"v",2}}, R::Object{{"v2",3}}, R::Object{{"v",3}}, R::Object{{"v2",4}}}));
    TEST_EQ(objArr.order_by("b").run(*conn), (R::Array{R::Object{{"b","a"}, {"a",1}}, R::Object{{"b","b"}, {"a",2}}, R::Object{{"b","c"}, {"a",3}}}));
    TEST_EQ(objArr.order_by(R::desc("b")).run(*conn), (R::Array{R::Object{{"b","c"}, {"a",3}}, R::Object{{"b","b"}, {"a",2}}, R::Object{{"b","a"}, {"a",1}}}));
    TEST_EQ(R::expr(R::array(R::object("-a", 1), R::object("-a", 2))).order_by("-a").run(*conn), (R::Array{R::Object{{"-a",1}}, R::Object{{"-a",2}}}));
    TEST_EQ(R::expr(R::array(1, 1, 2, 2, 2, 3, 4)).distinct().run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(objArr.count().run(*conn), (3));
    TEST_EQ(arr.union_(objArr).run(*conn), (R::Array{1, 2, 3, R::Object{{"b","a"}, {"a",1}}, R::Object{{"b","b"}, {"a",2}}, R::Object{{"b","c"}, {"a",3}}}));
    TEST_EQ(arr[1].run(*conn), (2));
    TEST_EQ(arr.nth(1).run(*conn), (2));
    TEST_EQ(arr[0].run(*conn), (1));
    TEST_EQ(R::expr(R::array()).is_empty().run(*conn), (true));
    TEST_EQ(arr.is_empty().run(*conn), (false));
    TEST_EQ(arr.contains(2).run(*conn), (true));
    TEST_EQ(arr.contains(2, 3).run(*conn), (true));
    TEST_EQ(arr.contains(4).run(*conn), (false));
    TEST_EQ(arr.contains(2, 4).run(*conn), (false));
    TEST_EQ(arr.contains(2, 2).run(*conn), (false));
    TEST_EQ(arr.union_(arr).contains(2, 2).run(*conn), (true));
    TEST_EQ(arr.contains([=](R::Var x){ return *x==2; }).run(*conn), (true));
    TEST_EQ(arr.contains([=](R::Var x){ return *x==2; }, [=](R::Var x){ return *x==3; }).run(*conn), (true));
    TEST_EQ(arr.contains([=](R::Var x){ return *x==4; }).run(*conn), (false));
    TEST_EQ(arr.contains([=](R::Var x){ return *x==2; }, [=](R::Var x){ return *x==4; }).run(*conn), (false));
    TEST_EQ(arr.contains([=](R::Var x){ return *x==2; }, [=](R::Var x){ return *x==2; }).run(*conn), (false));
    TEST_EQ(arr.union_(arr).contains([=](R::Var x){ return *x==2; }, [=](R::Var x){ return *x==2; }).run(*conn), (true));
    TEST_EQ(R::expr(R::array(R::object("a", 1), R::object("b", 2), R::object("a", 3, "c", 4)))["a"].run(*conn), (R::Array{1, 3}));
    TEST_EQ(R::expr(R::array(R::object("a", 1), "a", R::object("b", 2), R::object("a", 3, "c", 4)))["a"].run(*conn), (err("RqlRuntimeError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", R::Array{})));
    exit_section();
}
