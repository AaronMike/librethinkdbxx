// auto-generated by yaml_to_cxx.py from test/upstream/transform/object.yaml
#include "testlib.h"
void test_upstream_transform_object() {
    enter_section("test_upstream_transform_object: Tests manipulation operations on objects");
    TEST_DO(auto obj = (R::expr(R::object("a", 1, "b", 2, "c", "str", "d", R::Nil(), "e", R::object("f", "buzz")))));
    TEST_EQ(maybe_run(obj["a"], *conn), (1));
    TEST_EQ(maybe_run(obj["c"], *conn), ("str"));
    TEST_EQ(maybe_run(obj.has_fields("b"), *conn), (true));
    TEST_EQ(maybe_run(obj.keys().contains("d"), *conn), (true));
    TEST_EQ(maybe_run(obj.has_fields("d"), *conn), (false));
    TEST_EQ(maybe_run(obj.has_fields(R::object("e", "f")), *conn), (true));
    TEST_EQ(maybe_run(obj.has_fields(R::object("e", "g")), *conn), (false));
    TEST_EQ(maybe_run(obj.has_fields("f"), *conn), (false));
    TEST_EQ(maybe_run(obj.has_fields("a", "b"), *conn), (true));
    TEST_EQ(maybe_run(obj.has_fields("a", "d"), *conn), (false));
    TEST_EQ(maybe_run(obj.has_fields("a", "f"), *conn), (false));
    TEST_EQ(maybe_run(obj.has_fields("a", R::object("e", "f")), *conn), (true));
    TEST_EQ(maybe_run(R::expr(R::array(obj, obj.pluck("a", "b"))).has_fields("a", "b").count(), *conn), (2));
    TEST_EQ(maybe_run(R::expr(R::array(obj, obj.pluck("a", "b"))).has_fields("a", "c").count(), *conn), (1));
    TEST_EQ(maybe_run(R::expr(R::array(obj, obj.pluck("a", "e"))).has_fields("a", R::object("e", "f")).count(), *conn), (2));
    TEST_EQ(maybe_run(obj.pluck("a"), *conn), (R::Object{{"a", 1}}));
    TEST_EQ(maybe_run(obj.pluck("a", "b"), *conn), (R::Object{{"a", 1}, {"b", 2}}));
    TEST_EQ(maybe_run(obj.without("a"), *conn), (R::Object{{"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", R::Object{{"f", "buzz"}}}}));
    TEST_EQ(maybe_run(obj.without("a", "b"), *conn), (R::Object{{"c", "str"}, {"d", R::Nil()}, {"e", R::Object{{"f", "buzz"}}}}));
    TEST_EQ(maybe_run(obj.without("a", "b", "c", "d"), *conn), (R::Object{{"e", R::Object{{"f", "buzz"}}}}));
    TEST_EQ(maybe_run(obj.without(R::object("e", "f")), *conn), (R::Object{{"a", 1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", R::Object{}}}));
    TEST_EQ(maybe_run(obj.without(R::object("e", "buzz")), *conn), (R::Object{{"a", 1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", R::Object{{"f", "buzz"}}}}));
    TEST_EQ(maybe_run(obj.merge(1), *conn), (1));
    TEST_EQ(maybe_run(obj.merge(R::object("e", -2)), *conn), (R::Object{{"a", 1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", -2}}));
    TEST_EQ(maybe_run(obj.merge(R::object("e", R::literal())), *conn), (R::Object{{"a", 1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}}));
    TEST_EQ(maybe_run(obj.merge(R::object("e", R::object("f", "quux"))), *conn), (R::Object{{"a", 1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", R::Object{{"f", "quux"}}}}));
    TEST_EQ(maybe_run(obj.merge(R::object("e", R::object("g", "quux"))), *conn), (R::Object{{"a", 1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", R::Object{{"f", "buzz"}, {"g", "quux"}}}}));
    TEST_EQ(maybe_run(obj.merge(R::object("e", R::literal(R::object("g", "quux")))), *conn), (R::Object{{"a", 1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", R::Object{{"g", "quux"}}}}));
    TEST_EQ(maybe_run(obj.merge(R::object("a", -1)), *conn), (R::Object{{"a", -1}, {"b", 2}, {"c", "str"}, {"d", R::Nil()}, {"e", R::Object{{"f", "buzz"}}}}));
    TEST_DO(auto errmsg = (std::string("Stray literal keyword found:", 28) + std::string(" literal is only legal inside of the object passed to merge or update and cannot nest inside other literals.", 108)));
    TEST_EQ(maybe_run(R::literal("foo"), *conn), (err("ReqlQueryLogicError", errmsg, R::Array{})));
    TEST_EQ(maybe_run(obj.merge(R::literal("foo")), *conn), (err("ReqlQueryLogicError", errmsg, R::Array{})));
    TEST_EQ(maybe_run(obj.merge(R::object("foo", R::literal(R::literal("foo")))), *conn), (err("ReqlQueryLogicError", errmsg, R::Array{})));
    TEST_DO(auto o = (R::expr(R::object("a", R::object("b", 1, "c", 2), "d", 3))));
    TEST_EQ(maybe_run(o.merge(R::object("e", 4), R::object("f", 5)), *conn), (R::Object{{"a", R::Object{{"b", 1}, {"c", 2}}}, {"d", 3}, {"e", 4}, {"f", 5}}));
    TEST_EQ(maybe_run(R::expr(R::array(o, o.merge(R::object("d", 4)))).merge([=](R::Var row){ return R::object("e", (*row)["d"]); }), *conn), (R::Array{R::Object{{"a", R::Object{{"b", 1}, {"c", 2}}}, {"d", 3}, {"e", 3}}, R::Object{{"a", R::Object{{"b", 1}, {"c", 2}}}, {"d", 4}, {"e", 4}}}));
    TEST_EQ(maybe_run(R::expr(R::array(o, o.merge(R::object("d", 4)))).merge(R::object("e", R::row["d"])), *conn), (R::Array{R::Object{{"a", R::Object{{"b", 1}, {"c", 2}}}, {"d", 3}, {"e", 3}}, R::Object{{"a", R::Object{{"b", 1}, {"c", 2}}}, {"d", 4}, {"e", 4}}}));
    TEST_EQ(maybe_run(R::expr(R::array(o, o.merge(R::object("d", 4)))).merge([=](R::Var row){ return R::object("a", R::object("b", 2)); }), *conn), (R::Array{R::Object{{"a", R::Object{{"b", 2}, {"c", 2}}}, {"d", 3}}, R::Object{{"a", R::Object{{"b", 2}, {"c", 2}}}, {"d", 4}}}));
    TEST_EQ(maybe_run(R::expr(R::array(o, o.merge(R::object("d", 4)))).merge([=](R::Var row){ return R::object("a", R::literal(R::object("b", 2))); }), *conn), (R::Array{R::Object{{"a", R::Object{{"b", 2}}}, {"d", 3}}, R::Object{{"a", R::Object{{"b", 2}}}, {"d", 4}}}));
    TEST_EQ(maybe_run(obj.keys(), *conn), (R::Array{"a", "b", "c", "d", "e"}));
    TEST_EQ(maybe_run(obj.values(), *conn), (R::Array{1, 2, "str", R::Nil(), R::Object{{"f", "buzz"}}}));
    TEST_EQ(maybe_run(obj.count(), *conn), (5));
    exit_section();
}
