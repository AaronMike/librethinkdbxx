// auto-generated by yaml_to_cxx.py from test/upstream/times/api.yaml
#include "testlib.h"
void test_upstream_times_api() {
    enter_section("test_upstream_times_api: date/time api (#977)");
    TEST_DO(auto rt1 = (1375147296.6812));
    TEST_DO(auto t1 = (R::epoch_time(rt1)));
    TEST_DO(auto t2 = (R::epoch_time(rt1 + 1000)));
    TEST_EQ(maybe_run((t1 + 1000).to_epoch_time(), *conn), (1375148296.681));
    TEST_EQ(maybe_run((t1 - 1000).to_epoch_time(), *conn), (1375146296.681));
    TEST_EQ(maybe_run((t1 - (t1 - 1000)), *conn), (1000));
    TEST_EQ(maybe_run((t1<t1), *conn), (false));
    TEST_EQ(maybe_run((t1<=t1), *conn), (true));
    TEST_EQ(maybe_run((t1==t1), *conn), (true));
    TEST_EQ(maybe_run((t1!=t1), *conn), (false));
    TEST_EQ(maybe_run((t1>=t1), *conn), (true));
    TEST_EQ(maybe_run((t1>t1), *conn), (false));
    TEST_EQ(maybe_run((t1<t2), *conn), (true));
    TEST_EQ(maybe_run((t1<=t2), *conn), (true));
    TEST_EQ(maybe_run((t1==t2), *conn), (false));
    TEST_EQ(maybe_run((t1!=t2), *conn), (true));
    TEST_EQ(maybe_run((t1>=t2), *conn), (false));
    TEST_EQ(maybe_run((t1>t2), *conn), (false));
    TEST_EQ(maybe_run(t1.during(t1, t1 + 1000), *conn), (true));
    TEST_EQ(maybe_run(t1.during(t1, t1 + 1000, R::OptArgs{{"left_bound", R::expr("open")}}), *conn), (false));
    TEST_EQ(maybe_run(t1.during(t1, t1), *conn), (false));
    TEST_EQ(maybe_run(t1.during(t1, t1, R::OptArgs{{"right_bound", R::expr("closed")}}), *conn), (true));
    TEST_EQ(maybe_run(t1.date().to_epoch_time(), *conn), (1375142400));
    TEST_EQ(maybe_run(t1.time_of_day(), *conn), (4896.681));
    TEST_EQ(maybe_run(t1.year(), *conn), (2013));
    TEST_EQ(maybe_run(t1.month(), *conn), (7));
    TEST_EQ(maybe_run(t1.day(), *conn), (30));
    TEST_EQ(maybe_run(t1.day_of_week(), *conn), (2));
    TEST_EQ(maybe_run(t1.day_of_year(), *conn), (211));
    TEST_EQ(maybe_run(t1.hours(), *conn), (1));
    TEST_EQ(maybe_run(t1.minutes(), *conn), (21));
    TEST_EQ(maybe_run(t1.seconds(), *conn), (36.681));
    TEST_EQ(maybe_run(R::time(2013, R::july, 29, 23, 30, 0.1, "-07:00").to_epoch_time(), *conn), (1375165800.1));
    TEST_EQ(maybe_run(R::time(2013, R::july, 29, 23, 30, 0.1, "-07:00").timezone(), *conn), ("-07:00"));
    TEST_EQ(maybe_run(R::time(2013, R::july, 29, 23).to_epoch_time(), *conn), (err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", R::Array{})));
    TEST_EQ(maybe_run(R::time(2013, R::july, 29, "-07:00").to_epoch_time(), *conn), (1375081200));
    TEST_EQ(maybe_run(R::time(2013, R::july, 29, "-07:00").timezone(), *conn), ("-07:00"));
    TEST_EQ(maybe_run(R::iso8601("2013-07-30T20:56:05-07:00").to_epoch_time(), *conn), (1375242965));
    TEST_EQ(maybe_run(R::epoch_time(1375242965).in_timezone("-07:00").to_iso8601(), *conn), ("2013-07-30T20:56:05-07:00"));
    TEST_EQ(maybe_run(R::now().type_of(), *conn), ("PTYPE<TIME>"));
    TEST_EQ(maybe_run((R::now() - R::now()), *conn), (0));
    TEST_EQ(maybe_run(R::iso8601("2013-07-30T20:56:05").to_iso8601(), *conn), (err("ReqlQueryLogicError", "ISO 8601 string has no time zone, and no default time zone was provided.", R::Array{})));
    TEST_EQ(maybe_run(R::iso8601("2013-07-30T20:56:05", R::OptArgs{{"default_timezone", R::expr("-07")}}).to_iso8601(), *conn), ("2013-07-30T20:56:05-07:00"));
    TEST_EQ(maybe_run(R::expr(R::array(R::monday, R::tuesday, R::wednesday, R::thursday, R::friday, R::saturday, R::sunday)), *conn), (R::Array{1, 2, 3, 4, 5, 6, 7}));
    TEST_EQ(maybe_run(R::expr(R::array(R::january, R::february, R::march, R::april, R::may, R::june, R::july, R::august, R::september, R::october, R::november, R::december)), *conn), (R::Array{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}));
    exit_section();
}
