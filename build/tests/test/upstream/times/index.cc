// auto-generated by yaml_to_cxx.py from test/upstream/times/index.yaml
#include "testlib.h"
void test_upstream_times_index() {
    enter_section("test_upstream_times_index: secondary indexes on times");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto ts = (R::Object{{"timezone", std::string("-07:00", 6)}, {"epoch_time", 1375445162.0872}, {"$reql_type$", std::string("TIME", 4)}}));
    TEST_DO(auto t1 = (R::Object{{"timezone", std::string("-07:00", 6)}, {"epoch_time", 1375445163.0872}, {"$reql_type$", std::string("TIME", 4)}}));
    TEST_DO(auto t2 = (R::Object{{"timezone", std::string("-07:00", 6)}, {"epoch_time", 1375445163.08832}, {"$reql_type$", std::string("TIME", 4)}}));
    TEST_DO(auto t3 = (R::Object{{"timezone", std::string("-07:00", 6)}, {"epoch_time", 1375445163.08943}, {"$reql_type$", std::string("TIME", 4)}}));
    TEST_DO(auto t4 = (R::Object{{"timezone", std::string("-07:00", 6)}, {"epoch_time", 1375445163.09055}, {"$reql_type$", std::string("TIME", 4)}}));
    TEST_DO(auto t5 = (R::Object{{"timezone", std::string("-07:00", 6)}, {"epoch_time", 1375445163.09166}, {"$reql_type$", std::string("TIME", 4)}}));
    TEST_DO(auto te = (R::Object{{"timezone", std::string("-07:00", 6)}, {"epoch_time", 1375445164.0872}, {"$reql_type$", std::string("TIME", 4)}}));
    TEST_DO(auto trows = (R::array(R::object("id", t1), R::object("id", t2), R::object("id", t3), R::object("id", t4), R::object("id", t5)).run(*conn)));
    TEST_EQ(maybe_run(tbl.insert(trows)["inserted"], *conn), (5));
    TEST_DO(auto bad_insert = (R::array(R::object("id", R::expr(t1).in_timezone("Z"))).run(*conn)));
    TEST_EQ(maybe_run(tbl.insert(bad_insert)["first_error"], *conn), ("Duplicate primary key `id`:\x0a{\x0a\x09\"id\":\x09{\x0a\x09\x09\"$reql_type$\":\x09\"TIME\",\x0a\x09\x09\"epoch_time\":\x09\x31\x33\x37\x35\x34\x34\x35\x31\x36\x33.087,\x0a\x09\x09\"timezone\":\x09\"-07:00\"\x0a\x09}\x0a}\x0a{\x0a\x09\"id\":\x09{\x0a\x09\x09\"$reql_type$\":\x09\"TIME\",\x0a\x09\x09\"epoch_time\":\x09\x31\x33\x37\x35\x34\x34\x35\x31\x36\x33.087,\x0a\x09\x09\"timezone\":\x09\"+00:00\"\x0a\x09}\x0a}"));
    TEST_EQ(maybe_run(tbl.between(ts, te).count(), *conn), (5));
    TEST_EQ(maybe_run(tbl.between(t1, t4).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(t1, t4, R::OptArgs{{"right_bound", R::expr("closed")}}).count(), *conn), (4));
    TEST_EQ(maybe_run(tbl.between(R::expr(ts).in_timezone("+06:00"), te).count(), *conn), (5));
    TEST_EQ(maybe_run(tbl.between(t1, R::expr(t4).in_timezone("+08:00")).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(R::expr(t1).in_timezone("Z"), t4, R::OptArgs{{"right_bound", R::expr("closed")}}).count(), *conn), (4));
    TEST_EQ(maybe_run(tbl.update([=](R::Var row){ return R::object("a", (*row)["id"]); })["replaced"], *conn), (5));
    TEST_EQ(maybe_run(tbl.index_create("a"), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl.index_wait("a").count(), *conn), (1));
    TEST_EQ(maybe_run(tbl.between(ts, te, R::OptArgs{{"index", R::expr("a")}}).count(), *conn), (5));
    TEST_EQ(maybe_run(tbl.between(t1, t4, R::OptArgs{{"index", R::expr("a")}}).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(t1, t4, R::OptArgs{{"right_bound", R::expr("closed")}, {"index", R::expr("a")}}).count(), *conn), (4));
    TEST_EQ(maybe_run(tbl.between(R::expr(ts).in_timezone("+06:00"), te, R::OptArgs{{"index", R::expr("a")}}).count(), *conn), (5));
    TEST_EQ(maybe_run(tbl.between(t1, R::expr(t4).in_timezone("+08:00"), R::OptArgs{{"index", R::expr("a")}}).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(R::expr(t1).in_timezone("Z"), t4, R::OptArgs{{"right_bound", R::expr("closed")}, {"index", R::expr("a")}}).count(), *conn), (4));
    TEST_EQ(maybe_run(tbl.index_create("b", [=](R::Var row){ return R::branch((*row)["id"]<t4, (*row)["a"], R::Nil()); }), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl.index_wait("b").count(), *conn), (1));
    TEST_EQ(maybe_run(tbl.index_wait("b").count(), *conn), (1));
    TEST_EQ(maybe_run(tbl.between(ts, te, R::OptArgs{{"index", R::expr("b")}}).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(t1, t4, R::OptArgs{{"index", R::expr("b")}}).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(t1, t4, R::OptArgs{{"right_bound", R::expr("closed")}, {"index", R::expr("b")}}).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(R::expr(ts).in_timezone("+06:00"), te, R::OptArgs{{"index", R::expr("b")}}).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(t1, R::expr(t4).in_timezone("+08:00"), R::OptArgs{{"index", R::expr("b")}}).count(), *conn), (3));
    TEST_EQ(maybe_run(tbl.between(R::expr(t1).in_timezone("Z"), t4, R::OptArgs{{"right_bound", R::expr("closed")}, {"index", R::expr("b")}}).count(), *conn), (3));
    TEST_DO(auto oldtime = (R::Time(1375147296.681, PacificTimeZone())));
    TEST_DO(auto curtime = (R::Time::now()));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", oldtime)))["inserted"], *conn), (1));
    TEST_EQ(maybe_run(tbl.get(oldtime)["id"].type_of(), *conn), ("PTYPE<TIME>"));
    exit_section();
}
