// auto-generated by yaml_to_cxx.py from test/upstream/times/timezones.yaml
#include "testlib.h"
void test_upstream_times_timezones() {
    enter_section("test_upstream_times_timezones: Test basic timezone manipulation");
    TEST_DO(auto t1 = (R::time(2013, R::july, 29, 23, 30, 0, "+00:00")));
    TEST_DO(auto tutc1 = (t1.in_timezone(std::string("Z", 1))));
    TEST_DO(auto tutc2 = (t1.in_timezone(std::string("+00:00", 6))));
    TEST_DO(auto tutc3 = (t1.in_timezone(std::string("+00", 3))));
    TEST_DO(auto tutcs = (R::expr(R::array(tutc1, tutc2, tutc3))));
    TEST_DO(auto tm1 = (t1.in_timezone(std::string("-00:59", 6))));
    TEST_DO(auto tm2 = (t1.in_timezone(std::string("-01:00", 6))));
    TEST_DO(auto tm3 = (t1.in_timezone(std::string("-01:01", 6))));
    TEST_DO(auto tms = (R::expr(R::array(tm1, tm2, tm3))));
    TEST_DO(auto tp1 = (t1.in_timezone(std::string("+00:59", 6))));
    TEST_DO(auto tp2 = (t1.in_timezone(std::string("+01:00", 6))));
    TEST_DO(auto tp3 = (t1.in_timezone(std::string("+01:01", 6))));
    TEST_DO(auto tps = (R::expr(R::array(tp1, tp2, tp3))));
    TEST_DO(auto ts = (tutcs.union_(tms).union_(tps).union_(R::array(t1))));
    TEST_EQ(maybe_run(tutcs.map([=](R::Var x){ return R::array((*x).timezone(), (*x).day()); }), *conn), (R::Array{R::Array{"+00:00", 29}, R::Array{"+00:00", 29}, R::Array{"+00:00", 29}}));
    TEST_EQ(maybe_run(tms.map([=](R::Var x){ return R::array((*x).timezone(), (*x).day()); }), *conn), (R::Array{R::Array{"-00:59", 29}, R::Array{"-01:00", 29}, R::Array{"-01:01", 29}}));
    TEST_EQ(maybe_run(tps.map([=](R::Var x){ return R::array((*x).timezone(), (*x).day()); }), *conn), (R::Array{R::Array{"+00:59", 30}, R::Array{"+01:00", 30}, R::Array{"+01:01", 30}}));
    TEST_EQ(maybe_run(ts.concat_map([=](R::Var x){ return ts.map([=](R::Var y){ return *x - *y; }); }).distinct(), *conn), (R::Array{0}));
    TEST_EQ(maybe_run(R::now().in_timezone(""), *conn), (err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.")));
    TEST_EQ(maybe_run(R::now().in_timezone("-00"), *conn), (err("ReqlQueryLogicError", "`-00` is not a valid time offset.")));
    TEST_EQ(maybe_run(R::now().in_timezone("-00:00"), *conn), (err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.")));
    TEST_EQ(maybe_run(R::now().in_timezone("UTC+00"), *conn), (err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.")));
    TEST_EQ(maybe_run(R::now().in_timezone("+00:60"), *conn), (err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.")));
    TEST_EQ(maybe_run(R::now().in_timezone("+25:00"), *conn), (err("ReqlQueryLogicError", "Hours out of range in `+25:00`.")));
    TEST_EQ(maybe_run(R::time(2013, 1, 1, ""), *conn), (err("ReqlQueryLogicError", "Timezone `` does not start with `-` or `+`.")));
    TEST_EQ(maybe_run(R::time(2013, 1, 1, "-00"), *conn), (err("ReqlQueryLogicError", "`-00` is not a valid time offset.")));
    TEST_EQ(maybe_run(R::time(2013, 1, 1, "-00:00"), *conn), (err("ReqlQueryLogicError", "`-00:00` is not a valid time offset.")));
    TEST_EQ(maybe_run(R::time(2013, 1, 1, "UTC+00"), *conn), (err("ReqlQueryLogicError", "Timezone `UTC+00` does not start with `-` or `+`.")));
    TEST_EQ(maybe_run(R::time(2013, 1, 1, "+00:60"), *conn), (err("ReqlQueryLogicError", "Minutes out of range in `+00:60`.")));
    TEST_EQ(maybe_run(R::time(2013, 1, 1, "+25:00"), *conn), (err("ReqlQueryLogicError", "Hours out of range in `+25:00`.")));
    TEST_EQ(maybe_run(R::epoch_time(1436428422.339).in_timezone("-08:00").date().to_iso8601(), *conn), ("2015-07-08T00:00:00-08:00"));
    TEST_EQ(maybe_run(R::epoch_time(1436428422.339).in_timezone("-07:00").date().to_iso8601(), *conn), ("2015-07-09T00:00:00-07:00"));
    exit_section();
}
