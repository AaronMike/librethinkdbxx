// auto-generated by yaml_to_cxx.py from test/upstream/timeout.yaml
#include "testlib.h"
void test_upstream_timeout() {
    enter_section("test_upstream_timeout: Tests timeouts.");
    TEST_EQ(R::js("while(true) {}").run(*conn), (err("RqlRuntimeError", "JavaScript query `while(true) {}` timed out after 5.000 seconds.", R::Array{0})));
    TEST_EQ(R::js("while(true) {}", R::OptArgs{{"timeout", R::expr(1.3)}}).run(*conn), (err("RqlRuntimeError", "JavaScript query `while(true) {}` timed out after 1.300 seconds.", R::Array{0})));
    TEST_EQ(R::js("while(true) {}", R::OptArgs{{"timeout", R::expr(8)}}).run(*conn), (err("RqlRuntimeError", "JavaScript query `while(true) {}` timed out after 8.000 seconds.", R::Array{0})));
    TEST_EQ(R::expr("foo").do_(R::js("(function(x) { while(true) {} })")).run(*conn), (err("RqlRuntimeError", "JavaScript query `(function(x) { while(true) {} })` timed out after 5.000 seconds.", R::Array{0})));
    TEST_EQ(R::expr("foo").do_(R::js("(function(x) { while(true) {} })", R::OptArgs{{"timeout", R::expr(1.3)}})).run(*conn), (err("RqlRuntimeError", "JavaScript query `(function(x) { while(true) {} })` timed out after 1.300 seconds.", R::Array{0})));
    TEST_EQ(R::expr("foo").do_(R::js("(function(x) { while(true) {} })", R::OptArgs{{"timeout", R::expr(8)}})).run(*conn), (err("RqlRuntimeError", "JavaScript query `(function(x) { while(true) {} })` timed out after 8.000 seconds.", R::Array{0})));
    TEST_EQ(R::http("httpbin.org/delay/10", R::OptArgs{{"timeout", R::expr(0.8)}}).run(*conn), (err("RqlRuntimeError", "Error in HTTP GET of `httpbin.org/delay/10`: timed out after 0.800 seconds.", R::Array{})));
    TEST_EQ(R::http("httpbin.org/delay/10", R::OptArgs{{"method", R::expr("PUT")}, {"timeout", R::expr(0.0)}}).run(*conn), (err("RqlRuntimeError", "Error in HTTP PUT of `httpbin.org/delay/10`: timed out after 0.000 seconds.", R::Array{})));
    exit_section();
}
