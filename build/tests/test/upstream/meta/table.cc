// auto-generated by yaml_to_cxx.py from test/upstream/meta/table.yaml
#include "testlib.h"
void test_upstream_meta_table() {
    enter_section("test_upstream_meta_table: Tests meta queries for creating and deleting tables");
    TEST_DO(auto db = (R::db("test")));
    TEST_EQ(db.table_list().run(*conn), (R::Array{}));
    TEST_EQ(R::db("rethinkdb").info().run(*conn), (R::Object{{"type","DB"}, {"name","rethinkdb"}, {"id",R::Nil()}}));
    TEST_EQ(R::db("rethinkdb").table("stats").info().run(*conn), (partial(R::Object{{"db",R::Object{{"type","DB"}, {"name","rethinkdb"}, {"id",R::Nil()}}}, {"type","TABLE"}, {"id",R::Nil()}, {"name","stats"}, {"indexes",R::Array{}}, {"primary_key","id"}})));
    TEST_EQ(db.table_create("a").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table_list().run(*conn), (R::Array{"a"}));
    TEST_EQ(db.table_create("b").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table_list().run(*conn), (bag(R::Array{"a", "b"})));
    TEST_EQ(db.table_drop("a").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_list().run(*conn), (R::Array{"b"}));
    TEST_EQ(db.table_drop("b").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_list().run(*conn), (R::Array{}));
    TEST_EQ(db.table_create("ab", R::OptArgs{{"durability", R::expr("soft")}}).run(*conn), (partial(R::Object{{"tables_created",1}, {"config_changes",R::Array{partial(R::Object{{"new_val",partial(R::Object{{"durability","soft"}})}})}}})));
    TEST_EQ(db.table_drop("ab").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_create("ab", R::OptArgs{{"durability", R::expr("hard")}}).run(*conn), (partial(R::Object{{"tables_created",1}, {"config_changes",R::Array{partial(R::Object{{"new_val",partial(R::Object{{"durability","hard"}})}})}}})));
    TEST_EQ(db.table_drop("ab").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_create("ab", R::OptArgs{{"durability", R::expr("fake")}}).run(*conn), (err("RqlRuntimeError", "Durability option `fake` unrecognized (options are \"hard\" and \"soft\").")));
    TEST_EQ(db.table_create("ab", R::OptArgs{{"primary_key", R::expr("bar")}, {"shards", R::expr(2)}, {"replicas", R::expr(1)}}).run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table_drop("ab").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_create("ab", R::OptArgs{{"primary_key", R::expr("bar")}, {"primary_replica_tag", R::expr("default")}}).run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table_drop("ab").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_create("a").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(1)}}).run(*conn), (partial(R::Object{{"reconfigured",1}})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(R::object("default", 1))}, {"primary_replica_tag", R::expr("default")}}).run(*conn), (partial(R::Object{{"reconfigured",1}})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(1)}, {"dry_run", R::expr(true)}}).run(*conn), (partial(R::Object{{"reconfigured",0}})));
    TEST_EQ(db.table_drop("a").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_create("foo").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table_create("foo").run(*conn), (err("RqlRuntimeError", "Table `test.foo` already exists.", R::Array{0})));
    TEST_EQ(db.table_drop("foo").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_drop("foo").run(*conn), (err("RqlRuntimeError", "Table `test.foo` does not exist.", R::Array{0})));
    TEST_EQ(db.table_create("nonsense", R::OptArgs{{"foo", R::expr("bar")}}).run(*conn), (err("RqlCompileError", "Unrecognized optional argument `foo`.", R::Array{})));
    TEST_EQ(db.table_create("a").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(0)}, {"replicas", R::expr(1)}}).run(*conn), (err("RqlRuntimeError", "Every table must have at least one shard.", R::Array{})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(R::object("default", 1))}, {"primary_replica_tag", R::expr("foo")}}).run(*conn), (err("RqlRuntimeError", "Can't use server tag `foo` for primary replicas because you specified no replicas in server tag `foo`.", R::Array{})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(R::object("foo", 0))}, {"primary_replica_tag", R::expr("foo")}}).run(*conn), (err("RqlRuntimeError", "You must set `replicas` to at least one. `replicas` includes the primary replica; if there are zero replicas, there is nowhere to put the data.", R::Array{})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(R::object("default", 0))}}).run(*conn), (err("RqlRuntimeError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", R::Array{})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(R::object("default", -3))}, {"primary_replica_tag", R::expr("default")}}).run(*conn), (err("RqlRuntimeError", "Can't have a negative number of replicas", R::Array{})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(3)}, {"primary_replica_tag", R::expr("foo")}}).run(*conn), (err("RqlRuntimeError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", R::Array{})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(2)}, {"replicas", R::expr(1)}}).run(*conn), (partial(R::Object{{"reconfigured",1}})));
    db.table("a").wait().run(*conn);
    TEST_EQ(db.table("a").insert(R::array(R::object("id", 1), R::object("id", 2), R::object("id", 3), R::object("id", 4))).run(*conn), (R::Object{{"inserted",4}}));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(2)}, {"replicas", R::expr(1)}}).run(*conn), (partial(R::Object{{"reconfigured",1}})));
    TEST_EQ(db.table("a").reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(2)}}).run(*conn), (err("RqlRuntimeError", "Can't put 2 replicas on servers with the tag `default` because there are only 1 servers with the tag `default`. It's impossible to have more replicas of the data than there are servers.", R::Array{})));
    TEST_EQ(db.table("a").wait().run(*conn), (partial(R::Object{{"ready",1}})));
    TEST_EQ(db.table("a").rebalance().run(*conn), (partial(R::Object{{"rebalanced",1}})));
    TEST_EQ(db.wait().run(*conn), (partial(R::Object{{"ready",1}})));
    TEST_EQ(db.rebalance().run(*conn), (partial(R::Object{{"rebalanced",1}})));
    TEST_EQ(R::wait().run(*conn), (partial(R::Object{{"ready",1}})));
    TEST_EQ(R::rebalance().run(*conn), (partial(R::Object{{"rebalanced",1}})));
    TEST_EQ(db.table_drop("a").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    db.table_create("a").run(*conn);
    db.table_create("b").run(*conn);
    db.table_create("c").run(*conn);
    TEST_EQ(db.reconfigure(R::OptArgs{{"shards", R::expr(0)}, {"replicas", R::expr(1)}}).run(*conn), (err("RqlRuntimeError", "Every table must have at least one shard.", R::Array{})));
    TEST_EQ(db.reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(R::object("default", 0))}}).run(*conn), (err("RqlRuntimeError", "`primary_replica_tag` must be specified when `replicas` is an OBJECT.", R::Array{})));
    TEST_EQ(db.reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(R::object("default", -3))}, {"primary_replica_tag", R::expr("default")}}).run(*conn), (err("RqlRuntimeError", "Can't have a negative number of replicas", R::Array{})));
    TEST_EQ(db.reconfigure(R::OptArgs{{"shards", R::expr(1)}, {"replicas", R::expr(3)}, {"primary_replica_tag", R::expr("foo")}}).run(*conn), (err("RqlRuntimeError", "`replicas` must be an OBJECT if `primary_replica_tag` is specified.", R::Array{})));
    TEST_EQ(db.reconfigure(R::OptArgs{{"shards", R::expr(2)}, {"replicas", R::expr(1)}}).run(*conn), (partial(R::Object{{"reconfigured",3}})));
    TEST_EQ(db.table_drop("a").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_drop("b").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_drop("c").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(R::db_create("test2").run(*conn), (partial(R::Object{{"dbs_created",1}})));
    TEST_DO(auto db2 = (R::db("test2")));
    TEST_EQ(db.table_create("testA").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db.table_create("testB").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(db2.table_create("test2B").run(*conn), (partial(R::Object{{"tables_created",1}})));
    TEST_EQ(R::table("testA").config().pluck("db", "name").run(*conn), (R::Object{{"db","test"}, {"name","testA"}}));
    TEST_EQ(R::table("doesntexist").config().run(*conn), (err("RqlRuntimeError", "Table `test.doesntexist` does not exist.", R::Array{})));
    TEST_EQ(R::table("test2B").config().run(*conn), (err("RqlRuntimeError", "Table `test.test2B` does not exist.", R::Array{})));
    TEST_EQ(R::db("rethinkdb").table("table_config").filter(R::object("name", "testA")).nth(0).eq(R::table("testA").config()).run(*conn), (true));
    TEST_EQ(R::db("rethinkdb").table("table_status").filter(R::object("name", "testA")).nth(0).eq(R::table("testA").status()).run(*conn), (true));
    TEST_EQ(R::db("rethinkdb").table("table_config", R::OptArgs{{"identifier_format", R::expr("uuid")}}).nth(0)["db"].run(*conn), (uuid()));
    TEST_EQ(R::table("testA", R::OptArgs{{"identifier_format", R::expr("uuid")}}).count().run(*conn), (0));
    TEST_EQ(R::wait(R::OptArgs{{"wait_for", R::expr("all_replicas_ready")}, {"timeout", R::expr(5)}}).run(*conn), (partial(R::Object{{"ready",2}})));
    TEST_EQ(db.table_drop("testA").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(db.table_drop("testB").run(*conn), (partial(R::Object{{"tables_dropped",1}})));
    TEST_EQ(R::db_drop("test2").run(*conn), (partial(R::Object{{"dbs_dropped",1}, {"tables_dropped",1}})));
    exit_section();
}
