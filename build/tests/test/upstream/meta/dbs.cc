// auto-generated by yaml_to_cxx.py from test/upstream/meta/dbs.yaml
#include "testlib.h"
void test_upstream_meta_dbs() {
    enter_section("test_upstream_meta_dbs: Tests meta queries for databases");
    TEST_EQ(maybe_run(R::db_list(), *conn), (bag(R::Array{"rethinkdb", "test"})));
    TEST_EQ(maybe_run(R::db_create("a"), *conn), (partial(R::Object{{"dbs_created", 1}})));
    TEST_EQ(maybe_run(R::db_create("b"), *conn), (partial(R::Object{{"dbs_created", 1}})));
    TEST_EQ(maybe_run(R::db_list(), *conn), (bag(R::Array{"rethinkdb", "a", "b", "test"})));
    TEST_EQ(maybe_run(R::db("a").config(), *conn), (R::Object{{"name", "a"}, {"id", uuid()}}));
    TEST_EQ(maybe_run(R::db_drop("b"), *conn), (partial(R::Object{{"dbs_dropped", 1}})));
    TEST_EQ(maybe_run(R::db_list(), *conn), (bag(R::Array{"rethinkdb", "a", "test"})));
    TEST_EQ(maybe_run(R::db_drop("a"), *conn), (partial(R::Object{{"dbs_dropped", 1}})));
    TEST_EQ(maybe_run(R::db_list(), *conn), (bag(R::Array{"rethinkdb", "test"})));
    TEST_EQ(maybe_run(R::db_create("bar"), *conn), (partial(R::Object{{"dbs_created", 1}})));
    TEST_EQ(maybe_run(R::db_create("bar"), *conn), (err("ReqlOpFailedError", "Database `bar` already exists.", R::Array{0})));
    TEST_EQ(maybe_run(R::db_drop("bar"), *conn), (partial(R::Object{{"dbs_dropped", 1}})));
    TEST_EQ(maybe_run(R::db_drop("bar"), *conn), (err("ReqlOpFailedError", "Database `bar` does not exist.", R::Array{0})));
    exit_section();
}
