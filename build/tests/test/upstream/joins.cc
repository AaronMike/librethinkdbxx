// auto-generated by yaml_to_cxx.py from test/upstream/joins.yaml
#include "testlib.h"
void test_upstream_joins() {
    enter_section("test_upstream_joins: Tests that manipulation data in tables");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    temp_table tbl2_table;
    R::Query tbl2 = tbl2_table.table();
    temp_table senders_table;
    R::Query senders = senders_table.table();
    temp_table receivers_table;
    R::Query receivers = receivers_table.table();
    temp_table messages_table;
    R::Query messages = messages_table.table();
    temp_table otbl_table;
    R::Query otbl = otbl_table.table();
    temp_table otbl2_table;
    R::Query otbl2 = otbl2_table.table();
    TEST_EQ(maybe_run(R::db("test").table_create("test3", R::OptArgs{{"primary_key", R::expr("foo")}}), *conn), (partial(R::Object{{"tables_created", 1}})));
    TEST_DO(auto tbl3 = (R::db("test").table("test3")));
    TEST_EQ(maybe_run(tbl.insert(R::range(0, 100).map(R::object("id", R::row, "a", R::row % 4))), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 100}})));
    TEST_EQ(maybe_run(tbl2.insert(R::range(0, 100).map(R::object("id", R::row, "b", R::row % 4))), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 100}})));
    TEST_EQ(maybe_run(tbl3.insert(R::range(0, 100).map(R::object("foo", R::row, "b", R::row % 4))), *conn), (partial(R::Object{{"errors", 0}, {"inserted", 100}})));
    TEST_DO(maybe_run(otbl.insert(R::range(1, 100).map(R::object("id", R::row, "a", R::row))), *conn));
    TEST_DO(maybe_run(otbl2.insert(R::range(1, 100).map(R::object("id", R::row, "b", R::expr(2) * R::row))), *conn));
    TEST_DO(auto ij = (tbl.inner_join(tbl2, [=](R::Var x, R::Var y){ return (*x)["a"]==(*y)["b"]; }).zip()));
    TEST_EQ(maybe_run(ij.count(), *conn), (2500));
    TEST_EQ(maybe_run(ij.filter([=](R::Var row){ return (*row)["a"]!=(*row)["b"]; }).count(), *conn), (0));
    TEST_DO(auto oj = (tbl.outer_join(tbl2, [=](R::Var x, R::Var y){ return (*x)["a"]==(*y)["b"]; }).zip()));
    TEST_EQ(maybe_run(oj.count(), *conn), (2500));
    TEST_EQ(maybe_run(oj.filter([=](R::Var row){ return (*row)["a"]!=(*row)["b"]; }).count(), *conn), (0));
    TEST_DO(auto blah = (otbl.order_by("id").eq_join(R::row["id"], otbl2, R::OptArgs{{"ordered", R::expr(true)}}).zip().run(*conn)));
    TEST_DO(blah = (otbl.order_by(R::desc("id")).eq_join(R::row["id"], otbl2, R::OptArgs{{"ordered", R::expr(true)}}).zip().run(*conn)));
    TEST_DO(blah = (otbl.order_by("id").eq_join(R::row["a"], otbl2, R::OptArgs{{"ordered", R::expr(true)}}).zip().run(*conn)));
    TEST_EQ(maybe_run(tbl.eq_join("a", tbl2).zip().count(), *conn), (100));
    TEST_EQ(maybe_run(tbl.eq_join("fake", tbl2).zip().count(), *conn), (0));
    TEST_EQ(maybe_run(tbl.eq_join([=](R::Var x){ return (*x)["a"]; }, tbl2).zip().count(), *conn), (100));
    TEST_EQ(maybe_run(tbl.eq_join([=](R::Var x){ return (*x)["fake"]; }, tbl2).zip().count(), *conn), (0));
    TEST_EQ(maybe_run(tbl.eq_join([=](R::Var x){ return R::expr(R::Nil()); }, tbl2).zip().count(), *conn), (0));
    TEST_EQ(maybe_run(tbl.eq_join([=](R::Var x){ return (*x)["a"]; }, tbl2).count(), *conn), (100));
    TEST_EQ(maybe_run(tbl.eq_join("a", tbl3).zip().count(), *conn), (100));
    TEST_EQ(maybe_run(tbl.eq_join([=](R::Var x){ return (*x)["a"]; }, tbl3).count(), *conn), (100));
    TEST_EQ(maybe_run(tbl.eq_join(R::row["a"], tbl2).count(), *conn), (100));
    TEST_DO(auto left = (R::expr(R::array(R::object("a", 1), R::object("a", 2), R::object("a", 3)))));
    TEST_DO(auto right = (R::expr(R::array(R::object("b", 2), R::object("b", 3)))));
    TEST_EQ(maybe_run(left.inner_join(right, [=](R::Var l, R::Var r){ return (*l)["a"]==(*r)["b"]; }).zip(), *conn), (R::Array{R::Object{{"a", 2}, {"b", 2}}, R::Object{{"a", 3}, {"b", 3}}}));
    TEST_EQ(maybe_run(left.outer_join(right, [=](R::Var l, R::Var r){ return (*l)["a"]==(*r)["b"]; }).zip(), *conn), (R::Array{R::Object{{"a", 1}}, R::Object{{"a", 2}, {"b", 2}}, R::Object{{"a", 3}, {"b", 3}}}));
    TEST_EQ(maybe_run(R::db("test").table_drop("test3"), *conn), (partial(R::Object{{"tables_dropped", 1}})));
    exit_section();
}
