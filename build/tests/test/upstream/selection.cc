// auto-generated by yaml_to_cxx.py from test/upstream/selection.yaml
#include "testlib.h"
void test_upstream_selection() {
    enter_section("test_upstream_selection: Tests that manipulation data in tables");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto tbl2 = (R::db("test").table("test2")));
    TEST_DO(auto tbl3 = (R::db("test").table("test3")));
    TEST_EQ(tbl.insert(R::range(100).map([=](R::Var i){ return R::object("id", *i, "a", *i % 4); })).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",100}}));
    TEST_EQ(tbl2.insert(R::range(100).map([=](R::Var i){ return R::object("id", *i, "b", *i % 4); })).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",100}}));
    TEST_EQ(tbl.type_of().run(*conn), ("TABLE"));
    TEST_EQ(R::db("missing").table("bar").run(*conn), (err("RqlRuntimeError", "Database `missing` does not exist.", R::Array{0})));
    TEST_EQ(R::db("test").table("missing").run(*conn), (err("RqlRuntimeError", "Table `test.missing` does not exist.", R::Array{0})));
    TEST_EQ(tbl3.insert(R::object("id", "Здравствуй", "value", "Земля!")).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl3.get("Здравствуй").run(*conn), (R::Object{{"id","Здравствуй"}, {"value","Земля!"}}));
    TEST_EQ(tbl3.filter(R::object("value", "Земля!")).run(*conn), (R::Array{R::Object{{"id","Здравствуй"}, {"value","Земля!"}}}));
    TEST_EQ(R::db("%").run(*conn), (err("RqlRuntimeError", "Database name `%` invalid (Use A-Za-z0-9_ only).", R::Array{0})));
    TEST_EQ(R::db("test").table("%").run(*conn), (err("RqlRuntimeError", "Table name `%` invalid (Use A-Za-z0-9_ only).", R::Array{0})));
    TEST_EQ(tbl.count().run(*conn), (100));
    TEST_EQ(R::table("test2", R::OptArgs{{"use_outdated", R::expr(true)}}).count().run(*conn), (100));
    TEST_EQ(R::db("test").table("test2", R::OptArgs{{"use_outdated", R::expr(true)}}).count().run(*conn), (100));
    TEST_EQ(tbl.get(20).run(*conn), (R::Object{{"id",20}, {"a",0}}));
    TEST_EQ(tbl.get(2000).run(*conn), (R::Nil()));
    TEST_DO(auto tblpkey = (R::db("test").table("testpkey")));
    TEST_EQ(tblpkey.insert(R::object("foo", 10, "a", 10)).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tblpkey.get(10).run(*conn), (R::Object{{"foo",10}, {"a",10}}));
    TEST_EQ(tbl.between(20, 29).count().run(*conn), (9));
    TEST_EQ(tbl.between(-10, 9).count().run(*conn), (9));
    TEST_EQ(tbl.between(80, 2000).count().run(*conn), (20));
    TEST_EQ(tbl.between(-2000, 2000).count().run(*conn), (100));
    TEST_EQ(tbl.between(20, 29, R::OptArgs{{"right_bound", R::expr("closed")}}).count().run(*conn), (10));
    TEST_EQ(tbl.between(-10, 9, R::OptArgs{{"right_bound", R::expr("closed")}}).count().run(*conn), (10));
    TEST_EQ(tbl.between(80, 2000, R::OptArgs{{"right_bound", R::expr("closed")}}).count().run(*conn), (20));
    TEST_EQ(tbl.between(-2000, 2000, R::OptArgs{{"right_bound", R::expr("closed")}}).count().run(*conn), (100));
    TEST_EQ(tbl.between(20, 29, R::OptArgs{{"left_bound", R::expr("open")}}).count().run(*conn), (8));
    TEST_EQ(tbl.between(-10, 9, R::OptArgs{{"left_bound", R::expr("open")}}).count().run(*conn), (9));
    TEST_EQ(tbl.between(80, 2000, R::OptArgs{{"left_bound", R::expr("open")}}).count().run(*conn), (19));
    TEST_EQ(tbl.between(-2000, 2000, R::OptArgs{{"left_bound", R::expr("open")}}).count().run(*conn), (100));
    TEST_EQ(R::expr(R::array(1, 2, 3)).between(-1, 2).run(*conn), (err("RqlRuntimeError", "Expected type TABLE_SLICE but found DATUM.", R::Array{0})));
    TEST_EQ(tbl.between(R::minval, 2).count().run(*conn), (2));
    TEST_EQ(tbl.between(R::minval, 2, R::OptArgs{{"right_bound", R::expr("closed")}}).count().run(*conn), (3));
    TEST_EQ(tbl.between(R::minval, 2, R::OptArgs{{"left_bound", R::expr("open")}}).count().run(*conn), (2));
    TEST_EQ(tbl.between(2, R::maxval).count().run(*conn), (98));
    TEST_EQ(tbl.between(R::Nil(), 2).count().run(*conn), (err("RqlRuntimeError", "Cannot use `null` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")));
    TEST_EQ(tbl.between(2, R::Nil()).count().run(*conn), (err("RqlRuntimeError", "Cannot use `null` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")));
    TEST_EQ(tbl.between(R::Nil(), R::Nil()).count().run(*conn), (err("RqlRuntimeError", "Cannot use `null` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")));
    TEST_EQ(tblpkey.between(9, 11).count().run(*conn), (1));
    TEST_EQ(tblpkey.between(11, 12).count().run(*conn), (0));
    TEST_EQ(tbl.filter([=](R::Var row){ return (*row)["a"]>2; }).count().run(*conn), (25));
    TEST_EQ(tbl.filter([=](R::Var row){ return R::expr(1); }).count().run(*conn), (100));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4, 5)).filter(R::row>2).filter(R::row>3).run(*conn), (R::Array{4, 5}));
    TEST_DO(auto nested = (R::expr(R::array(R::array(1, 2), R::array(3, 4), R::array(5, 6)))));
    TEST_EQ(nested.filter([=](R::Var x){ return (*x).filter([=](R::Var y){ return *y>=4; }).count()>0; }).run(*conn), (R::Array{R::Array{3, 4}, R::Array{5, 6}}));
    TEST_EQ(nested.filter(R::row.filter([=](R::Var y){ return *y>=4; }).count()>0).run(*conn), (R::Array{R::Array{3, 4}, R::Array{5, 6}}));
    TEST_EQ(nested.filter([=](R::Var x){ return (*x).filter(R::row>=4).count()>0; }).run(*conn), (err("RqlCompileError", "Cannot use r.row in nested queries.  Use functions instead.", R::Array{0})));
    TEST_EQ(R::expr(R::array(R::array(1, 2), R::array(3, 4), R::array(5, 6))).filter(R::row.filter(R::row>=4).count()>0).run(*conn), (err("RqlCompileError", "Cannot use r.row in nested queries.  Use functions instead.", R::Array{0})));
    TEST_EQ(R::expr(R::array(R::object("a", 1, "b", 1, "c", 3), R::object("a", 1, "b", 2, "c", 3))).filter(R::object("a", 1, "b", 2)).run(*conn), (R::Array{R::Object{{"c",3}, {"b",2}, {"a",1}}}));
    TEST_EQ(R::expr(R::array(R::object("a", 1, "b", 1, "c", 3), R::object("a", 1, "b", 2, "c", 3))).filter(R::object("a", 1)).run(*conn), (R::Array{R::Object{{"c",3}, {"b",1}, {"a",1}}, R::Object{{"c",3}, {"b",2}, {"a",1}}}));
    TEST_EQ(R::expr(R::array(R::object("a", 1, "b", 1, "c", 3), R::object("a", 1, "b", 2, "c", 3))).filter(R::object("a", R::row["b"])).run(*conn), (R::Array{R::Object{{"c",3}, {"b",1}, {"a",1}}}));
    TEST_EQ(R::expr(R::array(R::object("a", 1))).filter(R::object("b", 1)).run(*conn), (R::Array{}));
    TEST_EQ(tbl.count([=](R::Var row){ return R::object("a", 1); }).run(*conn), (25));
    TEST_EQ(R::expr(R::array(1, 2, 3, 1)).count(1).run(*conn), (2));
    TEST_EQ(R::expr(R::array(R::Nil(), 4, R::Nil(), "foo")).count(R::Nil()).run(*conn), (2));
    TEST_EQ((R::expr(5) + tbl).run(*conn), (err("RqlRuntimeError", "Expected type DATUM but found TABLE.", R::Array{0})));
    TEST_EQ(R::expr(R::array("test2", "test3", "testpkey")).for_each(R::db("test").table_drop(R::row)).run(*conn), (partial(R::Object{{"tables_dropped",3}})));
    exit_section();
}
