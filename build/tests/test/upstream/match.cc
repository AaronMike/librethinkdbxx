// auto-generated by yaml_to_cxx.py from test/upstream/match.yaml
#include "testlib.h"
void test_upstream_match() {
    enter_section("test_upstream_match: Tests for match");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(R::expr("abcdefg").match("a(b.e)|b(c.e)").run(*conn), (R::Object{{"str","bcde"}, {"groups",R::Array{R::Nil(), R::Object{{"start",2}, {"str","cde"}, {"end",5}}}}, {"start",1}, {"end",5}}));
    TEST_EQ(R::expr("abcdefg").match("a(b.e)|B(c.e)").run(*conn), (R::Nil()));
    TEST_EQ(R::expr("abcdefg").match("(?i)a(b.e)|B(c.e)").run(*conn), (R::Object{{"str","bcde"}, {"groups",R::Array{R::Nil(), R::Object{{"start",2}, {"str","cde"}, {"end",5}}}}, {"start",1}, {"end",5}}));
    TEST_EQ(R::expr(R::array("aba", "aca", "ada", "aea")).filter([=](R::Var row){ return (*row).match("a(.)a")["groups"][0]["str"].match("[cd]"); }).run(*conn), (R::Array{"aca", "ada"}));
    TEST_EQ(tbl.insert(R::array(R::object("id", 0, "a", "abc"), R::object("id", 1, "a", "ab"), R::object("id", 2, "a", "bc"))).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",3}}));
    TEST_EQ(tbl.filter([=](R::Var row){ return (*row)["a"].match("b"); }).order_by("id").run(*conn), (R::Array{R::Object{{"id",0}, {"a","abc"}}, R::Object{{"id",1}, {"a","ab"}}, R::Object{{"id",2}, {"a","bc"}}}));
    TEST_EQ(tbl.filter([=](R::Var row){ return (*row)["a"].match("ab"); }).order_by("id").run(*conn), (R::Array{R::Object{{"id",0}, {"a","abc"}}, R::Object{{"id",1}, {"a","ab"}}}));
    TEST_EQ(tbl.filter([=](R::Var row){ return (*row)["a"].match("ab$"); }).order_by("id").run(*conn), (R::Array{R::Object{{"id",1}, {"a","ab"}}}));
    TEST_EQ(tbl.filter([=](R::Var row){ return (*row)["a"].match("^b$"); }).order_by("id").run(*conn), (R::Array{}));
    TEST_EQ(R::expr("").match("ab\\9").run(*conn), (err("RqlRuntimeError", "Error in regexp `ab\\9` (portion `\\9`): invalid escape sequence: \\9", R::Array{})));
    exit_section();
}
