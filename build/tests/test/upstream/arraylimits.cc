// auto-generated by yaml_to_cxx.py from test/upstream/arraylimits.yaml
#include "testlib.h"
void test_upstream_arraylimits() {
    enter_section("test_upstream_arraylimits: Tests array limit variations");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(R::expr(R::array(1, 1, 1, 1)).union_(R::array(1, 1, 1, 1)).run(*conn), (R::Array{1, 1, 1, 1, 1, 1, 1, 1}));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).union_(R::array(5, 6, 7, 8)).run(*conn), (err("RqlRuntimeError", "Array over size limit `4`.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8)).run(*conn), (err("RqlRuntimeError", "Array over size limit `4`.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8)).run(*conn), (err("RqlRuntimeError", "Illegal array size limit `-1`.", R::Array{})));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8)).run(*conn), (err("RqlRuntimeError", "Illegal array size limit `0`.", R::Array{})));
    TEST_DO(auto ten_l = (R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))));
    TEST_DO(auto ten_f = ([=](R::Var l){ return (R::range(1, 11)); }));
    TEST_DO(auto huge_l = (R::expr(ten_l).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f)));
    TEST_EQ(huge_l.append(1).count().run(*conn), (100001));
    TEST_EQ(tbl.insert(R::object("id", 0, "array", huge_l.append(1))).run(*conn), (partial(R::Object{{"errors",1}, {"first_error","Array too large for disk writes (limit 100,000 elements)."}})));
    TEST_EQ(tbl.get(0).run(*conn), (R::Nil()));
    TEST_EQ(tbl.insert(R::object("id", 1, "array", ten_l)).run(*conn), (R::Object{{"deleted",0.0}, {"replaced",0.0}, {"unchanged",0.0}, {"errors",0.0}, {"skipped",0.0}, {"inserted",1}}));
    TEST_EQ(tbl.get(1).run(*conn), (R::Object{{"array",R::Array{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}}, {"id",1}}));
    exit_section();
}
