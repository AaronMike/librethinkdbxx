// auto-generated by yaml_to_cxx.py from test/upstream/limits.yaml
#include "testlib.h"
void test_upstream_limits() {
    enter_section("test_upstream_limits: Tests array limit variations");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_EQ(maybe_run(R::expr(R::array(1, 1, 1, 1)).union_(R::array(1, 1, 1, 1)), *conn, R::optargs("array_limit", 8)), (R::Array{1, 1, 1, 1, 1, 1, 1, 1}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).union_(R::array(5, 6, 7, 8)), *conn, R::optargs("array_limit", 4)), (err("ReqlResourceLimitError", "Array over size limit `4`.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8)), *conn, R::optargs("array_limit", 4)), (err("ReqlResourceLimitError", "Array over size limit `4`.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8)), *conn, R::optargs("array_limit", -1)), (err("ReqlQueryLogicError", "Illegal array size limit `-1`.  (Must be >= 1.)", R::Array{})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8)), *conn, R::optargs("array_limit", 0)), (err("ReqlQueryLogicError", "Illegal array size limit `0`.  (Must be >= 1.)", R::Array{})));
    TEST_DO(auto ten_l = (R::expr(R::array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))));
    TEST_DO(auto ten_f = ([=](R::Var l){ return (R::range(1, 11)); }));
    TEST_DO(auto huge_l = (R::expr(ten_l).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f).concat_map(ten_f)));
    TEST_EQ(maybe_run(huge_l.append(1).count(), *conn, R::optargs("array_limit", 100001)), (100001));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 0, "array", huge_l.append(1))), *conn, R::optargs("array_limit", 100001)), (partial(R::Object{{"errors", 1}, {"first_error", "Array too large for disk writes (limit 100,000 elements)."}})));
    TEST_EQ(maybe_run(tbl.get(0), *conn, R::optargs("array_limit", 100001)), (R::Nil()));
    TEST_EQ(maybe_run(tbl.insert(R::object("id", 1, "array", ten_l)), *conn), (R::Object{{"deleted", 0}, {"replaced", 0}, {"unchanged", 0}, {"errors", 0}, {"skipped", 0}, {"inserted", 1}}));
    TEST_EQ(maybe_run(tbl.get(1), *conn, R::optargs("array_limit", 4)), (R::Object{{"array", R::Array{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}}, {"id", 1}}));
    TEST_EQ(maybe_run(tbl.delete_().get_field("deleted"), *conn), (1));
    TEST_DO(auto c = (tbl.changes(R::OptArgs{{"squash", R::expr(1000000)}, {"changefeed_queue_size", R::expr(10)}}).run(*conn)));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 0), R::object("id", 1), R::object("id", 2), R::object("id", 3), R::object("id", 4), R::object("id", 5), R::object("id", 6))).get_field("inserted"), *conn), (7));
    TEST_EQ(maybe_run(fetch(c, 7), *conn), (bag(R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 0}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 1}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 2}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 3}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 4}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 5}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 6}}}}})));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 7), R::object("id", 8), R::object("id", 9), R::object("id", 10), R::object("id", 11), R::object("id", 12), R::object("id", 13))).get_field("inserted"), *conn), (7));
    TEST_EQ(maybe_run(fetch(c, 7), *conn), (bag(R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 7}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 8}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 9}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 10}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 11}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 12}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 13}}}}})));
    TEST_EQ(maybe_run(tbl.delete_().get_field("deleted"), *conn), (14));
    TEST_DO(auto c2 = (tbl.changes(R::OptArgs{{"squash", R::expr(1000000)}}).run(*conn, R::optargs("changefeed_queue_size", 10))));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 0), R::object("id", 1), R::object("id", 2), R::object("id", 3), R::object("id", 4), R::object("id", 5), R::object("id", 6))).get_field("inserted"), *conn), (7));
    TEST_EQ(maybe_run(fetch(c2, 7), *conn), (bag(R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 0}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 1}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 2}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 3}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 4}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 5}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 6}}}}})));
    TEST_EQ(maybe_run(tbl.insert(R::array(R::object("id", 7), R::object("id", 8), R::object("id", 9), R::object("id", 10), R::object("id", 11), R::object("id", 12), R::object("id", 13))).get_field("inserted"), *conn), (7));
    TEST_EQ(maybe_run(fetch(c2, 7), *conn), (bag(R::Array{R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 7}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 8}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 9}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 10}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 11}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 12}}}}, R::Object{{"old_val", R::Nil()}, {"new_val", R::Object{{"id", 13}}}}})));
    exit_section();
}
