// auto-generated by yaml_to_cxx.py from test/upstream/datum/string.yaml
#include "testlib.h"
void test_upstream_datum_string() {
    enter_section("test_upstream_datum_string: Tests of converstion to and from the RQL string type");
    TEST_DO(auto japanese_hello = (std::string("\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf", 15)));
    TEST_EQ(maybe_run(R::expr("str"), *conn), ("str"));
    TEST_EQ(maybe_run(R::expr("str"), *conn), ("str"));
    TEST_EQ(maybe_run(R::expr("str"), *conn), ("str"));
    TEST_EQ(maybe_run(R::expr(japanese_hello), *conn), ("\xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"));
    TEST_EQ(maybe_run(R::expr("foo").type_of(), *conn), ("STRING"));
    TEST_EQ(maybe_run(R::expr("foo").coerce_to("string"), *conn), ("foo"));
    TEST_EQ(maybe_run(R::expr("-1.2").coerce_to("NUMBER"), *conn), (-1.2));
    TEST_EQ(maybe_run(R::expr("--1.2").coerce_to("NUMBER"), *conn), (err("ReqlQueryLogicError", "Could not coerce `--1.2` to NUMBER.", R::Array{})));
    TEST_EQ(maybe_run(R::expr("-1.2-").coerce_to("NUMBER"), *conn), (err("ReqlQueryLogicError", "Could not coerce `-1.2-` to NUMBER.", R::Array{})));
    TEST_EQ(maybe_run(R::expr("0xa").coerce_to("NUMBER"), *conn), (10));
    TEST_EQ(maybe_run(R::expr("inf").coerce_to("NUMBER"), *conn), (err("ReqlQueryLogicError", "Non-finite number: inf", R::Array{})));
    TEST_EQ(maybe_run(R::expr("hello, world!").count(), *conn), (13));
    TEST_EQ(maybe_run(R::expr(japanese_hello).count(), *conn), (5));
    TEST_EQ(maybe_run(R::expr("hello").slice(1), *conn), ("ello"));
    TEST_EQ(maybe_run(R::expr("hello").slice(-1), *conn), ("o"));
    TEST_EQ(maybe_run(R::expr("hello").slice(-4, 3), *conn), ("el"));
    TEST_EQ(maybe_run(R::expr("hello").slice(-99), *conn), ("hello"));
    TEST_EQ(maybe_run(R::expr("hello").slice(0), *conn), ("hello"));
    TEST_EQ(maybe_run(R::expr(japanese_hello).slice(1), *conn), ("\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"));
    TEST_EQ(maybe_run(R::expr(japanese_hello).slice(1, 2), *conn), ("\xe3\x82\x93"));
    TEST_EQ(maybe_run(R::expr(japanese_hello).slice(-3), *conn), ("\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"));
    TEST_EQ(maybe_run(R::expr("").split(), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("").split(R::Nil()), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("").split(" "), *conn), (R::Array{""}));
    TEST_EQ(maybe_run(R::expr("").split(""), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("").split(R::Nil(), 5), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("").split(" ", 5), *conn), (R::Array{""}));
    TEST_EQ(maybe_run(R::expr("").split("", 5), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(), *conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(R::Nil()), *conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" "), *conn), (R::Array{"aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(""), *conn), (R::Array{"a", "a", "a", "a", " ", "b", "b", "b", "b", " ", " ", "c", "c", "c", "c", " "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("b"), *conn), (R::Array{"aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("bb"), *conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" bbbb  "), *conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb"), *conn), (R::Array{"aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  "), *conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  "), *conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(R::Nil(), 3), *conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" ", 5), *conn), (R::Array{"aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("", 5), *conn), (R::Array{"a", "a", "a", "a", " ", "bbbb  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("b", 5), *conn), (R::Array{"aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("bb", 3), *conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" bbbb  ", 2), *conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6), *conn), (R::Array{"aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2), *conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3), *conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(R::Nil(), 2), *conn), (R::Array{"aaaa", "bbbb", "cccc "}));
    TEST_EQ(maybe_run(R::expr("a  b  ").split(R::Nil(), 2), *conn), (R::Array{"a", "b"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" ", 4), *conn), (R::Array{"aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("", 4), *conn), (R::Array{"a", "a", "a", "a", " bbbb  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("b", 4), *conn), (R::Array{"aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("bb", 2), *conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" bbbb  ", 1), *conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5), *conn), (R::Array{"aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1), *conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2), *conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(R::Nil(), 1), *conn), (R::Array{"aaaa", "bbbb  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" ", 2), *conn), (R::Array{"aaaa", "bbbb", " cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("", 2), *conn), (R::Array{"a", "a", "aa bbbb  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("b", 2), *conn), (R::Array{"aaaa ", "", "bb  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split("bb", 2), *conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc ").split(" bbbb  ", 2), *conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2), *conn), (R::Array{"aaaa ", "", "  cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2), *conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2), *conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("  ").split(), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("  ").split(R::Nil()), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("  ").split(" "), *conn), (R::Array{"", "", ""}));
    TEST_EQ(maybe_run(R::expr("  ").split(R::Nil(), 5), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr("  ").split(" ", 5), *conn), (R::Array{"", "", ""}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(), *conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(R::Nil()), *conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" "), *conn), (R::Array{"", "", "aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("b"), *conn), (R::Array{"  aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("bb"), *conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" bbbb  "), *conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb"), *conn), (R::Array{"  aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  "), *conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  "), *conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(R::Nil(), 3), *conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" ", 5), *conn), (R::Array{"", "", "aaaa", "bbbb", "", "cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("b", 5), *conn), (R::Array{"  aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("bb", 3), *conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2), *conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6), *conn), (R::Array{"  aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2), *conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3), *conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(R::Nil(), 2), *conn), (R::Array{"aaaa", "bbbb", "cccc "}));
    TEST_EQ(maybe_run(R::expr("a  b  ").split(R::Nil(), 2), *conn), (R::Array{"a", "b"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" ", 4), *conn), (R::Array{"", "", "aaaa", "bbbb", " cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("b", 4), *conn), (R::Array{"  aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("bb", 2), *conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" bbbb  ", 1), *conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5), *conn), (R::Array{"  aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1), *conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2), *conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(R::Nil(), 1), *conn), (R::Array{"aaaa", "bbbb  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" ", 2), *conn), (R::Array{"", "", "aaaa bbbb  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("b", 2), *conn), (R::Array{"  aaaa ", "", "bb  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split("bb", 2), *conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2), *conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2), *conn), (R::Array{"  aaaa ", "", "  cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2), *conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(maybe_run(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2), *conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(maybe_run(R::expr("abc-dEf-GHJ").upcase(), *conn), ("ABC-DEF-GHJ"));
    TEST_EQ(maybe_run(R::expr("abc-dEf-GHJ").downcase(), *conn), ("abc-def-ghj"));
    TEST_EQ(maybe_run(R::expr("f\xc3\xa9oo").split(""), *conn), (R::Array{"f", "\xc3\xa9", "o", "o"}));
    TEST_EQ(maybe_run(R::expr("fe\xcc\x81oo").split(""), *conn), (R::Array{"f", "e\xcc\x81", "o", "o"}));
    TEST_EQ(maybe_run(R::expr("foo bar\x09\x62\x61z\x0aquux\x0d\x66red\x0b\x62\x61rney\x0cwilma").split(), *conn), (R::Array{"foo", "bar", "baz", "quux", "fred", "barney", "wilma"}));
    TEST_EQ(maybe_run(R::expr("foo\xc2\xa0\x62\x61r\xe2\x80\x81\x62\x61z\xe2\x81\xa0quux\xe2\x80\xa8\x66red\xe2\x80\xa8\x62\x61rney\xe2\x80\xa9wilma\xc2\x85\x62\x65tty\xe2\x80\x8b").split(), *conn), (R::Array{"foo", "bar", "baz\xe2\x81\xa0quux", "fred", "barney", "wilma", "betty\xe2\x80\x8b"}));
    exit_section();
}
