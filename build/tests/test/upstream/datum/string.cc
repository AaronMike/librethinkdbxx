// auto-generated by yaml_to_cxx.py from test/upstream/datum/string.yaml
#include "testlib.h"
void test_upstream_datum_string() {
    enter_section("test_upstream_datum_string: Tests of converstion to and from the RQL string type");
    TEST_EQ(R::expr("str").run(*conn), ("str"));
    TEST_EQ(R::expr("str").run(*conn), ("str"));
    TEST_EQ(R::expr("str").run(*conn), ("str"));
    TEST_EQ(R::expr("こんにちは").run(*conn), ("こんにちは"));
    TEST_EQ(R::expr("foo").type_of().run(*conn), ("STRING"));
    TEST_EQ(R::expr("foo").coerce_to("string").run(*conn), ("foo"));
    TEST_EQ(R::expr("-1.2").coerce_to("NUMBER").run(*conn), (-1.2));
    TEST_EQ(R::expr("--1.2").coerce_to("NUMBER").run(*conn), (err("RqlRuntimeError", "Could not coerce `--1.2` to NUMBER.", R::Array{})));
    TEST_EQ(R::expr("-1.2-").coerce_to("NUMBER").run(*conn), (err("RqlRuntimeError", "Could not coerce `-1.2-` to NUMBER.", R::Array{})));
    TEST_EQ(R::expr("0xa").coerce_to("NUMBER").run(*conn), (10));
    TEST_EQ(R::expr("inf").coerce_to("NUMBER").run(*conn), (err("RqlRuntimeError", "Non-finite number: inf", R::Array{})));
    TEST_EQ(R::expr("").split().run(*conn), (R::Array{}));
    TEST_EQ(R::expr("").split(R::Nil()).run(*conn), (R::Array{}));
    TEST_EQ(R::expr("").split(" ").run(*conn), (R::Array{""}));
    TEST_EQ(R::expr("").split("").run(*conn), (R::Array{}));
    TEST_EQ(R::expr("").split(R::Nil(), 5).run(*conn), (R::Array{}));
    TEST_EQ(R::expr("").split(" ", 5).run(*conn), (R::Array{""}));
    TEST_EQ(R::expr("").split("", 5).run(*conn), (R::Array{}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split().run(*conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(R::Nil()).run(*conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" ").run(*conn), (R::Array{"aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("").run(*conn), (R::Array{"a", "a", "a", "a", " ", "b", "b", "b", "b", " ", " ", "c", "c", "c", "c", " "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("b").run(*conn), (R::Array{"aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("bb").run(*conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" bbbb  ").run(*conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb").run(*conn), (R::Array{"aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ").run(*conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ").run(*conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(R::Nil(), 3).run(*conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" ", 5).run(*conn), (R::Array{"aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("", 5).run(*conn), (R::Array{"a", "a", "a", "a", " ", "bbbb  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("b", 5).run(*conn), (R::Array{"aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("bb", 3).run(*conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" bbbb  ", 2).run(*conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6).run(*conn), (R::Array{"aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2).run(*conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3).run(*conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(R::Nil(), 2).run(*conn), (R::Array{"aaaa", "bbbb", "cccc "}));
    TEST_EQ(R::expr("a  b  ").split(R::Nil(), 2).run(*conn), (R::Array{"a", "b"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" ", 4).run(*conn), (R::Array{"aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("", 4).run(*conn), (R::Array{"a", "a", "a", "a", " bbbb  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("b", 4).run(*conn), (R::Array{"aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("bb", 2).run(*conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" bbbb  ", 1).run(*conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5).run(*conn), (R::Array{"aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1).run(*conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2).run(*conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(R::Nil(), 1).run(*conn), (R::Array{"aaaa", "bbbb  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" ", 2).run(*conn), (R::Array{"aaaa", "bbbb", " cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("", 2).run(*conn), (R::Array{"a", "a", "aa bbbb  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("b", 2).run(*conn), (R::Array{"aaaa ", "", "bb  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split("bb", 2).run(*conn), (R::Array{"aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc ").split(" bbbb  ", 2).run(*conn), (R::Array{"aaaa", "cccc "}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2).run(*conn), (R::Array{"aaaa ", "", "  cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2).run(*conn), (R::Array{"aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2).run(*conn), (R::Array{"aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("  ").split().run(*conn), (R::Array{}));
    TEST_EQ(R::expr("  ").split(R::Nil()).run(*conn), (R::Array{}));
    TEST_EQ(R::expr("  ").split(" ").run(*conn), (R::Array{"", "", ""}));
    TEST_EQ(R::expr("  ").split(R::Nil(), 5).run(*conn), (R::Array{}));
    TEST_EQ(R::expr("  ").split(" ", 5).run(*conn), (R::Array{"", "", ""}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split().run(*conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(R::Nil()).run(*conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" ").run(*conn), (R::Array{"", "", "aaaa", "bbbb", "", "cccc", ""}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("b").run(*conn), (R::Array{"  aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("bb").run(*conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" bbbb  ").run(*conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb").run(*conn), (R::Array{"  aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ").run(*conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ").run(*conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(R::Nil(), 3).run(*conn), (R::Array{"aaaa", "bbbb", "cccc"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" ", 5).run(*conn), (R::Array{"", "", "aaaa", "bbbb", "", "cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("b", 5).run(*conn), (R::Array{"  aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("bb", 3).run(*conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2).run(*conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 6).run(*conn), (R::Array{"  aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2).run(*conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 3).run(*conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(R::Nil(), 2).run(*conn), (R::Array{"aaaa", "bbbb", "cccc "}));
    TEST_EQ(R::expr("a  b  ").split(R::Nil(), 2).run(*conn), (R::Array{"a", "b"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" ", 4).run(*conn), (R::Array{"", "", "aaaa", "bbbb", " cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("b", 4).run(*conn), (R::Array{"  aaaa ", "", "", "", "  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("bb", 2).run(*conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" bbbb  ", 1).run(*conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 5).run(*conn), (R::Array{"  aaaa ", "", "  cccc b d ", " e ", "", " f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 1).run(*conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2).run(*conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(R::Nil(), 1).run(*conn), (R::Array{"aaaa", "bbbb  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" ", 2).run(*conn), (R::Array{"", "", "aaaa bbbb  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("b", 2).run(*conn), (R::Array{"  aaaa ", "", "bb  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split("bb", 2).run(*conn), (R::Array{"  aaaa ", "", "  cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc ").split(" bbbb  ", 2).run(*conn), (R::Array{"  aaaa", "cccc "}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split("bb", 2).run(*conn), (R::Array{"  aaaa ", "", "  cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb f").split(" bbbb  ", 2).run(*conn), (R::Array{"  aaaa", "cccc b d bb e bbbb f"}));
    TEST_EQ(R::expr("  aaaa bbbb  cccc b d bb e bbbb  f").split(" bbbb  ", 2).run(*conn), (R::Array{"  aaaa", "cccc b d bb e", "f"}));
    TEST_EQ(R::expr("abc-dEf-GHJ").upcase().run(*conn), ("ABC-DEF-GHJ"));
    TEST_EQ(R::expr("abc-dEf-GHJ").downcase().run(*conn), ("abc-def-ghj"));
    exit_section();
}
