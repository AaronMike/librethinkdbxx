// auto-generated by yaml_to_cxx.py from test/upstream/datum/object.yaml
#include "testlib.h"
void test_upstream_datum_object() {
    enter_section("test_upstream_datum_object: Tests conversion to and from the RQL object type");
    TEST_EQ(R::expr(R::object()).run(*conn), (R::Object{}));
    TEST_EQ(R::expr(R::object("a", 1)).run(*conn), (R::Object{{"a",1}}));
    TEST_EQ(R::expr(R::object("a", 1, "b", "two", "c", true)).run(*conn), (R::Object{{"a",1}, {"b","two"}, {"c",true}}));
    TEST_EQ(R::expr(R::object("a", R::expr(1))).run(*conn), (R::Object{{"a",1}}));
    TEST_EQ(R::expr(R::object("a", R::object("b", R::array(R::object("c", 2), "a", 4)))).run(*conn), (R::Object{{"a",R::Object{{"b",R::Array{R::Object{{"c",2}}, "a", 4}}}}}));
    TEST_EQ(R::expr(R::object("a", 1)).type_of().run(*conn), ("OBJECT"));
    TEST_EQ(R::expr(R::object("a", 1)).coerce_to("string").run(*conn), ("{\n	\"a\":	1\n}"));
    TEST_EQ(R::expr(R::object("a", 1)).coerce_to("object").run(*conn), (R::Object{{"a",1}}));
    TEST_EQ(R::expr(R::object("a", 1)).coerce_to("array").run(*conn), (R::Array{R::Array{"a", 1}}));
    TEST_EQ(R::expr(R::object(12, "a")).run(*conn), (err_regex("RqlDriverError", "Object keys must be strings")));
    TEST_EQ(R::expr(R::object("a", R::object(12, "b"))).run(*conn), (err_regex("RqlDriverError", "Object keys must be strings")));
    TEST_EQ(R::object().run(*conn), (R::Object{}));
    TEST_EQ(R::object("a", 1, "b", 2).run(*conn), (R::Object{{"a",1}, {"b",2}}));
    TEST_EQ(R::object(R::expr("c") + "d", 3).run(*conn), (R::Object{{"cd",3}}));
    TEST_EQ(R::object("o", "d", "d").run(*conn), (err("RqlRuntimeError", "OBJECT expects an even number of arguments (but found 3).", R::Array{})));
    TEST_EQ(R::object(1, 1).run(*conn), (err("RqlRuntimeError", "Expected type STRING but found NUMBER.", R::Array{})));
    TEST_EQ(R::object("e", 4, "e", 5).run(*conn), (err("RqlRuntimeError", "Duplicate key `e` in object.  (got `4` and `5` as values)", R::Array{})));
    TEST_EQ(R::object("g", R::db("test")).run(*conn), (err("RqlRuntimeError", "Expected type DATUM but found DATABASE.", R::Array{})));
    exit_section();
}
