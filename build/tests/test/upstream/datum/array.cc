// auto-generated by yaml_to_cxx.py from test/upstream/datum/array.yaml
#include "testlib.h"
void test_upstream_datum_array() {
    enter_section("test_upstream_datum_array: Tests conversion to and from the RQL array type");
    TEST_EQ(R::expr(R::array()).run(*conn), (R::Array{}));
    TEST_EQ(R::expr(R::array(1)).run(*conn), (R::Array{1}));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4, 5)).run(*conn), (R::Array{1, 2, 3, 4, 5}));
    TEST_EQ(R::expr(R::array()).type_of().run(*conn), ("ARRAY"));
    TEST_EQ(R::expr(R::array(1, 2)).coerce_to("string").run(*conn), ("[1, 2]"));
    TEST_EQ(R::expr(R::array(1, 2)).coerce_to("STRING").run(*conn), ("[1, 2]"));
    TEST_EQ(R::expr(R::array(1, 2)).coerce_to("array").run(*conn), (R::Array{1, 2}));
    TEST_EQ(R::expr(R::array(1, 2)).coerce_to("number").run(*conn), (err("RqlRuntimeError", "Cannot coerce ARRAY to NUMBER.", R::Array{0})));
    TEST_EQ(R::expr(R::array(R::array("a", 1), R::array("b", 2))).coerce_to("object").run(*conn), (R::Object{{"a",1}, {"b",2}}));
    TEST_EQ(R::expr(R::array(R::expr(1))).run(*conn), (R::Array{1}));
    TEST_EQ(R::expr(R::array(1, 3, 4)).insert_at(1, 2).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(R::expr(R::array(2, 3)).insert_at(0, 1).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(R::expr(R::array(1, 2, 3)).insert_at(-1, 4).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(R::expr(R::array(1, 2, 3)).insert_at(3, 4).run(*conn), (R::Array{1, 2, 3, 4}));
    R::expr(3).do_([=](R::Var x){ return R::expr(R::array(1, 2, 3)).insert_at(*x, 4); }).run(*conn);
    TEST_EQ(R::expr(R::array(1, 2, 3)).insert_at(4, 5).run(*conn), (err("RqlRuntimeError", "Index `4` out of bounds for array of size: `3`.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).insert_at(-5, -1).run(*conn), (err("RqlRuntimeError", "Index out of bounds: -5", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).insert_at(1.5, 1).run(*conn), (err("RqlRuntimeError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).insert_at(R::Nil(), 1).run(*conn), (err("RqlRuntimeError", "Expected type NUMBER but found NULL.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 4)).splice_at(1, R::array(2, 3)).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(R::expr(R::array(3, 4)).splice_at(0, R::array(1, 2)).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(R::expr(R::array(1, 2)).splice_at(2, R::array(3, 4)).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(R::expr(R::array(1, 2)).splice_at(-1, R::array(3, 4)).run(*conn), (R::Array{1, 2, 3, 4}));
    R::expr(2).do_([=](R::Var x){ return R::expr(R::array(1, 2)).splice_at(*x, R::array(3, 4)); }).run(*conn);
    TEST_EQ(R::expr(R::array(1, 2)).splice_at(3, R::array(3, 4)).run(*conn), (err("RqlRuntimeError", "Index `3` out of bounds for array of size: `2`.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2)).splice_at(-4, R::array(3, 4)).run(*conn), (err("RqlRuntimeError", "Index out of bounds: -4", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).splice_at(1.5, R::array(1)).run(*conn), (err("RqlRuntimeError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).splice_at(R::Nil(), R::array(1)).run(*conn), (err("RqlRuntimeError", "Expected type NUMBER but found NULL.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 4)).splice_at(1, 2).run(*conn), (err("RqlRuntimeError", "Expected type ARRAY but found NUMBER.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).delete_at(0).run(*conn), (R::Array{2, 3, 4}));
    R::expr(0).do_([=](R::Var x){ return R::expr(R::array(1, 2, 3, 4)).delete_at(*x); }).run(*conn);
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).delete_at(-1).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).delete_at(1, 3).run(*conn), (R::Array{1, 4}));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).delete_at(4, 4).run(*conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(R::expr(R::array()).delete_at(0, 0).run(*conn), (R::Array{}));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).delete_at(1, -1).run(*conn), (R::Array{1, 4}));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).delete_at(4).run(*conn), (err("RqlRuntimeError", "Index `4` out of bounds for array of size: `4`.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).delete_at(-5).run(*conn), (err("RqlRuntimeError", "Index out of bounds: -5", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).delete_at(1.5).run(*conn), (err("RqlRuntimeError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).delete_at(R::Nil()).run(*conn), (err("RqlRuntimeError", "Expected type NUMBER but found NULL.", R::Array{0})));
    TEST_EQ(R::expr(R::array(0, 2, 3)).change_at(0, 1).run(*conn), (R::Array{1, 2, 3}));
    R::expr(1).do_([=](R::Var x){ return R::expr(R::array(0, 2, 3)).change_at(0, *x); }).run(*conn);
    TEST_EQ(R::expr(R::array(1, 0, 3)).change_at(1, 2).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(R::expr(R::array(1, 2, 0)).change_at(2, 3).run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(R::expr(R::array(1, 2, 3)).change_at(3, 4).run(*conn), (err("RqlRuntimeError", "Index `3` out of bounds for array of size: `3`.", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3, 4)).change_at(-5, 1).run(*conn), (err("RqlRuntimeError", "Index out of bounds: -5", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).change_at(1.5, 1).run(*conn), (err("RqlRuntimeError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(R::expr(R::array(1, 2, 3)).change_at(R::Nil(), 1).run(*conn), (err("RqlRuntimeError", "Expected type NUMBER but found NULL.", R::Array{0})));
    exit_section();
}
