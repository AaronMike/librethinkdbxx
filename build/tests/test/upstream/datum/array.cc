// auto-generated by yaml_to_cxx.py from test/upstream/datum/array.yaml
#include "testlib.h"
void test_upstream_datum_array() {
    enter_section("test_upstream_datum_array: Tests conversion to and from the RQL array type");
    TEST_EQ(maybe_run(R::expr(R::array()), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr(R::array(1)), *conn), (R::Array{1}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4, 5)), *conn), (R::Array{1, 2, 3, 4, 5}));
    TEST_EQ(maybe_run(R::expr(R::array()).type_of(), *conn), ("ARRAY"));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).coerce_to("string"), *conn), ("[1,2]"));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).coerce_to("STRING"), *conn), ("[1,2]"));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).coerce_to("array"), *conn), (R::Array{1, 2}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).coerce_to("number"), *conn), (err("ReqlQueryLogicError", "Cannot coerce ARRAY to NUMBER.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(R::array("a", 1), R::array("b", 2))).coerce_to("object"), *conn), (R::Object{{"a", 1}, {"b", 2}}));
    TEST_EQ(maybe_run(R::expr(R::array(R::array())).coerce_to("object"), *conn), (err("ReqlQueryLogicError", "Expected array of size 2, but got size 0.")));
    TEST_EQ(maybe_run(R::expr(R::array(R::array("1", 2, 3))).coerce_to("object"), *conn), (err("ReqlQueryLogicError", "Expected array of size 2, but got size 3.")));
    TEST_EQ(maybe_run(R::expr(R::array(R::expr(1))), *conn), (R::Array{1}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 3, 4)).insert_at(1, 2), *conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(maybe_run(R::expr(R::array(2, 3)).insert_at(0, 1), *conn), (R::Array{1, 2, 3}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).insert_at(-1, 4), *conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).insert_at(3, 4), *conn), (R::Array{1, 2, 3, 4}));
    TEST_DO(maybe_run(R::expr(3).do_([=](R::Var x){ return R::expr(R::array(1, 2, 3)).insert_at(*x, 4); }), *conn));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).insert_at(4, 5), *conn), (err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `3`.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).insert_at(-5, -1), *conn), (err("ReqlNonExistenceError", "Index out of bounds: -5", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).insert_at(1.5, 1), *conn), (err("ReqlQueryLogicError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).insert_at(R::Nil(), 1), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 4)).splice_at(1, R::array(2, 3)), *conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(maybe_run(R::expr(R::array(3, 4)).splice_at(0, R::array(1, 2)), *conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).splice_at(2, R::array(3, 4)), *conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).splice_at(-1, R::array(3, 4)), *conn), (R::Array{1, 2, 3, 4}));
    TEST_DO(maybe_run(R::expr(2).do_([=](R::Var x){ return R::expr(R::array(1, 2)).splice_at(*x, R::array(3, 4)); }), *conn));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).splice_at(3, R::array(3, 4)), *conn), (err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `2`.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2)).splice_at(-4, R::array(3, 4)), *conn), (err("ReqlNonExistenceError", "Index out of bounds: -4", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).splice_at(1.5, R::array(1)), *conn), (err("ReqlQueryLogicError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).splice_at(R::Nil(), R::array(1)), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 4)).splice_at(1, 2), *conn), (err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).delete_at(0), *conn), (R::Array{2, 3, 4}));
    TEST_DO(maybe_run(R::expr(0).do_([=](R::Var x){ return R::expr(R::array(1, 2, 3, 4)).delete_at(*x); }), *conn));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).delete_at(-1), *conn), (R::Array{1, 2, 3}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).delete_at(1, 3), *conn), (R::Array{1, 4}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).delete_at(4, 4), *conn), (R::Array{1, 2, 3, 4}));
    TEST_EQ(maybe_run(R::expr(R::array()).delete_at(0, 0), *conn), (R::Array{}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).delete_at(1, -1), *conn), (R::Array{1, 4}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).delete_at(4), *conn), (err("ReqlNonExistenceError", "Index `4` out of bounds for array of size: `4`.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).delete_at(-5), *conn), (err("ReqlNonExistenceError", "Index out of bounds: -5", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).delete_at(1.5), *conn), (err("ReqlQueryLogicError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).delete_at(R::Nil()), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(0, 2, 3)).change_at(0, 1), *conn), (R::Array{1, 2, 3}));
    TEST_DO(maybe_run(R::expr(1).do_([=](R::Var x){ return R::expr(R::array(0, 2, 3)).change_at(0, *x); }), *conn));
    TEST_EQ(maybe_run(R::expr(R::array(1, 0, 3)).change_at(1, 2), *conn), (R::Array{1, 2, 3}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 0)).change_at(2, 3), *conn), (R::Array{1, 2, 3}));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).change_at(3, 4), *conn), (err("ReqlNonExistenceError", "Index `3` out of bounds for array of size: `3`.", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3, 4)).change_at(-5, 1), *conn), (err("ReqlNonExistenceError", "Index out of bounds: -5", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).change_at(1.5, 1), *conn), (err("ReqlQueryLogicError", "Number not an integer: 1.5", R::Array{0})));
    TEST_EQ(maybe_run(R::expr(R::array(1, 2, 3)).change_at(R::Nil(), 1), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{0})));
    exit_section();
}
