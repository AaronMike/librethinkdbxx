// auto-generated by yaml_to_cxx.py from test/upstream/datum/binary.yaml
#include "testlib.h"
void test_upstream_datum_binary() {
    enter_section("test_upstream_datum_binary: Tests of converstion to and from the RQL binary type");
    TEST_DO(auto s = (""));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (0));
    TEST_DO(s = ("\x00"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (1));
    TEST_DO(s = ("\x00\x42"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (2));
    TEST_DO(s = ("\x00\xfez"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (3));
    TEST_DO(s = ("\xed\xfe\x00\xba"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (4));
    TEST_DO(s = ("P\xf9\x00w\xf9"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (5));
    TEST_DO(s = ("/\xe3\xb5W\x00\x92"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (6));
    TEST_DO(s = ("\xa9\x43T\xe9\x00\xf8\xfb"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (7));
    TEST_DO(s = ("W\xbb\xe5\x82\x8b\xd3\x00\xf9"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (8));
    TEST_DO(s = ("D\x1b>\x00\x13\x19)*\xbf"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (9));
    TEST_DO(s = ("\x8a\x1d\x09\x00]`k.p\xd9"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (10));
    TEST_DO(s = ("\x00\xafGK8\x99\x14\x8d\x8f\x10Q"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (11));
    TEST_DO(s = ("E9\x00\xf7\xc2\x37\xfd\xe0\x38\x82@\xa9"));
    TEST_EQ(R::binary(s).run(*conn), (s));
    TEST_EQ(R::binary(s).count().run(*conn), (12));
    TEST_DO(auto a = ("\x00"));
    TEST_DO(auto b = ("\x00\x01"));
    TEST_DO(auto c = ("\x01"));
    TEST_DO(auto d = ("p\""));
    TEST_DO(auto e = ("\x80"));
    TEST_DO(auto f = ("\xfe"));
    TEST_EQ(R::binary(a).eq(R::binary(a)).run(*conn), (true));
    TEST_EQ(R::binary(a).le(R::binary(a)).run(*conn), (true));
    TEST_EQ(R::binary(a).ge(R::binary(a)).run(*conn), (true));
    TEST_EQ(R::binary(a).ne(R::binary(a)).run(*conn), (false));
    TEST_EQ(R::binary(a).lt(R::binary(a)).run(*conn), (false));
    TEST_EQ(R::binary(a).gt(R::binary(a)).run(*conn), (false));
    TEST_EQ(R::binary(a).ne(R::binary(b)).run(*conn), (true));
    TEST_EQ(R::binary(a).lt(R::binary(b)).run(*conn), (true));
    TEST_EQ(R::binary(a).le(R::binary(b)).run(*conn), (true));
    TEST_EQ(R::binary(a).ge(R::binary(b)).run(*conn), (false));
    TEST_EQ(R::binary(a).gt(R::binary(b)).run(*conn), (false));
    TEST_EQ(R::binary(a).eq(R::binary(b)).run(*conn), (false));
    TEST_EQ(R::binary(b).ne(R::binary(c)).run(*conn), (true));
    TEST_EQ(R::binary(b).lt(R::binary(c)).run(*conn), (true));
    TEST_EQ(R::binary(b).le(R::binary(c)).run(*conn), (true));
    TEST_EQ(R::binary(b).ge(R::binary(c)).run(*conn), (false));
    TEST_EQ(R::binary(b).gt(R::binary(c)).run(*conn), (false));
    TEST_EQ(R::binary(b).eq(R::binary(c)).run(*conn), (false));
    TEST_EQ(R::binary(c).ne(R::binary(d)).run(*conn), (true));
    TEST_EQ(R::binary(c).lt(R::binary(d)).run(*conn), (true));
    TEST_EQ(R::binary(c).le(R::binary(d)).run(*conn), (true));
    TEST_EQ(R::binary(c).ge(R::binary(d)).run(*conn), (false));
    TEST_EQ(R::binary(c).gt(R::binary(d)).run(*conn), (false));
    TEST_EQ(R::binary(c).eq(R::binary(d)).run(*conn), (false));
    TEST_EQ(R::binary(d).ne(R::binary(e)).run(*conn), (true));
    TEST_EQ(R::binary(d).lt(R::binary(e)).run(*conn), (true));
    TEST_EQ(R::binary(d).le(R::binary(e)).run(*conn), (true));
    TEST_EQ(R::binary(d).ge(R::binary(e)).run(*conn), (false));
    TEST_EQ(R::binary(d).gt(R::binary(e)).run(*conn), (false));
    TEST_EQ(R::binary(d).eq(R::binary(e)).run(*conn), (false));
    TEST_EQ(R::binary(e).ne(R::binary(f)).run(*conn), (true));
    TEST_EQ(R::binary(e).lt(R::binary(f)).run(*conn), (true));
    TEST_EQ(R::binary(e).le(R::binary(f)).run(*conn), (true));
    TEST_EQ(R::binary(e).ge(R::binary(f)).run(*conn), (false));
    TEST_EQ(R::binary(e).gt(R::binary(f)).run(*conn), (false));
    TEST_EQ(R::binary(e).eq(R::binary(f)).run(*conn), (false));
    TEST_EQ(R::binary(f).eq(R::binary(f)).run(*conn), (true));
    TEST_EQ(R::binary(f).le(R::binary(f)).run(*conn), (true));
    TEST_EQ(R::binary(f).ge(R::binary(f)).run(*conn), (true));
    TEST_EQ(R::binary(f).ne(R::binary(f)).run(*conn), (false));
    TEST_EQ(R::binary(f).lt(R::binary(f)).run(*conn), (false));
    TEST_EQ(R::binary(f).gt(R::binary(f)).run(*conn), (false));
    TEST_EQ(R::binary("foo").coerce_to("string").run(*conn), ("foo"));
    TEST_EQ(R::expr("foo").coerce_to("binary").run(*conn), ("foo"));
    TEST_EQ(R::binary("foo").coerce_to("binary").run(*conn), ("foo"));
    TEST_EQ(R::binary("abcdefg").slice(-3, -1).run(*conn), ("ef"));
    TEST_EQ(R::binary("abcdefg").slice(0, 2).run(*conn), ("ab"));
    TEST_EQ(R::binary("abcdefg").slice(3, -1).run(*conn), ("def"));
    TEST_EQ(R::binary("abcdefg").slice(-5, 5).run(*conn), ("cde"));
    TEST_EQ(R::binary("abcdefg").slice(-8, 2).run(*conn), ("ab"));
    TEST_EQ(R::binary("abcdefg").slice(5, 7).run(*conn), ("fg"));
    TEST_EQ(R::binary("abcdefg").slice(-9, 2).run(*conn), ("ab"));
    TEST_EQ(R::binary("abcdefg").slice(5, 9).run(*conn), ("fg"));
    TEST_EQ(R::binary(b).run(*conn), (b));
    TEST_EQ(R::binary(b).run(*conn), (R::Object{{"$reql_type$","BINARY"}, {"data","AAE="}}));
    TEST_EQ(R::binary(R::expr("data")).run(*conn), ("data"));
    TEST_EQ(R::binary(R::expr(R::object())).run(*conn), (err("RqlRuntimeError", "Expected type STRING but found OBJECT.", R::Array{})));
    TEST_EQ(R::binary(R::expr(R::array())).run(*conn), (err("RqlRuntimeError", "Expected type STRING but found ARRAY.", R::Array{})));
    TEST_EQ(R::expr(R::object("$reql_type$", "BINARY")).run(*conn), (err("RqlRuntimeError", "Invalid binary pseudotype: lacking `data` key.", R::Array{})));
    TEST_EQ(R::expr(R::object("$reql_type$", "BINARY", "data", "ABCDEFGH==AA")).run(*conn), (err("RqlRuntimeError", "Invalid base64 format, data found after padding character '='.", R::Array{})));
    TEST_EQ(R::expr(R::object("$reql_type$", "BINARY", "data", "ABCDEF==$")).run(*conn), (err("RqlRuntimeError", "Invalid base64 format, data found after padding character '='.", R::Array{})));
    TEST_EQ(R::expr(R::object("$reql_type$", "BINARY", "data", "A^CDEFGH")).run(*conn), (err("RqlRuntimeError", "Invalid base64 character found: '^'.", R::Array{})));
    TEST_EQ(R::expr(R::object("$reql_type$", "BINARY", "data", "ABCDE")).run(*conn), (err("RqlRuntimeError", "Invalid base64 length: 1 character remaining, cannot decode a full byte.", R::Array{})));
    TEST_EQ(R::binary(a).coerce_to("array").run(*conn), (err("RqlRuntimeError", "Cannot coerce BINARY to ARRAY.", R::Array{})));
    TEST_EQ(R::binary(a).coerce_to("object").run(*conn), (err("RqlRuntimeError", "Cannot coerce BINARY to OBJECT.", R::Array{})));
    TEST_EQ(R::binary(a).coerce_to("bool").run(*conn), (err("RqlRuntimeError", "Cannot coerce BINARY to BOOL.", R::Array{})));
    TEST_EQ(R::binary(a).coerce_to("number").run(*conn), (err("RqlRuntimeError", "Cannot coerce BINARY to NUMBER.", R::Array{})));
    TEST_EQ(R::binary(a).coerce_to(R::expr("nu") + "ll").run(*conn), (err("RqlRuntimeError", "Cannot coerce BINARY to NULL.", R::Array{})));
    exit_section();
}
