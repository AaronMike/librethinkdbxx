// auto-generated by yaml_to_cxx.py from test/upstream/default.yaml
#include "testlib.h"
void test_upstream_default() {
    enter_section("test_upstream_default: Tests r.default");
    TEST_EQ(maybe_run(R::expr(1).default_(2), *conn), (1));
    TEST_EQ(maybe_run(R::expr(R::Nil()).default_(2), *conn), (2));
    TEST_EQ(maybe_run(R::expr(R::object())["b"].default_(2), *conn), (2));
    TEST_EQ(maybe_run(R::expr(R::expr("a")["b"]).default_(2), *conn), (err("ReqlQueryLogicError", "Cannot perform bracket on a non-object non-sequence `\"a\"`.", R::Array{})));
    TEST_EQ(maybe_run(R::expr(R::array()).reduce([=](R::Var a, R::Var b){ return *a + *b; }).default_(2), *conn), (2));
    TEST_EQ(maybe_run(R::expr(R::array()).union_(R::array()).reduce([=](R::Var a, R::Var b){ return *a + *b; }).default_(2), *conn), (2));
    TEST_EQ(maybe_run(R::expr("a").reduce([=](R::Var a, R::Var b){ return *a + *b; }).default_(2), *conn), (err("ReqlQueryLogicError", "Cannot convert STRING to SEQUENCE", R::Array{})));
    TEST_EQ(maybe_run((R::expr(R::Nil()) + 5).default_(2), *conn), (2));
    TEST_EQ(maybe_run((R::expr(5) + R::expr(R::Nil())).default_(2), *conn), (2));
    TEST_EQ(maybe_run((R::expr(5) - R::expr(R::Nil())).default_(2), *conn), (2));
    TEST_EQ(maybe_run((R::expr(R::Nil()) - 5).default_(2), *conn), (2));
    TEST_EQ(maybe_run((R::expr("a") + 5).default_(2), *conn), (err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", R::Array{})));
    TEST_EQ(maybe_run((R::expr(5) + R::expr("a")).default_(2), *conn), (err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", R::Array{})));
    TEST_EQ(maybe_run((R::expr("a") - 5).default_(2), *conn), (err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", R::Array{})));
    TEST_EQ(maybe_run((R::expr(5) - R::expr("a")).default_(2), *conn), (err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", R::Array{})));
    TEST_EQ(maybe_run(R::expr(1).default_(R::error()), *conn), (1));
    TEST_EQ(maybe_run(R::expr(R::Nil()).default_(R::error()), *conn), (R::Nil()));
    TEST_EQ(maybe_run(R::expr(R::object())["b"].default_(R::error()), *conn), (err("ReqlNonExistenceError", "No attribute `b` in object:", R::Array{})));
    TEST_EQ(maybe_run(R::expr(R::array()).reduce([=](R::Var a, R::Var b){ return *a + *b; }).default_(R::error()), *conn), (err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", R::Array{})));
    TEST_EQ(maybe_run(R::expr(R::array()).union_(R::array()).reduce([=](R::Var a, R::Var b){ return *a + *b; }).default_(R::error()), *conn), (err("ReqlNonExistenceError", "Cannot reduce over an empty stream.", R::Array{})));
    TEST_EQ(maybe_run((R::expr(R::Nil()) + 5).default_(R::error()), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{})));
    TEST_EQ(maybe_run((R::expr(5) + R::expr(R::Nil())).default_(R::error()), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{})));
    TEST_EQ(maybe_run((R::expr(5) - R::expr(R::Nil())).default_(R::error()), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{})));
    TEST_EQ(maybe_run((R::expr(R::Nil()) - 5).default_(R::error()), *conn), (err("ReqlNonExistenceError", "Expected type NUMBER but found NULL.", R::Array{})));
    TEST_EQ(maybe_run(R::expr(1).default_([=](R::Var e){ return *e; }), *conn), (1));
    TEST_EQ(maybe_run(R::expr(R::Nil()).default_([=](R::Var e){ return *e; }), *conn), (R::Nil()));
    TEST_EQ(maybe_run(R::expr(R::object())["b"].default_([=](R::Var e){ return *e; }), *conn), ("No attribute `b` in object:\x0a{}"));
    TEST_EQ(maybe_run(R::expr(R::array()).reduce([=](R::Var a, R::Var b){ return *a + *b; }).default_([=](R::Var e){ return *e; }), *conn), ("Cannot reduce over an empty stream."));
    TEST_EQ(maybe_run(R::expr(R::array()).union_(R::array()).reduce([=](R::Var a, R::Var b){ return *a + *b; }).default_([=](R::Var e){ return *e; }), *conn), ("Cannot reduce over an empty stream."));
    TEST_EQ(maybe_run((R::expr(R::Nil()) + 5).default_([=](R::Var e){ return *e; }), *conn), ("Expected type NUMBER but found NULL."));
    TEST_EQ(maybe_run((R::expr(5) + R::expr(R::Nil())).default_([=](R::Var e){ return *e; }), *conn), ("Expected type NUMBER but found NULL."));
    TEST_EQ(maybe_run((R::expr(5) - R::expr(R::Nil())).default_([=](R::Var e){ return *e; }), *conn), ("Expected type NUMBER but found NULL."));
    TEST_EQ(maybe_run((R::expr(R::Nil()) - 5).default_([=](R::Var e){ return *e; }), *conn), ("Expected type NUMBER but found NULL."));
    TEST_DO(auto arr = (R::expr(R::array(R::object("a", 1), R::object("a", R::Nil()), R::object())).order_by("a")));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(false)}}), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(true)}}), *conn), (R::Array{R::Object{}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(R::js("true"))}}), *conn), (R::Array{R::Object{}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(R::js("false"))}}), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(R::error())}}), *conn), (err("ReqlNonExistenceError", "No attribute `a` in object:", R::Array{})));
    TEST_EQ(maybe_run(R::expr(false).do_([=](R::Var d){ return arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(*d)}}); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(R::expr(true).do_([=](R::Var d){ return arr.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(*d)}}); }).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].default_(0).eq(1); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].default_(1).eq(1); }).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", R::Nil()}}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return (*x)["a"].default_(R::error()).eq(1); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(R::expr(0).do_([=](R::Var i){ return arr.filter([=](R::Var x){ return (*x)["a"].default_(*i).eq(1); }); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(R::expr(1).do_([=](R::Var i){ return arr.filter([=](R::Var x){ return (*x)["a"].default_(*i).eq(1); }); }).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", R::Nil()}}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }, R::OptArgs{{"default", R::expr(false)}}), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }, R::OptArgs{{"default", R::expr(true)}}).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", R::Nil()}}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(arr.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }, R::OptArgs{{"default", R::expr(R::error())}}), *conn), (err("ReqlNonExistenceError", "No attribute `a` in object:", R::Array{})));
    TEST_EQ(maybe_run(R::table_create("default_test"), *conn), (partial(R::Object{{"tables_created", 1}})));
    TEST_EQ(maybe_run(R::table("default_test").insert(arr), *conn), (R::Object{{"deleted", 0}, {"replaced", 0}, {"generated_keys", arrlen(3, uuid())}, {"unchanged", 0}, {"errors", 0}, {"skipped", 0}, {"inserted", 3}}));
    TEST_DO(auto tbl = (R::table("default_test").order_by("a").pluck("a")));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return (*x)["a"].eq(1); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(false)}}), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(true)}}), *conn), (R::Array{R::Object{}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(R::error())}}), *conn), (err("ReqlNonExistenceError", "No attribute `a` in object:", R::Array{})));
    TEST_EQ(maybe_run(R::expr(false).do_([=](R::Var d){ return tbl.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(*d)}}); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(R::expr(true).do_([=](R::Var d){ return tbl.filter([=](R::Var x){ return (*x)["a"].eq(1); }, R::OptArgs{{"default", R::expr(*d)}}); }).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return (*x)["a"].default_(0).eq(1); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return (*x)["a"].default_(1).eq(1); }).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", R::Nil()}}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return (*x)["a"].default_(R::error()).eq(1); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(R::expr(0).do_([=](R::Var i){ return tbl.filter([=](R::Var x){ return (*x)["a"].default_(*i).eq(1); }); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(R::expr(1).do_([=](R::Var i){ return tbl.filter([=](R::Var x){ return (*x)["a"].default_(*i).eq(1); }); }).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", R::Nil()}}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }, R::OptArgs{{"default", R::expr(false)}}), *conn), (R::Array{R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }, R::OptArgs{{"default", R::expr(true)}}).order_by("a"), *conn), (R::Array{R::Object{}, R::Object{{"a", R::Nil()}}, R::Object{{"a", 1}}}));
    TEST_EQ(maybe_run(tbl.filter([=](R::Var x){ return R::or_((*x)["a"].eq(1), (*x)["a"]["b"].eq(2)); }, R::OptArgs{{"default", R::expr(R::error())}}), *conn), (err("ReqlNonExistenceError", "No attribute `a` in object:", R::Array{})));
    TEST_EQ(maybe_run(R::table_drop("default_test"), *conn), (partial(R::Object{{"tables_dropped", 1}})));
    exit_section();
}
