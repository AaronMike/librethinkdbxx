// auto-generated by yaml_to_cxx.py from test/upstream/sindex/status.yaml
#include "testlib.h"
void test_upstream_sindex_status() {
    enter_section("test_upstream_sindex_status: sindex status");
    temp_table tbl2_table;
    R::Query tbl2 = tbl2_table.table();
    TEST_EQ(maybe_run(tbl2.index_create("a"), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl2.index_create("b"), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl2.index_status().count(), *conn), (2));
    TEST_EQ(maybe_run(tbl2.index_status("a").count(), *conn), (1));
    TEST_EQ(maybe_run(tbl2.index_status("b").count(), *conn), (1));
    TEST_EQ(maybe_run(tbl2.index_status("a", "b").count(), *conn), (2));
    TEST_EQ(maybe_run(tbl2.index_drop("a"), *conn), (R::Object{{"dropped", 1}}));
    TEST_EQ(maybe_run(tbl2.index_drop("b"), *conn), (R::Object{{"dropped", 1}}));
    TEST_EQ(maybe_run(tbl2.insert(R::range(0, 5000).map(R::object("a", R::row))), *conn), (partial(R::Object{{"inserted", 5000}})));
    TEST_EQ(maybe_run(tbl2.index_create("foo"), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl2.index_create("bar", R::OptArgs{{"multi", R::expr(true)}}), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl2.index_status().map([=](R::Var x){ return (*x)["progress"]<1; }), *conn), (R::Array{true, true}));
    TEST_EQ(maybe_run(tbl2.index_wait()["ready"], *conn), (R::Array{true, true}));
    TEST_EQ(maybe_run(tbl2.index_wait()["geo"], *conn), (bag(R::Array{false, false})));
    TEST_EQ(maybe_run(tbl2.index_wait()["multi"], *conn), (bag(R::Array{false, true})));
    TEST_EQ(maybe_run(tbl2.index_wait()["outdated"], *conn), (R::Array{false, false}));
    TEST_EQ(maybe_run(tbl2.index_create("quux"), *conn), (R::Object{{"created", 1}}));
    TEST_EQ(maybe_run(tbl2.index_status("quux").do_([=](R::Var x){ return (*x)[0]["index"]=="quux" && (*x)[0]["progress"]<1; }), *conn), (true));
    TEST_EQ(maybe_run(tbl2.index_wait("quux").pluck("index", "ready"), *conn), (R::Array{R::Object{{"index", "quux"}, {"ready", true}}}));
    TEST_EQ(maybe_run(tbl2.index_wait("quux").nth(0).get_field("function").type_of(), *conn), ("PTYPE<BINARY>"));
    exit_section();
}
