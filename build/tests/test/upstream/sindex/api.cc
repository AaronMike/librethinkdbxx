// auto-generated by yaml_to_cxx.py from test/upstream/sindex/api.yaml
#include "testlib.h"
void test_upstream_sindex_api() {
    enter_section("test_upstream_sindex_api: sindex api (#602)");
    temp_table tbl_table;
    R::Query tbl = tbl_table.table();
    TEST_DO(auto rows = (R::Array{R::Object{{"id",0}, {"a",0}, {"b",0}, {"c",0}, {"m",R::Array{1, 2, 3}}}, R::Object{{"id",1}, {"a",0}, {"b",0}, {"c",0}, {"m",R::Array{4, 5, 6}}}, R::Object{{"id",2}, {"a",0}, {"b",0}, {"c",1}, {"m",7}}, R::Object{{"id",3}, {"a",0}, {"b",1}, {"c",1}, {"m",R::Array{10, 11, 12}}}, R::Object{{"id",4}, {"a",4}, {"b",4}, {"c",4}, {"m",R::Array{14, 15, 16}}}}));
    TEST_EQ(tbl.insert(R::array(R::object("id", 0, "a", 0, "b", 0, "c", 0, "m", R::array(1, 2, 3)), R::object("id", 1, "a", 0, "b", 0, "c", 0, "m", R::array(4, 5, 6)), R::object("id", 2, "a", 0, "b", 0, "c", 1, "m", 7), R::object("id", 3, "a", 0, "b", 1, "c", 1, "m", R::array(10, 11, 12)))).run(*conn), (R::Object{{"deleted",0}, {"inserted",4}, {"skipped",0}, {"errors",0}, {"replaced",0}, {"unchanged",0}}));
    TEST_EQ(tbl.index_create("rename-foo", R::row["b"]).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("rename-bar", R::row["c"]).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_rename("rename-foo", "rename-bar").run(*conn), (err_regex("RqlRuntimeError", "Index `rename-bar` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", R::Array{})));
    TEST_EQ(tbl.index_rename("rename-fake", "rename-stuff").run(*conn), (err_regex("RqlRuntimeError", "Index `rename-fake` does not exist on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", R::Array{})));
    TEST_EQ(tbl.index_rename("id", "rename-stuff").run(*conn), (err("RqlRuntimeError", "Index name conflict: `id` is the name of the primary key.", R::Array{})));
    TEST_EQ(tbl.index_rename("rename-stuff", "id").run(*conn), (err("RqlRuntimeError", "Index name conflict: `id` is the name of the primary key.", R::Array{})));
    TEST_EQ(tbl.index_rename("rename-foo", "rename-foo").run(*conn), (R::Object{{"renamed",0}}));
    TEST_EQ(tbl.index_rename("rename-foo", "rename-foo", R::OptArgs{{"overwrite", R::expr(true)}}).run(*conn), (R::Object{{"renamed",0}}));
    TEST_EQ(tbl.index_rename("rename-foo", "rename-bar", R::OptArgs{{"overwrite", R::expr(true)}}).run(*conn), (R::Object{{"renamed",1}}));
    TEST_EQ(tbl.index_rename("rename-bar", "rename-stuff", R::OptArgs{{"overwrite", R::expr(true)}}).run(*conn), (R::Object{{"renamed",1}}));
    TEST_EQ(tbl.index_rename("rename-stuff", "rename-last").run(*conn), (R::Object{{"renamed",1}}));
    TEST_EQ(tbl.index_create("minval", [=](){ return R::minval; }).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("maxval", [=](){ return R::maxval; }).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_wait("rename-last", "minval", "maxval").pluck("index", "ready").run(*conn), (bag(R::Array{R::Object{{"index","rename-last"}, {"ready",true}}, R::Object{{"index","minval"}, {"ready",true}}, R::Object{{"index","maxval"}, {"ready",true}}})));
    TEST_EQ(tbl.get_all(0, R::OptArgs{{"index", R::expr("rename-last")}}).count().run(*conn), (3));
    TEST_EQ(tbl.get_all(R::minval, R::OptArgs{{"index", R::expr("minval")}}).count().run(*conn), (0));
    TEST_EQ(tbl.get_all(R::maxval, R::OptArgs{{"index", R::expr("maxval")}}).count().run(*conn), (0));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("minval")}}).count().run(*conn), (0));
    TEST_EQ(tbl.index_create("rename-last-dup", tbl.index_status("rename-last").nth(0).get_field("function")).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_wait("rename-last-dup").pluck("index", "ready").run(*conn), (R::Array{R::Object{{"index","rename-last-dup"}, {"ready",true}}}));
    TEST_EQ(tbl.get_all(0, R::OptArgs{{"index", R::expr("rename-last-dup")}}).count().run(*conn), (3));
    TEST_EQ(tbl.index_drop("rename-last-dup").run(*conn), (R::Object{{"dropped",1}}));
    TEST_EQ(tbl.index_drop("minval").run(*conn), (R::Object{{"dropped",1}}));
    TEST_EQ(tbl.index_drop("maxval").run(*conn), (R::Object{{"dropped",1}}));
    TEST_EQ(tbl.index_list().run(*conn), (R::Array{"rename-last"}));
    TEST_EQ(tbl.index_drop("rename-last").run(*conn), (R::Object{{"dropped",1}}));
    TEST_EQ(tbl.index_create("ai", R::row["a"]).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("ai", R::row["a"]).run(*conn), (err_regex("RqlRuntimeError", "Index `ai` already exists on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", R::Array{})));
    TEST_EQ(tbl.index_create("bi", R::row["b"]).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("ci", R::row["c"]).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("idi", R::row["id"]).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("kdi", R::array(R::row["id"])).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("mi", R::row["m"], R::OptArgs{{"multi", R::expr(true)}}).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("brokeni", R::row["broken"]).run(*conn), (R::Object{{"created",1}}));
    tbl.index_wait().pluck("index", "ready").run(*conn);
    tbl.get(true).run(*conn);
    TEST_EQ(tbl.get(R::array()).run(*conn), (R::Nil()));
    TEST_EQ(tbl.get(-1).run(*conn), (R::Nil()));
    TEST_EQ(tbl.get(1)["id"].run(*conn), (1));
    TEST_EQ(tbl.get(1).type_of().run(*conn), ("SELECTION<OBJECT>"));
    TEST_EQ(tbl.get(1).update([=](R::Var x){ return R::expr(R::Nil()); }).run(*conn), (R::Object{{"replaced",0}, {"skipped",0}, {"deleted",0}, {"unchanged",1}, {"errors",0}, {"inserted",0}}));
    tbl.get_all(true, R::OptArgs{{"index", R::expr("id")}}).run(*conn);
    TEST_EQ(tbl.get_all(-1, R::OptArgs{{"index", R::expr("id")}}).run(*conn), (R::Array{}));
    TEST_EQ(tbl.get_all(-1).run(*conn), (R::Array{}));
    TEST_EQ(tbl.get_all(R::array(-1)).run(*conn), (R::Array{}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("id")}})[0]["id"].run(*conn), (1));
    TEST_EQ(tbl.get_all(1)[0]["id"].run(*conn), (1));
    TEST_EQ(tbl.get_all(1, 2, 3, R::OptArgs{{"index", R::expr("id")}}).map([=](R::Var x){ return (*x)["id"]; }).coerce_to("ARRAY").run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(tbl.get_all(1, 2, 3).map([=](R::Var x){ return (*x)["id"]; }).coerce_to("ARRAY").run(*conn), (R::Array{1, 2, 3}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("id")}}).type_of().run(*conn), ("SELECTION<STREAM>"));
    TEST_EQ(tbl.get_all(1).type_of().run(*conn), ("SELECTION<STREAM>"));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("id")}}).update([=](R::Var x){ return R::expr(R::Nil()); }).run(*conn), (R::Object{{"replaced",0}, {"skipped",0}, {"deleted",0}, {"unchanged",1}, {"errors",0}, {"inserted",0}}));
    TEST_EQ(tbl.get_all(1).update([=](R::Var x){ return R::expr(R::Nil()); }).run(*conn), (R::Object{{"replaced",0}, {"skipped",0}, {"deleted",0}, {"unchanged",1}, {"errors",0}, {"inserted",0}}));
    TEST_EQ(tbl.get_all(1, 2, 3, R::OptArgs{{"index", R::expr("id")}}).update([=](R::Var x){ return R::expr(R::Nil()); }).run(*conn), (R::Object{{"replaced",0}, {"skipped",0}, {"deleted",0}, {"unchanged",3}, {"errors",0}, {"inserted",0}}));
    TEST_EQ(tbl.get_all(1, 2, 3).update([=](R::Var x){ return R::expr(R::Nil()); }).run(*conn), (R::Object{{"replaced",0}, {"skipped",0}, {"deleted",0}, {"unchanged",3}, {"errors",0}, {"inserted",0}}));
    TEST_EQ(tbl.get_all(0, R::OptArgs{{"index", R::expr("fake")}}).run(*conn), (err_regex("RqlRuntimeError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", R::Array{})));
    TEST_EQ(tbl.get_all(R::point(0, 0)).run(*conn), (err("RqlRuntimeError", "Cannot use a geospatial index with `get_all`. Use `get_intersecting` instead.", R::Array{})));
    TEST_EQ(tbl.get_all(0, R::OptArgs{{"index", R::expr(false)}}).run(*conn), (err("RqlRuntimeError", "Expected type STRING but found BOOL.", R::Array{})));
    tbl.get_all(true, R::OptArgs{{"index", R::expr("id")}}).run(*conn);
    TEST_EQ(tbl.get_all(R::array(), R::OptArgs{{"index", R::expr("id")}}).run(*conn), (R::Array{}));
    tbl.get_all(true, R::OptArgs{{"index", R::expr("idi")}}).run(*conn);
    TEST_EQ(tbl.get_all(R::array(), R::OptArgs{{"index", R::expr("idi")}}).run(*conn), (R::Array{}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("id")}})[0]["id"].run(*conn), (1));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("idi")}})[0]["id"].run(*conn), (1));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("ai")}}).run(*conn), (R::Array{}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("bi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("bi")}}).order_by(R::OptArgs{{"index", R::expr("id")}}).map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (err("RqlRuntimeError", "Indexed order_by can only be performed on a TABLE or TABLE_SLICE.", R::Array{0})));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("bi")}}).between(1, 1, R::OptArgs{{"index", R::expr("id")}}).map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (err("RqlRuntimeError", "Expected type TABLE_SLICE but found SELECTION.", R::Array{0})));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("ci")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("ci")}}).type_of().run(*conn), ("SELECTION<STREAM>"));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("ci")}}).update([=](R::Var x){ return R::expr(R::Nil()); }).run(*conn), (R::Object{{"replaced",0}, {"skipped",0}, {"deleted",0}, {"unchanged",2}, {"errors",0}, {"inserted",0}}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("brokeni")}}).run(*conn), (R::Array{}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("mi")}}).run(*conn), (R::Array{rows[0]}));
    TEST_EQ(tbl.get_all(2, R::OptArgs{{"index", R::expr("mi")}}).run(*conn), (R::Array{rows[0]}));
    TEST_EQ(tbl.get_all(5, R::OptArgs{{"index", R::expr("mi")}}).run(*conn), (R::Array{rows[1]}));
    TEST_EQ(tbl.get_all(7, R::OptArgs{{"index", R::expr("mi")}}).run(*conn), (R::Array{rows[2]}));
    TEST_EQ(tbl.eq_join("id", tbl, R::OptArgs{{"index", R::expr("fake")}}).run(*conn), (err_regex("RqlRuntimeError", "Index `fake` was not found on table `[a-zA-Z0-9_]+.[a-zA-Z0-9_]+`[.]", R::Array{})));
    TEST_EQ(tbl.eq_join("id", tbl, R::OptArgs{{"index", R::expr(false)}}).run(*conn), (err("RqlRuntimeError", "Expected type STRING but found BOOL.", R::Array{})));
    TEST_EQ(tbl.filter(R::object("id", 1)).eq_join("id", tbl, R::OptArgs{{"index", R::expr("mi")}}).run(*conn), (R::Array{R::Object{{"left",rows[1]}, {"right",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join("id", tbl).run(*conn), (R::Array{R::Object{{"left",rows[0]}, {"right",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join([=](R::Var x){ return (*x)["id"]; }, tbl).run(*conn), (R::Array{R::Object{{"left",rows[0]}, {"right",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join("id", tbl, R::OptArgs{{"index", R::expr("id")}}).run(*conn), (R::Array{R::Object{{"left",rows[0]}, {"right",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join([=](R::Var x){ return (*x)["id"]; }, tbl, R::OptArgs{{"index", R::expr("id")}}).run(*conn), (R::Array{R::Object{{"left",rows[0]}, {"right",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join("id", tbl, R::OptArgs{{"index", R::expr("idi")}}).run(*conn), (R::Array{R::Object{{"left",rows[0]}, {"right",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join([=](R::Var x){ return (*x)["id"]; }, tbl, R::OptArgs{{"index", R::expr("idi")}}).run(*conn), (R::Array{R::Object{{"left",rows[0]}, {"right",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join("id", tbl, R::OptArgs{{"index", R::expr("ai")}}).order_by("right").run(*conn), (R::Array{R::Object{{"right",rows[0]}, {"left",rows[0]}}, R::Object{{"right",rows[1]}, {"left",rows[0]}}, R::Object{{"right",rows[2]}, {"left",rows[0]}}, R::Object{{"right",rows[3]}, {"left",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join("id", tbl, R::OptArgs{{"index", R::expr("bi")}}).order_by("right").run(*conn), (R::Array{R::Object{{"right",rows[0]}, {"left",rows[0]}}, R::Object{{"right",rows[1]}, {"left",rows[0]}}, R::Object{{"right",rows[2]}, {"left",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join("id", tbl, R::OptArgs{{"index", R::expr("ci")}}).order_by("right").run(*conn), (R::Array{R::Object{{"right",rows[0]}, {"left",rows[0]}}, R::Object{{"right",rows[1]}, {"left",rows[0]}}}));
    TEST_EQ(tbl.filter(R::object("id", 0)).eq_join("id", tbl, R::OptArgs{{"index", R::expr("brokeni")}}).run(*conn), (R::Array{}));
    TEST_EQ(tbl.eq_join("c", tbl, R::OptArgs{{"index", R::expr("bi")}}).order_by("right", "left").run(*conn), (R::Array{R::Object{{"left",rows[0]}, {"right",rows[0]}}, R::Object{{"left",rows[1]}, {"right",rows[0]}}, R::Object{{"left",rows[0]}, {"right",rows[1]}}, R::Object{{"left",rows[1]}, {"right",rows[1]}}, R::Object{{"left",rows[0]}, {"right",rows[2]}}, R::Object{{"left",rows[1]}, {"right",rows[2]}}, R::Object{{"left",rows[2]}, {"right",rows[3]}}, R::Object{{"left",rows[3]}, {"right",rows[3]}}}));
    TEST_EQ(tbl.index_create("id").run(*conn), (err("RqlRuntimeError", "Index name conflict: `id` is the name of the primary key.", R::Array{})));
    TEST_EQ(tbl.index_create("c").run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("broken").run(*conn), (R::Object{{"created",1}}));
    tbl.index_wait("broken").run(*conn);
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3}));
    TEST_EQ(tbl.get_all(1, R::OptArgs{{"index", R::expr("broken")}}).order_by("broken").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.index_create("nil", [=](R::Var x){ return R::expr(R::Nil()); }).run(*conn), (R::Object{{"created",1}}));
    tbl.index_wait().pluck("index", "ready").run(*conn);
    TEST_EQ(tbl.get_all(R::Nil(), R::OptArgs{{"index", R::expr("nil")}}).run(*conn), (err("RqlRuntimeError", "Secondary keys must be a number, string, bool, pseudotype, or array (got null of type NULL).", R::Array{})));
    TEST_EQ(tbl.insert(R::object("id", 4, "a", 4, "b", 4, "c", 4, "m", R::array(14, 15, 16))).run(*conn), (R::Object{{"deleted",0}, {"inserted",1}, {"skipped",0}, {"errors",0}, {"replaced",0}, {"unchanged",0}}));
    TEST_EQ(tbl.eq_join("id", tbl, R::OptArgs{{"index", R::expr("c")}}).order_by("left", "right").coerce_to("ARRAY").run(*conn), (R::Array{R::Object{{"right",rows[0]}, {"left",rows[0]}}, R::Object{{"right",rows[1]}, {"left",rows[0]}}, R::Object{{"right",rows[2]}, {"left",rows[1]}}, R::Object{{"right",rows[3]}, {"left",rows[1]}}, R::Object{{"right",rows[4]}, {"left",rows[4]}}}));
    TEST_EQ(tbl.eq_join("id", tbl, R::OptArgs{{"index", R::expr("ci")}}).order_by("left", "right").run(*conn), (R::Array{R::Object{{"right",rows[0]}, {"left",rows[0]}}, R::Object{{"right",rows[1]}, {"left",rows[0]}}, R::Object{{"right",rows[2]}, {"left",rows[1]}}, R::Object{{"right",rows[3]}, {"left",rows[1]}}, R::Object{{"right",rows[4]}, {"left",rows[4]}}}));
    TEST_EQ(tbl.between(R::Nil(), 2, R::OptArgs{{"index", R::expr("id")}}).count().run(*conn), (err("RqlRuntimeError", "Cannot use `null` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")));
    TEST_EQ(tbl.between(2, R::Nil(), R::OptArgs{{"index", R::expr("id")}}).count().run(*conn), (err("RqlRuntimeError", "Cannot use `null` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")));
    TEST_EQ(tbl.between(R::Nil(), R::Nil(), R::OptArgs{{"index", R::expr("id")}}).count().run(*conn), (err("RqlRuntimeError", "Cannot use `null` in BETWEEN, use `r.minval` or `r.maxval` to denote unboundedness.")));
    TEST_EQ(tbl.between(R::minval, R::maxval).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::maxval).order_by(R::OptArgs{{"index", R::expr("id")}}).map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::maxval).between(R::minval, R::maxval).map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (err("RqlRuntimeError", "Cannot perform multiple BETWEENs on the same table.", R::Array{0})));
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("id")}}).between(R::minval, 3).map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(0, R::maxval).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 4).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(-1, 5).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(5, 5).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(5, R::maxval).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, -1).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, 4, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(-1, 5, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(5, 5, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(5, R::maxval, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, -1, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1, R::OptArgs{{"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 4, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(-1, 5, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(5, 5, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(5, R::maxval, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, -1, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1, R::OptArgs{{"index", R::expr("id")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, 4, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(-1, 5, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(5, 5, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(5, R::maxval, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, -1, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1, R::OptArgs{{"index", R::expr("id")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 4, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(-1, 5, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(5, 5, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(5, R::maxval, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, -1, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1, R::OptArgs{{"index", R::expr("idi")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, 4, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(-1, 5, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(5, 5, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(5, R::maxval, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, -1, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1, R::OptArgs{{"index", R::expr("idi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 4, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 5, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, 4, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, 4, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, 5, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(0, 3, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 1, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 0, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, 2, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 3, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 1, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, 0, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(-1, 2, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(1, 1, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(1, R::maxval, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{4}));
    TEST_EQ(tbl.between(5, R::maxval, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, 0, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(-1, -1, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1, R::OptArgs{{"index", R::expr("ai")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(1, 1, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(1, R::maxval, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{4}));
    TEST_EQ(tbl.between(5, R::maxval, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, 0, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(-1, -1, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, -1, R::OptArgs{{"index", R::expr("ai")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(0, 1, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(-1, 1, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::minval, 1, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(-1, R::maxval, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(1, R::maxval, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(1, 1, R::OptArgs{{"index", R::expr("c")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(0, 1, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(-1, 1, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(R::minval, 1, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(0, R::maxval, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(-1, R::maxval, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(1, R::maxval, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(1, 1, R::OptArgs{{"index", R::expr("c")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3}));
    TEST_EQ(tbl.index_create("bc", [=](R::Var row){ return R::array((*row)["b"], (*row)["c"]); }).run(*conn), (R::Object{{"created",1}}));
    TEST_EQ(tbl.index_create("cb", [=](R::Var row){ return R::array((*row)["c"], (*row)["b"]); }).run(*conn), (R::Object{{"created",1}}));
    tbl.index_wait().pluck("index", "ready").run(*conn);
    TEST_EQ(tbl.between(R::minval, R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::minval, R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::minval, R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::minval, R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::minval, R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::minval, R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(R::minval, R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::minval, R::maxval, R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::array(0, 0), R::maxval, R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 0), R::maxval, R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(R::array(0, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3}));
    TEST_EQ(tbl.between(R::array(0, 0), R::maxval, R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 0), R::maxval, R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 1, 2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(0, 1), R::maxval, R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 1), R::maxval, R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3}));
    TEST_EQ(tbl.between(R::array(0, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3}));
    TEST_EQ(tbl.between(R::array(0, 1), R::maxval, R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(R::array(0, 1), R::maxval, R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(1, 0), R::maxval, R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3, 4}));
    TEST_EQ(tbl.between(R::array(1, 0), R::maxval, R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3}));
    TEST_EQ(tbl.between(R::array(1, 0), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3}));
    TEST_EQ(tbl.between(R::array(1, 0), R::maxval, R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3, 4}));
    TEST_EQ(tbl.between(R::array(1, 0), R::maxval, R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{2, 3, 4}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::maxval, R::OptArgs{{"index", R::expr("bc")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3, 4}));
    TEST_EQ(tbl.between(R::array(1, 1), R::maxval, R::OptArgs{{"index", R::expr("cb")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3, 4}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(0, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 0), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3}));
    TEST_EQ(tbl.between(R::array(1, 1), R::array(1, 1), R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3}));
    TEST_EQ(tbl.between(R::array(1, 1), R::maxval, R::OptArgs{{"index", R::expr("bc")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3, 4}));
    TEST_EQ(tbl.between(R::array(1, 1), R::maxval, R::OptArgs{{"index", R::expr("cb")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{3, 4}));
    TEST_EQ(tbl.between(1, 3, R::OptArgs{{"index", R::expr("mi")}, {"right_bound", R::expr("closed")}}).map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 0, 0}));
    TEST_EQ(tbl.between(1, 16, R::OptArgs{{"index", R::expr("mi")}, {"right_bound", R::expr("closed")}}).order_by("id").map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 0, 0, 1, 1, 1, 2, 3, 3, 3, 4, 4, 4}));
    TEST_EQ(tbl.order_by(R::OptArgs{{"index", R::expr("mi")}}).map([=](R::Var x){ return (*x)["id"]; }).run(*conn), (R::Array{0, 0, 0, 1, 1, 1, 2, 3, 3, 3, 4, 4, 4}));
    exit_section();
}
