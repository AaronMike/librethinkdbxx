// auto-generated by yaml_to_cxx.py from test/upstream/math_logic/add.yaml
#include "testlib.h"
void test_upstream_math_logic_add() {
    enter_section("test_upstream_math_logic_add: Tests for basic usage of the add operation");
    TEST_EQ(maybe_run(R::add(1, 1), *conn), (2));
    TEST_EQ(maybe_run((R::expr(1) + 1), *conn), (2));
    TEST_EQ(maybe_run((R::expr(1) + R::expr(1)), *conn), (2));
    TEST_EQ(maybe_run(R::expr(1).add(1), *conn), (2));
    TEST_EQ(maybe_run((R::expr(-1) + 1), *conn), (0));
    TEST_EQ(maybe_run((R::expr(1.75) + 8.5), *conn), (10.25));
    TEST_EQ(maybe_run((R::expr("") + ""), *conn), (""));
    TEST_EQ(maybe_run((R::expr("abc") + "def"), *conn), ("abcdef"));
    TEST_EQ(maybe_run((((R::expr(R::array(1, 2)) + R::array(3)) + R::array(4, 5)) + R::array(6, 7, 8)), *conn), (R::Array{1, 2, 3, 4, 5, 6, 7, 8}));
    TEST_EQ(maybe_run((R::expr(1) + "a"), *conn), (err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", R::Array{1})));
    TEST_EQ(maybe_run((R::expr("a") + 1), *conn), (err("ReqlQueryLogicError", "Expected type STRING but found NUMBER.", R::Array{1})));
    TEST_EQ(maybe_run((R::expr(R::array()) + 1), *conn), (err("ReqlQueryLogicError", "Expected type ARRAY but found NUMBER.", R::Array{1})));
    exit_section();
}
