// auto-generated by yaml_to_cxx.py from test/upstream/math_logic/aliases.yaml
#include "testlib.h"
void test_upstream_math_logic_aliases() {
    enter_section("test_upstream_math_logic_aliases: Test named aliases for math and logic operators");
    TEST_EQ(maybe_run(R::expr(0).add(1), *conn), (1));
    TEST_EQ(maybe_run(R::add(0, 1), *conn), (1));
    TEST_EQ(maybe_run(R::expr(2).sub(1), *conn), (1));
    TEST_EQ(maybe_run(R::sub(2, 1), *conn), (1));
    TEST_EQ(maybe_run(R::expr(2).div(2), *conn), (1));
    TEST_EQ(maybe_run(R::div(2, 2), *conn), (1));
    TEST_EQ(maybe_run(R::expr(1).mul(1), *conn), (1));
    TEST_EQ(maybe_run(R::mul(1, 1), *conn), (1));
    TEST_EQ(maybe_run(R::expr(1).mod(2), *conn), (1));
    TEST_EQ(maybe_run(R::mod(1, 2), *conn), (1));
    TEST_EQ(maybe_run(R::expr(true).and_(true), *conn), (true));
    TEST_EQ(maybe_run(R::expr(true).or_(true), *conn), (true));
    TEST_EQ(maybe_run(R::and_(true, true), *conn), (true));
    TEST_EQ(maybe_run(R::or_(true, true), *conn), (true));
    TEST_EQ(maybe_run(R::expr(false).not_(), *conn), (true));
    TEST_EQ(maybe_run(R::not_(false), *conn), (true));
    TEST_EQ(maybe_run(R::expr(1).eq(1), *conn), (true));
    TEST_EQ(maybe_run(R::expr(1).ne(2), *conn), (true));
    TEST_EQ(maybe_run(R::expr(1).lt(2), *conn), (true));
    TEST_EQ(maybe_run(R::expr(1).gt(0), *conn), (true));
    TEST_EQ(maybe_run(R::expr(1).le(1), *conn), (true));
    TEST_EQ(maybe_run(R::expr(1).ge(1), *conn), (true));
    TEST_EQ(maybe_run(R::eq(1, 1), *conn), (true));
    TEST_EQ(maybe_run(R::ne(1, 2), *conn), (true));
    TEST_EQ(maybe_run(R::lt(1, 2), *conn), (true));
    TEST_EQ(maybe_run(R::gt(1, 0), *conn), (true));
    TEST_EQ(maybe_run(R::le(1, 1), *conn), (true));
    TEST_EQ(maybe_run(R::ge(1, 1), *conn), (true));
    exit_section();
}
