// auto-generated by yaml_to_cxx.py from test/upstream/math_logic/div.yaml
#include "testlib.h"
void test_upstream_math_logic_div() {
    enter_section("test_upstream_math_logic_div: Tests for the basic usage of the division operation");
    TEST_EQ((R::expr(4) / 2).run(*conn), (2));
    TEST_EQ((R::expr(4) / R::expr(2)).run(*conn), (2));
    TEST_EQ(R::expr(4).div(2).run(*conn), (2));
    TEST_EQ((R::expr(-1) / -2).run(*conn), (0.5));
    TEST_EQ((R::expr(4.9) / 0.7).run(*conn), (4.9 / 0.7));
    TEST_EQ((R::expr(1) / 0).run(*conn), (err("RqlRuntimeError", "Cannot divide by zero.", R::Array{1})));
    TEST_EQ((R::expr(2.0) / 0).run(*conn), (err("RqlRuntimeError", "Cannot divide by zero.", R::Array{1})));
    TEST_EQ((R::expr(3) / 0.0).run(*conn), (err("RqlRuntimeError", "Cannot divide by zero.", R::Array{1})));
    TEST_EQ((R::expr(4.0) / 0.0).run(*conn), (err("RqlRuntimeError", "Cannot divide by zero.", R::Array{1})));
    TEST_EQ((R::expr(0) / 0).run(*conn), (err("RqlRuntimeError", "Cannot divide by zero.", R::Array{1})));
    TEST_EQ((R::expr(0.0) / 0.0).run(*conn), (err("RqlRuntimeError", "Cannot divide by zero.", R::Array{1})));
    TEST_EQ((R::expr("a") / 0.8).run(*conn), (err("RqlRuntimeError", "Expected type NUMBER but found STRING.", R::Array{0})));
    TEST_EQ((R::expr(1) / "a").run(*conn), (err("RqlRuntimeError", "Expected type NUMBER but found STRING.", R::Array{1})));
    exit_section();
}
