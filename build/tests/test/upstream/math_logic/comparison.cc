// auto-generated by yaml_to_cxx.py from test/upstream/math_logic/comparison.yaml
#include "testlib.h"
void test_upstream_math_logic_comparison() {
    enter_section("test_upstream_math_logic_comparison: Tests of comparison operators");
    TEST_EQ((R::expr(1)<2).run(*conn), (true));
    TEST_EQ((R::expr(1)<R::expr(2)).run(*conn), (true));
    TEST_EQ(R::expr(1).lt(2).run(*conn), (true));
    TEST_EQ((R::expr(3)<2).run(*conn), (false));
    TEST_EQ((R::expr(2)<2).run(*conn), (false));
    TEST_EQ((R::expr(1)>2).run(*conn), (false));
    TEST_EQ((R::expr(1)>R::expr(2)).run(*conn), (false));
    TEST_EQ(R::expr(1).gt(2).run(*conn), (false));
    TEST_EQ((R::expr(3)>2).run(*conn), (true));
    TEST_EQ((R::expr(2)>2).run(*conn), (false));
    TEST_EQ((R::expr(1)==2).run(*conn), (false));
    TEST_EQ((R::expr(1)==R::expr(2)).run(*conn), (false));
    TEST_EQ(R::expr(1).eq(2).run(*conn), (false));
    TEST_EQ((R::expr(3)==2).run(*conn), (false));
    TEST_EQ((R::expr(2)==2).run(*conn), (true));
    TEST_EQ((R::expr(1)!=2).run(*conn), (true));
    TEST_EQ((R::expr(1)!=R::expr(2)).run(*conn), (true));
    TEST_EQ(R::expr(1).ne(2).run(*conn), (true));
    TEST_EQ((R::expr(3)!=2).run(*conn), (true));
    TEST_EQ((R::expr(2)!=2).run(*conn), (false));
    TEST_EQ((R::expr(1)<=2).run(*conn), (true));
    TEST_EQ((R::expr(1)<=R::expr(2)).run(*conn), (true));
    TEST_EQ(R::expr(1).le(2).run(*conn), (true));
    TEST_EQ((R::expr(3)<=2).run(*conn), (false));
    TEST_EQ((R::expr(2)<=2).run(*conn), (true));
    TEST_EQ((R::expr(1)>=2).run(*conn), (false));
    TEST_EQ((R::expr(1)>=R::expr(2)).run(*conn), (false));
    TEST_EQ(R::expr(1).ge(2).run(*conn), (false));
    TEST_EQ((R::expr(3)>=2).run(*conn), (true));
    TEST_EQ((R::expr(2)>=2).run(*conn), (true));
    TEST_EQ((R::expr(R::Nil())==R::Nil()).run(*conn), (true));
    TEST_EQ((R::expr(R::Nil())==R::expr(R::Nil())).run(*conn), (true));
    TEST_EQ((R::expr(R::Nil())<R::Nil()).run(*conn), (false));
    TEST_EQ((R::expr(R::Nil())<R::expr(R::Nil())).run(*conn), (false));
    TEST_EQ(R::expr(R::Nil()).gt(R::Nil()).run(*conn), (false));
    TEST_EQ((R::expr(R::Nil())>R::Nil()).run(*conn), (false));
    TEST_EQ((R::expr(R::Nil())>R::expr(R::Nil())).run(*conn), (false));
    TEST_EQ(R::expr(R::Nil()).lt(R::Nil()).run(*conn), (false));
    TEST_EQ((R::expr("a")=="a").run(*conn), (true));
    TEST_EQ((R::expr("a")=="aa").run(*conn), (false));
    TEST_EQ((R::expr("a")<"aa").run(*conn), (true));
    TEST_EQ((R::expr("a")<"bb").run(*conn), (true));
    TEST_EQ((R::expr("bb")>"a").run(*conn), (true));
    TEST_EQ((R::expr("abcdef")<"abcdeg").run(*conn), (true));
    TEST_EQ((R::expr("abcdefg")>"abcdeg").run(*conn), (false));
    TEST_EQ((R::expr("A quick brown fox")>"A quick brawn fox").run(*conn), (true));
    TEST_EQ((R::expr(R::array(1))<R::array(2)).run(*conn), (true));
    TEST_EQ((R::expr(R::array(1))>R::array(2)).run(*conn), (false));
    TEST_EQ((R::expr(R::array(1, 0))<R::array(2)).run(*conn), (true));
    TEST_EQ((R::expr(R::array(1, 0))<R::array(1)).run(*conn), (false));
    TEST_EQ((R::expr(R::array(1, 0))>R::array(0)).run(*conn), (true));
    TEST_EQ((R::expr(R::array(1, "a"))<R::array(1, "b")).run(*conn), (true));
    TEST_EQ((R::expr(R::array(0, "z"))<R::array(1, "b")).run(*conn), (true));
    TEST_EQ((R::expr(R::array(1, 1, 1))<R::array(1, 0, 2)).run(*conn), (false));
    TEST_EQ((R::expr(R::array(1, 0, 2))<R::array(1, 1, 1)).run(*conn), (true));
    TEST_EQ((R::expr(R::object("a", 0))==R::object("a", 0)).run(*conn), (true));
    TEST_EQ((R::expr(R::object("a", 0, "b", 1))==R::object("b", 1, "a", 0)).run(*conn), (true));
    TEST_EQ((R::expr(R::object("a", 0, "b", 1, "c", 2))==R::object("b", 1, "a", 0)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("a", 0, "b", 1))==R::object("b", 1, "a", 0, "c", 2)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("a", 0, "b", 1, "d", 2))==R::object("b", 1, "a", 0, "c", 2)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("a", 0))<R::object("b", 0)).run(*conn), (true));
    TEST_EQ((R::expr(R::object("a", 1))<R::object("b", 0)).run(*conn), (true));
    TEST_EQ((R::expr(R::object("b", 1))<R::object("b", 0)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("b", 1))<R::object("a", 0)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("a", 0, "b", 1, "c", 2))<R::object("a", 0, "b", 1, "c", 2)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("a", 0, "b", 1, "c", 2, "d", 3))<R::object("a", 0, "b", 1, "c", 2)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("a", 0, "b", 1, "c", 2))<R::object("a", 0, "b", 1, "c", 2, "d", 3)).run(*conn), (true));
    TEST_EQ((R::expr(R::object("a", 0, "c", 2))<R::object("a", 0, "b", 1, "c", 2)).run(*conn), (false));
    TEST_EQ((R::expr(R::object("a", 0, "c", 2))>R::object("a", 0, "b", 1, "c", 2)).run(*conn), (true));
    TEST_DO(auto everything = (R::expr(R::array(R::array(), R::now(), R::binary("\x00"), false, R::Nil(), -5, R::object(), "a", R::maxval))));
    TEST_EQ(R::and_(R::args(everything.map(R::lt(R::minval, R::row)))).run(*conn), (true));
    TEST_EQ(R::or_(R::args(everything.map(R::gt(R::minval, R::row)))).run(*conn), (false));
    TEST_EQ(R::eq(R::minval, R::minval).run(*conn), (true));
    TEST_EQ((R::expr(R::array())<true).run(*conn), (true));
    TEST_EQ((R::expr(R::array(1, 2))<false).run(*conn), (true));
    (R::expr(false)<R::array()).run(*conn);
    TEST_EQ((R::expr(R::array())<R::binary("\xae")).run(*conn), (true));
    TEST_EQ((R::expr(R::array(1, 2))<R::binary("\xae")).run(*conn), (true));
    TEST_EQ((R::expr(true)<R::expr(R::Nil())).run(*conn), (true));
    TEST_EQ((R::expr(R::Nil())>R::array()).run(*conn), (true));
    TEST_EQ((R::expr(R::Nil())<12).run(*conn), (true));
    TEST_EQ((R::expr(R::Nil())<-2).run(*conn), (true));
    TEST_EQ((R::expr(-12)<R::object()).run(*conn), (true));
    TEST_EQ((R::expr(100)<R::object("a", -12)).run(*conn), (true));
    TEST_EQ((R::expr(R::binary("\xae"))<12).run(*conn), (false));
    TEST_EQ((R::binary("0xAE")<"abc").run(*conn), (true));
    TEST_EQ((R::binary("0xAE")>R::now()).run(*conn), (false));
    TEST_EQ((R::now()>12).run(*conn), (true));
    TEST_EQ((R::now()>"abc").run(*conn), (false));
    TEST_EQ((R::expr("abc")>R::object("a", -12)).run(*conn), (true));
    TEST_EQ((R::expr("abc")>R::object("abc", "abc")).run(*conn), (true));
    TEST_EQ((R::expr("zzz")>128).run(*conn), (true));
    TEST_EQ((R::expr("zzz")>R::object()).run(*conn), (true));
    TEST_EQ((R::expr("zzz")>R::expr(-152)).run(*conn), (true));
    TEST_EQ((R::expr("zzz")>R::expr(R::Nil())).run(*conn), (true));
    TEST_EQ((R::expr("zzz")>R::expr(R::array())).run(*conn), (true));
    TEST_DO(auto everything2 = (R::expr(R::array(R::minval, R::array(), R::now(), R::binary("\x00"), false, R::Nil(), -5, R::object(), "a"))));
    TEST_EQ(R::and_(R::args(everything2.map(R::gt(R::maxval, R::row)))).run(*conn), (true));
    TEST_EQ(R::or_(R::args(everything2.map(R::lt(R::maxval, R::row)))).run(*conn), (false));
    TEST_EQ(R::eq(R::maxval, R::maxval).run(*conn), (true));
    exit_section();
}
